// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConanProxyAttributes conan proxy attributes
//
// swagger:model ConanProxyAttributes
type ConanProxyAttributes struct {

	// Conan protocol version;
	// Example: V1
	// Enum: ["V1","V2"]
	ConanVersion string `json:"conanVersion,omitempty"`
}

// Validate validates this conan proxy attributes
func (m *ConanProxyAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConanVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var conanProxyAttributesTypeConanVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["V1","V2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		conanProxyAttributesTypeConanVersionPropEnum = append(conanProxyAttributesTypeConanVersionPropEnum, v)
	}
}

const (

	// ConanProxyAttributesConanVersionV1 captures enum value "V1"
	ConanProxyAttributesConanVersionV1 string = "V1"

	// ConanProxyAttributesConanVersionV2 captures enum value "V2"
	ConanProxyAttributesConanVersionV2 string = "V2"
)

// prop value enum
func (m *ConanProxyAttributes) validateConanVersionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, conanProxyAttributesTypeConanVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConanProxyAttributes) validateConanVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.ConanVersion) { // not required
		return nil
	}

	// value enum
	if err := m.validateConanVersionEnum("conanVersion", "body", m.ConanVersion); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this conan proxy attributes based on context it is used
func (m *ConanProxyAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConanProxyAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConanProxyAttributes) UnmarshalBinary(b []byte) error {
	var res ConanProxyAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
