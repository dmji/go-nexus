// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GroupBlobStoreAPIResponse group blob store Api response
//
// swagger:model GroupBlobStoreApiResponse
type GroupBlobStoreAPIResponse struct {

	// fill policy
	// Enum: ["roundRobin","writeToFirst"]
	FillPolicy string `json:"fillPolicy,omitempty"`

	// List of the names of blob stores that are members of this group
	Members []string `json:"members"`

	// name
	Name string `json:"name,omitempty"`

	// Settings to control the soft quota
	SoftQuota *BlobStoreAPISoftQuota `json:"softQuota,omitempty"`
}

// Validate validates this group blob store Api response
func (m *GroupBlobStoreAPIResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFillPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftQuota(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var groupBlobStoreApiResponseTypeFillPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["roundRobin","writeToFirst"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		groupBlobStoreApiResponseTypeFillPolicyPropEnum = append(groupBlobStoreApiResponseTypeFillPolicyPropEnum, v)
	}
}

const (

	// GroupBlobStoreAPIResponseFillPolicyRoundRobin captures enum value "roundRobin"
	GroupBlobStoreAPIResponseFillPolicyRoundRobin string = "roundRobin"

	// GroupBlobStoreAPIResponseFillPolicyWriteToFirst captures enum value "writeToFirst"
	GroupBlobStoreAPIResponseFillPolicyWriteToFirst string = "writeToFirst"
)

// prop value enum
func (m *GroupBlobStoreAPIResponse) validateFillPolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, groupBlobStoreApiResponseTypeFillPolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GroupBlobStoreAPIResponse) validateFillPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.FillPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateFillPolicyEnum("fillPolicy", "body", m.FillPolicy); err != nil {
		return err
	}

	return nil
}

func (m *GroupBlobStoreAPIResponse) validateSoftQuota(formats strfmt.Registry) error {
	if swag.IsZero(m.SoftQuota) { // not required
		return nil
	}

	if m.SoftQuota != nil {
		if err := m.SoftQuota.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("softQuota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("softQuota")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this group blob store Api response based on the context it is used
func (m *GroupBlobStoreAPIResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSoftQuota(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupBlobStoreAPIResponse) contextValidateSoftQuota(ctx context.Context, formats strfmt.Registry) error {

	if m.SoftQuota != nil {

		if swag.IsZero(m.SoftQuota) { // not required
			return nil
		}

		if err := m.SoftQuota.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("softQuota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("softQuota")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupBlobStoreAPIResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupBlobStoreAPIResponse) UnmarshalBinary(b []byte) error {
	var res GroupBlobStoreAPIResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
