// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// S3BlobStoreAPIFailoverBucket s3 blob store Api failover bucket
//
// swagger:model S3BlobStoreApiFailoverBucket
type S3BlobStoreAPIFailoverBucket struct {

	// The name of the bucket in the region
	// Required: true
	// Read Only: true
	BucketName string `json:"bucketName"`

	// The region containing the bucket
	// Required: true
	// Read Only: true
	Region string `json:"region"`
}

// Validate validates this s3 blob store Api failover bucket
func (m *S3BlobStoreAPIFailoverBucket) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBucketName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *S3BlobStoreAPIFailoverBucket) validateBucketName(formats strfmt.Registry) error {

	if err := validate.RequiredString("bucketName", "body", m.BucketName); err != nil {
		return err
	}

	return nil
}

func (m *S3BlobStoreAPIFailoverBucket) validateRegion(formats strfmt.Registry) error {

	if err := validate.RequiredString("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this s3 blob store Api failover bucket based on the context it is used
func (m *S3BlobStoreAPIFailoverBucket) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBucketName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *S3BlobStoreAPIFailoverBucket) contextValidateBucketName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "bucketName", "body", string(m.BucketName)); err != nil {
		return err
	}

	return nil
}

func (m *S3BlobStoreAPIFailoverBucket) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "region", "body", string(m.Region)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *S3BlobStoreAPIFailoverBucket) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *S3BlobStoreAPIFailoverBucket) UnmarshalBinary(b []byte) error {
	var res S3BlobStoreAPIFailoverBucket
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
