// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FileBlobStoreAPIModel file blob store Api model
//
// swagger:model FileBlobStoreApiModel
type FileBlobStoreAPIModel struct {

	// An absolute path or a path relative to <data-directory>/blobs
	Path string `json:"path,omitempty"`

	// Settings to control the soft quota
	SoftQuota *BlobStoreAPISoftQuota `json:"softQuota,omitempty"`
}

// Validate validates this file blob store Api model
func (m *FileBlobStoreAPIModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSoftQuota(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FileBlobStoreAPIModel) validateSoftQuota(formats strfmt.Registry) error {
	if swag.IsZero(m.SoftQuota) { // not required
		return nil
	}

	if m.SoftQuota != nil {
		if err := m.SoftQuota.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("softQuota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("softQuota")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this file blob store Api model based on the context it is used
func (m *FileBlobStoreAPIModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSoftQuota(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FileBlobStoreAPIModel) contextValidateSoftQuota(ctx context.Context, formats strfmt.Registry) error {

	if m.SoftQuota != nil {

		if swag.IsZero(m.SoftQuota) { // not required
			return nil
		}

		if err := m.SoftQuota.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("softQuota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("softQuota")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FileBlobStoreAPIModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FileBlobStoreAPIModel) UnmarshalBinary(b []byte) error {
	var res FileBlobStoreAPIModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
