// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DockerAttributes docker attributes
//
// swagger:model DockerAttributes
type DockerAttributes struct {

	// Whether to force authentication (Docker Bearer Token Realm required if false)
	// Example: true
	// Required: true
	ForceBasicAuth *bool `json:"forceBasicAuth"`

	// Create an HTTP connector at specified port
	// Example: 8082
	HTTPPort int32 `json:"httpPort,omitempty"`

	// Create an HTTPS connector at specified port
	// Example: 8083
	HTTPSPort int32 `json:"httpsPort,omitempty"`

	// Allows to use subdomain
	// Example: docker-a
	Subdomain string `json:"subdomain,omitempty"`

	// Whether to allow clients to use the V1 API to interact with this repository
	// Example: false
	// Required: true
	V1Enabled *bool `json:"v1Enabled"`
}

// Validate validates this docker attributes
func (m *DockerAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateForceBasicAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateV1Enabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DockerAttributes) validateForceBasicAuth(formats strfmt.Registry) error {

	if err := validate.Required("forceBasicAuth", "body", m.ForceBasicAuth); err != nil {
		return err
	}

	return nil
}

func (m *DockerAttributes) validateV1Enabled(formats strfmt.Registry) error {

	if err := validate.Required("v1Enabled", "body", m.V1Enabled); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this docker attributes based on context it is used
func (m *DockerAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DockerAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DockerAttributes) UnmarshalBinary(b []byte) error {
	var res DockerAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
