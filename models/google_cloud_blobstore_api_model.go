// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GoogleCloudBlobstoreAPIModel google cloud blobstore Api model
//
// swagger:model GoogleCloudBlobstoreApiModel
type GoogleCloudBlobstoreAPIModel struct {

	// The GC Storage specific configuration details for the GC Storage object that'll contain the blob store.
	// Required: true
	BucketConfiguration *GoogleCloudBlobStoreAPIBucketConfiguration `json:"bucketConfiguration"`

	// The name of the GC Storage blob store.
	// Example: gc_storage
	// Required: true
	Name *string `json:"name"`

	// Settings to control the soft quota.
	SoftQuota *BlobStoreAPISoftQuota `json:"softQuota,omitempty"`

	// The blob store type.
	// Example: Google Cloud Storage
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this google cloud blobstore Api model
func (m *GoogleCloudBlobstoreAPIModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBucketConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftQuota(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GoogleCloudBlobstoreAPIModel) validateBucketConfiguration(formats strfmt.Registry) error {

	if err := validate.Required("bucketConfiguration", "body", m.BucketConfiguration); err != nil {
		return err
	}

	if m.BucketConfiguration != nil {
		if err := m.BucketConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bucketConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bucketConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *GoogleCloudBlobstoreAPIModel) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *GoogleCloudBlobstoreAPIModel) validateSoftQuota(formats strfmt.Registry) error {
	if swag.IsZero(m.SoftQuota) { // not required
		return nil
	}

	if m.SoftQuota != nil {
		if err := m.SoftQuota.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("softQuota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("softQuota")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this google cloud blobstore Api model based on the context it is used
func (m *GoogleCloudBlobstoreAPIModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBucketConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSoftQuota(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GoogleCloudBlobstoreAPIModel) contextValidateBucketConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.BucketConfiguration != nil {

		if err := m.BucketConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bucketConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bucketConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *GoogleCloudBlobstoreAPIModel) contextValidateSoftQuota(ctx context.Context, formats strfmt.Registry) error {

	if m.SoftQuota != nil {

		if swag.IsZero(m.SoftQuota) { // not required
			return nil
		}

		if err := m.SoftQuota.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("softQuota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("softQuota")
			}
			return err
		}
	}

	return nil
}

func (m *GoogleCloudBlobstoreAPIModel) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GoogleCloudBlobstoreAPIModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GoogleCloudBlobstoreAPIModel) UnmarshalBinary(b []byte) error {
	var res GoogleCloudBlobstoreAPIModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
