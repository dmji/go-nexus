// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GoogleCloudBlobStoreAPIBucketConfiguration google cloud blob store Api bucket configuration
//
// swagger:model GoogleCloudBlobStoreApiBucketConfiguration
type GoogleCloudBlobStoreAPIBucketConfiguration struct {

	// Details of the GC Storage bucket such as name and region
	// Required: true
	// Read Only: true
	Bucket *GoogleCloudBlobStoreAPIBucket `json:"bucket"`

	// Security details for granting access the GC Storage API
	BucketSecurity *GoogleCloudBlobStoreAPIBucketAuthentication `json:"bucketSecurity,omitempty"`

	// The type of encryption to use
	// Read Only: true
	Encryption *GoogleCloudBlobStoreAPIEncryption `json:"encryption,omitempty"`
}

// Validate validates this google cloud blob store Api bucket configuration
func (m *GoogleCloudBlobStoreAPIBucketConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBucket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBucketSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GoogleCloudBlobStoreAPIBucketConfiguration) validateBucket(formats strfmt.Registry) error {

	if err := validate.Required("bucket", "body", m.Bucket); err != nil {
		return err
	}

	if m.Bucket != nil {
		if err := m.Bucket.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bucket")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bucket")
			}
			return err
		}
	}

	return nil
}

func (m *GoogleCloudBlobStoreAPIBucketConfiguration) validateBucketSecurity(formats strfmt.Registry) error {
	if swag.IsZero(m.BucketSecurity) { // not required
		return nil
	}

	if m.BucketSecurity != nil {
		if err := m.BucketSecurity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bucketSecurity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bucketSecurity")
			}
			return err
		}
	}

	return nil
}

func (m *GoogleCloudBlobStoreAPIBucketConfiguration) validateEncryption(formats strfmt.Registry) error {
	if swag.IsZero(m.Encryption) { // not required
		return nil
	}

	if m.Encryption != nil {
		if err := m.Encryption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryption")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryption")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this google cloud blob store Api bucket configuration based on the context it is used
func (m *GoogleCloudBlobStoreAPIBucketConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBucket(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBucketSecurity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryption(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GoogleCloudBlobStoreAPIBucketConfiguration) contextValidateBucket(ctx context.Context, formats strfmt.Registry) error {

	if m.Bucket != nil {

		if err := m.Bucket.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bucket")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bucket")
			}
			return err
		}
	}

	return nil
}

func (m *GoogleCloudBlobStoreAPIBucketConfiguration) contextValidateBucketSecurity(ctx context.Context, formats strfmt.Registry) error {

	if m.BucketSecurity != nil {

		if swag.IsZero(m.BucketSecurity) { // not required
			return nil
		}

		if err := m.BucketSecurity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bucketSecurity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bucketSecurity")
			}
			return err
		}
	}

	return nil
}

func (m *GoogleCloudBlobStoreAPIBucketConfiguration) contextValidateEncryption(ctx context.Context, formats strfmt.Registry) error {

	if m.Encryption != nil {

		if swag.IsZero(m.Encryption) { // not required
			return nil
		}

		if err := m.Encryption.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryption")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryption")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GoogleCloudBlobStoreAPIBucketConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GoogleCloudBlobStoreAPIBucketConfiguration) UnmarshalBinary(b []byte) error {
	var res GoogleCloudBlobStoreAPIBucketConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
