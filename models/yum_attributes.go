// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// YumAttributes yum attributes
//
// swagger:model YumAttributes
type YumAttributes struct {

	// Validate that all paths are RPMs or yum metadata
	// Example: STRICT
	// Enum: ["PERMISSIVE","STRICT"]
	DeployPolicy string `json:"deployPolicy,omitempty"`

	// Specifies the repository depth where repodata folder(s) are created
	// Example: 5
	// Required: true
	// Maximum: 5
	// Minimum: 0
	RepodataDepth *int32 `json:"repodataDepth"`
}

// Validate validates this yum attributes
func (m *YumAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeployPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepodataDepth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var yumAttributesTypeDeployPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PERMISSIVE","STRICT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		yumAttributesTypeDeployPolicyPropEnum = append(yumAttributesTypeDeployPolicyPropEnum, v)
	}
}

const (

	// YumAttributesDeployPolicyPERMISSIVE captures enum value "PERMISSIVE"
	YumAttributesDeployPolicyPERMISSIVE string = "PERMISSIVE"

	// YumAttributesDeployPolicySTRICT captures enum value "STRICT"
	YumAttributesDeployPolicySTRICT string = "STRICT"
)

// prop value enum
func (m *YumAttributes) validateDeployPolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, yumAttributesTypeDeployPolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *YumAttributes) validateDeployPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.DeployPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeployPolicyEnum("deployPolicy", "body", m.DeployPolicy); err != nil {
		return err
	}

	return nil
}

func (m *YumAttributes) validateRepodataDepth(formats strfmt.Registry) error {

	if err := validate.Required("repodataDepth", "body", m.RepodataDepth); err != nil {
		return err
	}

	if err := validate.MinimumInt("repodataDepth", "body", int64(*m.RepodataDepth), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("repodataDepth", "body", int64(*m.RepodataDepth), 5, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this yum attributes based on context it is used
func (m *YumAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *YumAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *YumAttributes) UnmarshalBinary(b []byte) error {
	var res YumAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
