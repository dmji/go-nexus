// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageAttributes storage attributes
//
// swagger:model StorageAttributes
type StorageAttributes struct {

	// Blob store used to store repository contents
	// Example: default
	// Required: true
	BlobStoreName *string `json:"blobStoreName"`

	// Whether to validate uploaded content's MIME type appropriate for the repository format
	// Example: true
	// Required: true
	StrictContentTypeValidation *bool `json:"strictContentTypeValidation"`
}

// Validate validates this storage attributes
func (m *StorageAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlobStoreName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrictContentTypeValidation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageAttributes) validateBlobStoreName(formats strfmt.Registry) error {

	if err := validate.Required("blobStoreName", "body", m.BlobStoreName); err != nil {
		return err
	}

	return nil
}

func (m *StorageAttributes) validateStrictContentTypeValidation(formats strfmt.Registry) error {

	if err := validate.Required("strictContentTypeValidation", "body", m.StrictContentTypeValidation); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this storage attributes based on context it is used
func (m *StorageAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageAttributes) UnmarshalBinary(b []byte) error {
	var res StorageAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
