// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIUser Api user
//
// swagger:model ApiUser
type APIUser struct {

	// The email address associated with the user.
	EmailAddress string `json:"emailAddress,omitempty"`

	// The roles which the user has been assigned in an external source, e.g. LDAP group. These cannot be changed within the Nexus Repository Manager.
	// Unique: true
	ExternalRoles []string `json:"externalRoles"`

	// The first name of the user.
	FirstName string `json:"firstName,omitempty"`

	// The last name of the user.
	LastName string `json:"lastName,omitempty"`

	// Indicates whether the user's properties could be modified by the Nexus Repository Manager. When false only roles are considered during update.
	ReadOnly bool `json:"readOnly,omitempty"`

	// The roles which the user has been assigned within Nexus.
	// Unique: true
	Roles []string `json:"roles"`

	// The user source which is the origin of this user. This value cannot be changed.
	Source string `json:"source,omitempty"`

	// The user's status, e.g. active or disabled.
	// Required: true
	// Enum: ["active","locked","disabled","changepassword"]
	Status *string `json:"status"`

	// The userid which is required for login. This value cannot be changed.
	UserID string `json:"userId,omitempty"`
}

// Validate validates this Api user
func (m *APIUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExternalRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIUser) validateExternalRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalRoles) { // not required
		return nil
	}

	if err := validate.UniqueItems("externalRoles", "body", m.ExternalRoles); err != nil {
		return err
	}

	return nil
}

func (m *APIUser) validateRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	if err := validate.UniqueItems("roles", "body", m.Roles); err != nil {
		return err
	}

	return nil
}

var apiUserTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","locked","disabled","changepassword"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiUserTypeStatusPropEnum = append(apiUserTypeStatusPropEnum, v)
	}
}

const (

	// APIUserStatusActive captures enum value "active"
	APIUserStatusActive string = "active"

	// APIUserStatusLocked captures enum value "locked"
	APIUserStatusLocked string = "locked"

	// APIUserStatusDisabled captures enum value "disabled"
	APIUserStatusDisabled string = "disabled"

	// APIUserStatusChangepassword captures enum value "changepassword"
	APIUserStatusChangepassword string = "changepassword"
)

// prop value enum
func (m *APIUser) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, apiUserTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *APIUser) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this Api user based on context it is used
func (m *APIUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APIUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIUser) UnmarshalBinary(b []byte) error {
	var res APIUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
