// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// S3BlobStoreAPIEncryption s3 blob store Api encryption
//
// swagger:model S3BlobStoreApiEncryption
type S3BlobStoreAPIEncryption struct {

	// The encryption key.
	EncryptionKey string `json:"encryptionKey,omitempty"`

	// The type of S3 server side encryption to use.
	// Enum: ["s3ManagedEncryption","kmsManagedEncryption"]
	EncryptionType string `json:"encryptionType,omitempty"`
}

// Validate validates this s3 blob store Api encryption
func (m *S3BlobStoreAPIEncryption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEncryptionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var s3BlobStoreApiEncryptionTypeEncryptionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["s3ManagedEncryption","kmsManagedEncryption"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		s3BlobStoreApiEncryptionTypeEncryptionTypePropEnum = append(s3BlobStoreApiEncryptionTypeEncryptionTypePropEnum, v)
	}
}

const (

	// S3BlobStoreAPIEncryptionEncryptionTypeS3ManagedEncryption captures enum value "s3ManagedEncryption"
	S3BlobStoreAPIEncryptionEncryptionTypeS3ManagedEncryption string = "s3ManagedEncryption"

	// S3BlobStoreAPIEncryptionEncryptionTypeKmsManagedEncryption captures enum value "kmsManagedEncryption"
	S3BlobStoreAPIEncryptionEncryptionTypeKmsManagedEncryption string = "kmsManagedEncryption"
)

// prop value enum
func (m *S3BlobStoreAPIEncryption) validateEncryptionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, s3BlobStoreApiEncryptionTypeEncryptionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *S3BlobStoreAPIEncryption) validateEncryptionType(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEncryptionTypeEnum("encryptionType", "body", m.EncryptionType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this s3 blob store Api encryption based on context it is used
func (m *S3BlobStoreAPIEncryption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *S3BlobStoreAPIEncryption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *S3BlobStoreAPIEncryption) UnmarshalBinary(b []byte) error {
	var res S3BlobStoreAPIEncryption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
