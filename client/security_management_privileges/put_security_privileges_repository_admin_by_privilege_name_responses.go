// Code generated by go-swagger; DO NOT EDIT.

package security_management_privileges

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutSecurityPrivilegesRepositoryAdminByPrivilegeNameReader is a Reader for the PutSecurityPrivilegesRepositoryAdminByPrivilegeName structure.
type PutSecurityPrivilegesRepositoryAdminByPrivilegeNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewPutSecurityPrivilegesRepositoryAdminByPrivilegeNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutSecurityPrivilegesRepositoryAdminByPrivilegeNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutSecurityPrivilegesRepositoryAdminByPrivilegeNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/security/privileges/repository-admin/{privilegeName}] PutSecurityPrivilegesRepositoryAdminByPrivilegeName", response, response.Code())
	}
}

// NewPutSecurityPrivilegesRepositoryAdminByPrivilegeNameBadRequest creates a PutSecurityPrivilegesRepositoryAdminByPrivilegeNameBadRequest with default headers values
func NewPutSecurityPrivilegesRepositoryAdminByPrivilegeNameBadRequest() *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameBadRequest {
	return &PutSecurityPrivilegesRepositoryAdminByPrivilegeNameBadRequest{}
}

/*
PutSecurityPrivilegesRepositoryAdminByPrivilegeNameBadRequest describes a response with status code 400, with default header values.

Privilege object not configured properly.
*/
type PutSecurityPrivilegesRepositoryAdminByPrivilegeNameBadRequest struct {
}

// IsSuccess returns true when this put security privileges repository admin by privilege name bad request response has a 2xx status code
func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put security privileges repository admin by privilege name bad request response has a 3xx status code
func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put security privileges repository admin by privilege name bad request response has a 4xx status code
func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put security privileges repository admin by privilege name bad request response has a 5xx status code
func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put security privileges repository admin by privilege name bad request response a status code equal to that given
func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put security privileges repository admin by privilege name bad request response
func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameBadRequest) Code() int {
	return 400
}

func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/security/privileges/repository-admin/{privilegeName}][%d] putSecurityPrivilegesRepositoryAdminByPrivilegeNameBadRequest", 400)
}

func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/security/privileges/repository-admin/{privilegeName}][%d] putSecurityPrivilegesRepositoryAdminByPrivilegeNameBadRequest", 400)
}

func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSecurityPrivilegesRepositoryAdminByPrivilegeNameForbidden creates a PutSecurityPrivilegesRepositoryAdminByPrivilegeNameForbidden with default headers values
func NewPutSecurityPrivilegesRepositoryAdminByPrivilegeNameForbidden() *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameForbidden {
	return &PutSecurityPrivilegesRepositoryAdminByPrivilegeNameForbidden{}
}

/*
PutSecurityPrivilegesRepositoryAdminByPrivilegeNameForbidden describes a response with status code 403, with default header values.

The user does not have permission to perform the operation.
*/
type PutSecurityPrivilegesRepositoryAdminByPrivilegeNameForbidden struct {
}

// IsSuccess returns true when this put security privileges repository admin by privilege name forbidden response has a 2xx status code
func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put security privileges repository admin by privilege name forbidden response has a 3xx status code
func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put security privileges repository admin by privilege name forbidden response has a 4xx status code
func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put security privileges repository admin by privilege name forbidden response has a 5xx status code
func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put security privileges repository admin by privilege name forbidden response a status code equal to that given
func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put security privileges repository admin by privilege name forbidden response
func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameForbidden) Code() int {
	return 403
}

func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/security/privileges/repository-admin/{privilegeName}][%d] putSecurityPrivilegesRepositoryAdminByPrivilegeNameForbidden", 403)
}

func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/security/privileges/repository-admin/{privilegeName}][%d] putSecurityPrivilegesRepositoryAdminByPrivilegeNameForbidden", 403)
}

func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSecurityPrivilegesRepositoryAdminByPrivilegeNameNotFound creates a PutSecurityPrivilegesRepositoryAdminByPrivilegeNameNotFound with default headers values
func NewPutSecurityPrivilegesRepositoryAdminByPrivilegeNameNotFound() *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameNotFound {
	return &PutSecurityPrivilegesRepositoryAdminByPrivilegeNameNotFound{}
}

/*
PutSecurityPrivilegesRepositoryAdminByPrivilegeNameNotFound describes a response with status code 404, with default header values.

Privilege not found in the system.
*/
type PutSecurityPrivilegesRepositoryAdminByPrivilegeNameNotFound struct {
}

// IsSuccess returns true when this put security privileges repository admin by privilege name not found response has a 2xx status code
func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put security privileges repository admin by privilege name not found response has a 3xx status code
func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put security privileges repository admin by privilege name not found response has a 4xx status code
func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put security privileges repository admin by privilege name not found response has a 5xx status code
func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put security privileges repository admin by privilege name not found response a status code equal to that given
func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put security privileges repository admin by privilege name not found response
func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameNotFound) Code() int {
	return 404
}

func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/security/privileges/repository-admin/{privilegeName}][%d] putSecurityPrivilegesRepositoryAdminByPrivilegeNameNotFound", 404)
}

func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/security/privileges/repository-admin/{privilegeName}][%d] putSecurityPrivilegesRepositoryAdminByPrivilegeNameNotFound", 404)
}

func (o *PutSecurityPrivilegesRepositoryAdminByPrivilegeNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
