// Code generated by go-swagger; DO NOT EDIT.

package security_management_privileges

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameReader is a Reader for the PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeName structure.
type PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewPutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/security/privileges/repository-content-selector/{privilegeName}] PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeName", response, response.Code())
	}
}

// NewPutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameBadRequest creates a PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameBadRequest with default headers values
func NewPutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameBadRequest() *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameBadRequest {
	return &PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameBadRequest{}
}

/*
PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameBadRequest describes a response with status code 400, with default header values.

Privilege object not configured properly.
*/
type PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameBadRequest struct {
}

// IsSuccess returns true when this put security privileges repository content selector by privilege name bad request response has a 2xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put security privileges repository content selector by privilege name bad request response has a 3xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put security privileges repository content selector by privilege name bad request response has a 4xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put security privileges repository content selector by privilege name bad request response has a 5xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put security privileges repository content selector by privilege name bad request response a status code equal to that given
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put security privileges repository content selector by privilege name bad request response
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameBadRequest) Code() int {
	return 400
}

func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/security/privileges/repository-content-selector/{privilegeName}][%d] putSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameBadRequest", 400)
}

func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/security/privileges/repository-content-selector/{privilegeName}][%d] putSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameBadRequest", 400)
}

func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameForbidden creates a PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameForbidden with default headers values
func NewPutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameForbidden() *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameForbidden {
	return &PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameForbidden{}
}

/*
PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameForbidden describes a response with status code 403, with default header values.

The user does not have permission to perform the operation.
*/
type PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameForbidden struct {
}

// IsSuccess returns true when this put security privileges repository content selector by privilege name forbidden response has a 2xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put security privileges repository content selector by privilege name forbidden response has a 3xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put security privileges repository content selector by privilege name forbidden response has a 4xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put security privileges repository content selector by privilege name forbidden response has a 5xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put security privileges repository content selector by privilege name forbidden response a status code equal to that given
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put security privileges repository content selector by privilege name forbidden response
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameForbidden) Code() int {
	return 403
}

func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/security/privileges/repository-content-selector/{privilegeName}][%d] putSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameForbidden", 403)
}

func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/security/privileges/repository-content-selector/{privilegeName}][%d] putSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameForbidden", 403)
}

func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameNotFound creates a PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameNotFound with default headers values
func NewPutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameNotFound() *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameNotFound {
	return &PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameNotFound{}
}

/*
PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameNotFound describes a response with status code 404, with default header values.

Privilege not found in the system.
*/
type PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameNotFound struct {
}

// IsSuccess returns true when this put security privileges repository content selector by privilege name not found response has a 2xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put security privileges repository content selector by privilege name not found response has a 3xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put security privileges repository content selector by privilege name not found response has a 4xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put security privileges repository content selector by privilege name not found response has a 5xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put security privileges repository content selector by privilege name not found response a status code equal to that given
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put security privileges repository content selector by privilege name not found response
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameNotFound) Code() int {
	return 404
}

func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/security/privileges/repository-content-selector/{privilegeName}][%d] putSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameNotFound", 404)
}

func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/security/privileges/repository-content-selector/{privilegeName}][%d] putSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameNotFound", 404)
}

func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegeNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
