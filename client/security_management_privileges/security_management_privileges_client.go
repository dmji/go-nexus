// Code generated by go-swagger; DO NOT EDIT.

package security_management_privileges

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new security management privileges API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new security management privileges API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new security management privileges API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for security management privileges API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteSecurityPrivilegesByPrivilegename(params *DeleteSecurityPrivilegesByPrivilegenameParams, opts ...ClientOption) error

	GetSecurityPrivileges(params *GetSecurityPrivilegesParams, opts ...ClientOption) (*GetSecurityPrivilegesOK, error)

	GetSecurityPrivilegesByPrivilegename(params *GetSecurityPrivilegesByPrivilegenameParams, opts ...ClientOption) (*GetSecurityPrivilegesByPrivilegenameOK, error)

	PostSecurityPrivilegesApplication(params *PostSecurityPrivilegesApplicationParams, opts ...ClientOption) error

	PostSecurityPrivilegesRepositoryAdmin(params *PostSecurityPrivilegesRepositoryAdminParams, opts ...ClientOption) error

	PostSecurityPrivilegesRepositoryContentSelector(params *PostSecurityPrivilegesRepositoryContentSelectorParams, opts ...ClientOption) error

	PostSecurityPrivilegesRepositoryView(params *PostSecurityPrivilegesRepositoryViewParams, opts ...ClientOption) error

	PostSecurityPrivilegesScript(params *PostSecurityPrivilegesScriptParams, opts ...ClientOption) error

	PostSecurityPrivilegesWildcard(params *PostSecurityPrivilegesWildcardParams, opts ...ClientOption) error

	PutSecurityPrivilegesApplicationByPrivilegename(params *PutSecurityPrivilegesApplicationByPrivilegenameParams, opts ...ClientOption) error

	PutSecurityPrivilegesRepositoryAdminByPrivilegename(params *PutSecurityPrivilegesRepositoryAdminByPrivilegenameParams, opts ...ClientOption) error

	PutSecurityPrivilegesRepositoryContentSelectorByPrivilegename(params *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameParams, opts ...ClientOption) error

	PutSecurityPrivilegesRepositoryViewByPrivilegename(params *PutSecurityPrivilegesRepositoryViewByPrivilegenameParams, opts ...ClientOption) error

	PutSecurityPrivilegesScriptByPrivilegename(params *PutSecurityPrivilegesScriptByPrivilegenameParams, opts ...ClientOption) error

	PutSecurityPrivilegesWildcardByPrivilegename(params *PutSecurityPrivilegesWildcardByPrivilegenameParams, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteSecurityPrivilegesByPrivilegename deletes a privilege by name
*/
func (a *Client) DeleteSecurityPrivilegesByPrivilegename(params *DeleteSecurityPrivilegesByPrivilegenameParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSecurityPrivilegesByPrivilegenameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSecurityPrivilegesByPrivilegename",
		Method:             "DELETE",
		PathPattern:        "/v1/security/privileges/{privilegeName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSecurityPrivilegesByPrivilegenameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetSecurityPrivileges retrieves a list of privileges
*/
func (a *Client) GetSecurityPrivileges(params *GetSecurityPrivilegesParams, opts ...ClientOption) (*GetSecurityPrivilegesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityPrivilegesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSecurityPrivileges",
		Method:             "GET",
		PathPattern:        "/v1/security/privileges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSecurityPrivilegesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecurityPrivilegesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSecurityPrivileges: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSecurityPrivilegesByPrivilegename retrieves a privilege by name
*/
func (a *Client) GetSecurityPrivilegesByPrivilegename(params *GetSecurityPrivilegesByPrivilegenameParams, opts ...ClientOption) (*GetSecurityPrivilegesByPrivilegenameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityPrivilegesByPrivilegenameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSecurityPrivilegesByPrivilegename",
		Method:             "GET",
		PathPattern:        "/v1/security/privileges/{privilegeName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSecurityPrivilegesByPrivilegenameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecurityPrivilegesByPrivilegenameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSecurityPrivilegesByPrivilegename: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSecurityPrivilegesApplication creates an application type privilege
*/
func (a *Client) PostSecurityPrivilegesApplication(params *PostSecurityPrivilegesApplicationParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSecurityPrivilegesApplicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSecurityPrivilegesApplication",
		Method:             "POST",
		PathPattern:        "/v1/security/privileges/application",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSecurityPrivilegesApplicationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
PostSecurityPrivilegesRepositoryAdmin creates a repository admin type privilege
*/
func (a *Client) PostSecurityPrivilegesRepositoryAdmin(params *PostSecurityPrivilegesRepositoryAdminParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSecurityPrivilegesRepositoryAdminParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSecurityPrivilegesRepositoryAdmin",
		Method:             "POST",
		PathPattern:        "/v1/security/privileges/repository-admin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSecurityPrivilegesRepositoryAdminReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
PostSecurityPrivilegesRepositoryContentSelector creates a repository content selector type privilege
*/
func (a *Client) PostSecurityPrivilegesRepositoryContentSelector(params *PostSecurityPrivilegesRepositoryContentSelectorParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSecurityPrivilegesRepositoryContentSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSecurityPrivilegesRepositoryContentSelector",
		Method:             "POST",
		PathPattern:        "/v1/security/privileges/repository-content-selector",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSecurityPrivilegesRepositoryContentSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
PostSecurityPrivilegesRepositoryView creates a repository view type privilege
*/
func (a *Client) PostSecurityPrivilegesRepositoryView(params *PostSecurityPrivilegesRepositoryViewParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSecurityPrivilegesRepositoryViewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSecurityPrivilegesRepositoryView",
		Method:             "POST",
		PathPattern:        "/v1/security/privileges/repository-view",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSecurityPrivilegesRepositoryViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
PostSecurityPrivilegesScript creates a script type privilege
*/
func (a *Client) PostSecurityPrivilegesScript(params *PostSecurityPrivilegesScriptParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSecurityPrivilegesScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSecurityPrivilegesScript",
		Method:             "POST",
		PathPattern:        "/v1/security/privileges/script",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSecurityPrivilegesScriptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
PostSecurityPrivilegesWildcard creates a wildcard type privilege
*/
func (a *Client) PostSecurityPrivilegesWildcard(params *PostSecurityPrivilegesWildcardParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSecurityPrivilegesWildcardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSecurityPrivilegesWildcard",
		Method:             "POST",
		PathPattern:        "/v1/security/privileges/wildcard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSecurityPrivilegesWildcardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
PutSecurityPrivilegesApplicationByPrivilegename updates an application type privilege
*/
func (a *Client) PutSecurityPrivilegesApplicationByPrivilegename(params *PutSecurityPrivilegesApplicationByPrivilegenameParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSecurityPrivilegesApplicationByPrivilegenameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutSecurityPrivilegesApplicationByPrivilegename",
		Method:             "PUT",
		PathPattern:        "/v1/security/privileges/application/{privilegeName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSecurityPrivilegesApplicationByPrivilegenameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
PutSecurityPrivilegesRepositoryAdminByPrivilegename updates a repository admin type privilege
*/
func (a *Client) PutSecurityPrivilegesRepositoryAdminByPrivilegename(params *PutSecurityPrivilegesRepositoryAdminByPrivilegenameParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSecurityPrivilegesRepositoryAdminByPrivilegenameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutSecurityPrivilegesRepositoryAdminByPrivilegename",
		Method:             "PUT",
		PathPattern:        "/v1/security/privileges/repository-admin/{privilegeName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSecurityPrivilegesRepositoryAdminByPrivilegenameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
PutSecurityPrivilegesRepositoryContentSelectorByPrivilegename updates a repository content selector type privilege
*/
func (a *Client) PutSecurityPrivilegesRepositoryContentSelectorByPrivilegename(params *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutSecurityPrivilegesRepositoryContentSelectorByPrivilegename",
		Method:             "PUT",
		PathPattern:        "/v1/security/privileges/repository-content-selector/{privilegeName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
PutSecurityPrivilegesRepositoryViewByPrivilegename updates a repository view type privilege
*/
func (a *Client) PutSecurityPrivilegesRepositoryViewByPrivilegename(params *PutSecurityPrivilegesRepositoryViewByPrivilegenameParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSecurityPrivilegesRepositoryViewByPrivilegenameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutSecurityPrivilegesRepositoryViewByPrivilegename",
		Method:             "PUT",
		PathPattern:        "/v1/security/privileges/repository-view/{privilegeName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSecurityPrivilegesRepositoryViewByPrivilegenameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
PutSecurityPrivilegesScriptByPrivilegename updates a script type privilege
*/
func (a *Client) PutSecurityPrivilegesScriptByPrivilegename(params *PutSecurityPrivilegesScriptByPrivilegenameParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSecurityPrivilegesScriptByPrivilegenameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutSecurityPrivilegesScriptByPrivilegename",
		Method:             "PUT",
		PathPattern:        "/v1/security/privileges/script/{privilegeName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSecurityPrivilegesScriptByPrivilegenameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
PutSecurityPrivilegesWildcardByPrivilegename updates a wildcard type privilege
*/
func (a *Client) PutSecurityPrivilegesWildcardByPrivilegename(params *PutSecurityPrivilegesWildcardByPrivilegenameParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSecurityPrivilegesWildcardByPrivilegenameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutSecurityPrivilegesWildcardByPrivilegename",
		Method:             "PUT",
		PathPattern:        "/v1/security/privileges/wildcard/{privilegeName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSecurityPrivilegesWildcardByPrivilegenameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
