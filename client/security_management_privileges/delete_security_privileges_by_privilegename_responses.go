// Code generated by go-swagger; DO NOT EDIT.

package security_management_privileges

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteSecurityPrivilegesByPrivilegenameReader is a Reader for the DeleteSecurityPrivilegesByPrivilegename structure.
type DeleteSecurityPrivilegesByPrivilegenameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSecurityPrivilegesByPrivilegenameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewDeleteSecurityPrivilegesByPrivilegenameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteSecurityPrivilegesByPrivilegenameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteSecurityPrivilegesByPrivilegenameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/security/privileges/{privilegeName}] DeleteSecurityPrivilegesByPrivilegename", response, response.Code())
	}
}

// NewDeleteSecurityPrivilegesByPrivilegenameBadRequest creates a DeleteSecurityPrivilegesByPrivilegenameBadRequest with default headers values
func NewDeleteSecurityPrivilegesByPrivilegenameBadRequest() *DeleteSecurityPrivilegesByPrivilegenameBadRequest {
	return &DeleteSecurityPrivilegesByPrivilegenameBadRequest{}
}

/*
DeleteSecurityPrivilegesByPrivilegenameBadRequest describes a response with status code 400, with default header values.

The privilege is internal and may not be altered.
*/
type DeleteSecurityPrivilegesByPrivilegenameBadRequest struct {
}

// IsSuccess returns true when this delete security privileges by privilegename bad request response has a 2xx status code
func (o *DeleteSecurityPrivilegesByPrivilegenameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete security privileges by privilegename bad request response has a 3xx status code
func (o *DeleteSecurityPrivilegesByPrivilegenameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete security privileges by privilegename bad request response has a 4xx status code
func (o *DeleteSecurityPrivilegesByPrivilegenameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete security privileges by privilegename bad request response has a 5xx status code
func (o *DeleteSecurityPrivilegesByPrivilegenameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete security privileges by privilegename bad request response a status code equal to that given
func (o *DeleteSecurityPrivilegesByPrivilegenameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete security privileges by privilegename bad request response
func (o *DeleteSecurityPrivilegesByPrivilegenameBadRequest) Code() int {
	return 400
}

func (o *DeleteSecurityPrivilegesByPrivilegenameBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/security/privileges/{privilegeName}][%d] deleteSecurityPrivilegesByPrivilegenameBadRequest", 400)
}

func (o *DeleteSecurityPrivilegesByPrivilegenameBadRequest) String() string {
	return fmt.Sprintf("[DELETE /v1/security/privileges/{privilegeName}][%d] deleteSecurityPrivilegesByPrivilegenameBadRequest", 400)
}

func (o *DeleteSecurityPrivilegesByPrivilegenameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSecurityPrivilegesByPrivilegenameForbidden creates a DeleteSecurityPrivilegesByPrivilegenameForbidden with default headers values
func NewDeleteSecurityPrivilegesByPrivilegenameForbidden() *DeleteSecurityPrivilegesByPrivilegenameForbidden {
	return &DeleteSecurityPrivilegesByPrivilegenameForbidden{}
}

/*
DeleteSecurityPrivilegesByPrivilegenameForbidden describes a response with status code 403, with default header values.

The user does not have permission to perform the operation.
*/
type DeleteSecurityPrivilegesByPrivilegenameForbidden struct {
}

// IsSuccess returns true when this delete security privileges by privilegename forbidden response has a 2xx status code
func (o *DeleteSecurityPrivilegesByPrivilegenameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete security privileges by privilegename forbidden response has a 3xx status code
func (o *DeleteSecurityPrivilegesByPrivilegenameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete security privileges by privilegename forbidden response has a 4xx status code
func (o *DeleteSecurityPrivilegesByPrivilegenameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete security privileges by privilegename forbidden response has a 5xx status code
func (o *DeleteSecurityPrivilegesByPrivilegenameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete security privileges by privilegename forbidden response a status code equal to that given
func (o *DeleteSecurityPrivilegesByPrivilegenameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete security privileges by privilegename forbidden response
func (o *DeleteSecurityPrivilegesByPrivilegenameForbidden) Code() int {
	return 403
}

func (o *DeleteSecurityPrivilegesByPrivilegenameForbidden) Error() string {
	return fmt.Sprintf("[DELETE /v1/security/privileges/{privilegeName}][%d] deleteSecurityPrivilegesByPrivilegenameForbidden", 403)
}

func (o *DeleteSecurityPrivilegesByPrivilegenameForbidden) String() string {
	return fmt.Sprintf("[DELETE /v1/security/privileges/{privilegeName}][%d] deleteSecurityPrivilegesByPrivilegenameForbidden", 403)
}

func (o *DeleteSecurityPrivilegesByPrivilegenameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSecurityPrivilegesByPrivilegenameNotFound creates a DeleteSecurityPrivilegesByPrivilegenameNotFound with default headers values
func NewDeleteSecurityPrivilegesByPrivilegenameNotFound() *DeleteSecurityPrivilegesByPrivilegenameNotFound {
	return &DeleteSecurityPrivilegesByPrivilegenameNotFound{}
}

/*
DeleteSecurityPrivilegesByPrivilegenameNotFound describes a response with status code 404, with default header values.

Privilege not found in the system.
*/
type DeleteSecurityPrivilegesByPrivilegenameNotFound struct {
}

// IsSuccess returns true when this delete security privileges by privilegename not found response has a 2xx status code
func (o *DeleteSecurityPrivilegesByPrivilegenameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete security privileges by privilegename not found response has a 3xx status code
func (o *DeleteSecurityPrivilegesByPrivilegenameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete security privileges by privilegename not found response has a 4xx status code
func (o *DeleteSecurityPrivilegesByPrivilegenameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete security privileges by privilegename not found response has a 5xx status code
func (o *DeleteSecurityPrivilegesByPrivilegenameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete security privileges by privilegename not found response a status code equal to that given
func (o *DeleteSecurityPrivilegesByPrivilegenameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete security privileges by privilegename not found response
func (o *DeleteSecurityPrivilegesByPrivilegenameNotFound) Code() int {
	return 404
}

func (o *DeleteSecurityPrivilegesByPrivilegenameNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/security/privileges/{privilegeName}][%d] deleteSecurityPrivilegesByPrivilegenameNotFound", 404)
}

func (o *DeleteSecurityPrivilegesByPrivilegenameNotFound) String() string {
	return fmt.Sprintf("[DELETE /v1/security/privileges/{privilegeName}][%d] deleteSecurityPrivilegesByPrivilegenameNotFound", 404)
}

func (o *DeleteSecurityPrivilegesByPrivilegenameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
