// Code generated by go-swagger; DO NOT EDIT.

package security_management_privileges

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameReader is a Reader for the PutSecurityPrivilegesRepositoryContentSelectorByPrivilegename structure.
type PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewPutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/security/privileges/repository-content-selector/{privilegeName}] PutSecurityPrivilegesRepositoryContentSelectorByPrivilegename", response, response.Code())
	}
}

// NewPutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameBadRequest creates a PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameBadRequest with default headers values
func NewPutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameBadRequest() *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameBadRequest {
	return &PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameBadRequest{}
}

/*
PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameBadRequest describes a response with status code 400, with default header values.

Privilege object not configured properly.
*/
type PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameBadRequest struct {
}

// IsSuccess returns true when this put security privileges repository content selector by privilegename bad request response has a 2xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put security privileges repository content selector by privilegename bad request response has a 3xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put security privileges repository content selector by privilegename bad request response has a 4xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put security privileges repository content selector by privilegename bad request response has a 5xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put security privileges repository content selector by privilegename bad request response a status code equal to that given
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put security privileges repository content selector by privilegename bad request response
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameBadRequest) Code() int {
	return 400
}

func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/security/privileges/repository-content-selector/{privilegeName}][%d] putSecurityPrivilegesRepositoryContentSelectorByPrivilegenameBadRequest", 400)
}

func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/security/privileges/repository-content-selector/{privilegeName}][%d] putSecurityPrivilegesRepositoryContentSelectorByPrivilegenameBadRequest", 400)
}

func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameForbidden creates a PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameForbidden with default headers values
func NewPutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameForbidden() *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameForbidden {
	return &PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameForbidden{}
}

/*
PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameForbidden describes a response with status code 403, with default header values.

The user does not have permission to perform the operation.
*/
type PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameForbidden struct {
}

// IsSuccess returns true when this put security privileges repository content selector by privilegename forbidden response has a 2xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put security privileges repository content selector by privilegename forbidden response has a 3xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put security privileges repository content selector by privilegename forbidden response has a 4xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put security privileges repository content selector by privilegename forbidden response has a 5xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put security privileges repository content selector by privilegename forbidden response a status code equal to that given
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put security privileges repository content selector by privilegename forbidden response
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameForbidden) Code() int {
	return 403
}

func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/security/privileges/repository-content-selector/{privilegeName}][%d] putSecurityPrivilegesRepositoryContentSelectorByPrivilegenameForbidden", 403)
}

func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/security/privileges/repository-content-selector/{privilegeName}][%d] putSecurityPrivilegesRepositoryContentSelectorByPrivilegenameForbidden", 403)
}

func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameNotFound creates a PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameNotFound with default headers values
func NewPutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameNotFound() *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameNotFound {
	return &PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameNotFound{}
}

/*
PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameNotFound describes a response with status code 404, with default header values.

Privilege not found in the system.
*/
type PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameNotFound struct {
}

// IsSuccess returns true when this put security privileges repository content selector by privilegename not found response has a 2xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put security privileges repository content selector by privilegename not found response has a 3xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put security privileges repository content selector by privilegename not found response has a 4xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put security privileges repository content selector by privilegename not found response has a 5xx status code
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put security privileges repository content selector by privilegename not found response a status code equal to that given
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put security privileges repository content selector by privilegename not found response
func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameNotFound) Code() int {
	return 404
}

func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/security/privileges/repository-content-selector/{privilegeName}][%d] putSecurityPrivilegesRepositoryContentSelectorByPrivilegenameNotFound", 404)
}

func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/security/privileges/repository-content-selector/{privilegeName}][%d] putSecurityPrivilegesRepositoryContentSelectorByPrivilegenameNotFound", 404)
}

func (o *PutSecurityPrivilegesRepositoryContentSelectorByPrivilegenameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
