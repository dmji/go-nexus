// Code generated by go-swagger; DO NOT EDIT.

package security_management_l_d_a_p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteSecurityLdapByNameReader is a Reader for the DeleteSecurityLdapByName structure.
type DeleteSecurityLdapByNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSecurityLdapByNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteSecurityLdapByNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteSecurityLdapByNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteSecurityLdapByNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteSecurityLdapByNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/security/ldap/{name}] DeleteSecurityLdapByName", response, response.Code())
	}
}

// NewDeleteSecurityLdapByNameNoContent creates a DeleteSecurityLdapByNameNoContent with default headers values
func NewDeleteSecurityLdapByNameNoContent() *DeleteSecurityLdapByNameNoContent {
	return &DeleteSecurityLdapByNameNoContent{}
}

/*
DeleteSecurityLdapByNameNoContent describes a response with status code 204, with default header values.

LDAP server deleted
*/
type DeleteSecurityLdapByNameNoContent struct {
}

// IsSuccess returns true when this delete security ldap by name no content response has a 2xx status code
func (o *DeleteSecurityLdapByNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete security ldap by name no content response has a 3xx status code
func (o *DeleteSecurityLdapByNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete security ldap by name no content response has a 4xx status code
func (o *DeleteSecurityLdapByNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete security ldap by name no content response has a 5xx status code
func (o *DeleteSecurityLdapByNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete security ldap by name no content response a status code equal to that given
func (o *DeleteSecurityLdapByNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete security ldap by name no content response
func (o *DeleteSecurityLdapByNameNoContent) Code() int {
	return 204
}

func (o *DeleteSecurityLdapByNameNoContent) Error() string {
	return fmt.Sprintf("[DELETE /v1/security/ldap/{name}][%d] deleteSecurityLdapByNameNoContent", 204)
}

func (o *DeleteSecurityLdapByNameNoContent) String() string {
	return fmt.Sprintf("[DELETE /v1/security/ldap/{name}][%d] deleteSecurityLdapByNameNoContent", 204)
}

func (o *DeleteSecurityLdapByNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSecurityLdapByNameUnauthorized creates a DeleteSecurityLdapByNameUnauthorized with default headers values
func NewDeleteSecurityLdapByNameUnauthorized() *DeleteSecurityLdapByNameUnauthorized {
	return &DeleteSecurityLdapByNameUnauthorized{}
}

/*
DeleteSecurityLdapByNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type DeleteSecurityLdapByNameUnauthorized struct {
}

// IsSuccess returns true when this delete security ldap by name unauthorized response has a 2xx status code
func (o *DeleteSecurityLdapByNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete security ldap by name unauthorized response has a 3xx status code
func (o *DeleteSecurityLdapByNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete security ldap by name unauthorized response has a 4xx status code
func (o *DeleteSecurityLdapByNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete security ldap by name unauthorized response has a 5xx status code
func (o *DeleteSecurityLdapByNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete security ldap by name unauthorized response a status code equal to that given
func (o *DeleteSecurityLdapByNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete security ldap by name unauthorized response
func (o *DeleteSecurityLdapByNameUnauthorized) Code() int {
	return 401
}

func (o *DeleteSecurityLdapByNameUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /v1/security/ldap/{name}][%d] deleteSecurityLdapByNameUnauthorized", 401)
}

func (o *DeleteSecurityLdapByNameUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /v1/security/ldap/{name}][%d] deleteSecurityLdapByNameUnauthorized", 401)
}

func (o *DeleteSecurityLdapByNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSecurityLdapByNameForbidden creates a DeleteSecurityLdapByNameForbidden with default headers values
func NewDeleteSecurityLdapByNameForbidden() *DeleteSecurityLdapByNameForbidden {
	return &DeleteSecurityLdapByNameForbidden{}
}

/*
DeleteSecurityLdapByNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type DeleteSecurityLdapByNameForbidden struct {
}

// IsSuccess returns true when this delete security ldap by name forbidden response has a 2xx status code
func (o *DeleteSecurityLdapByNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete security ldap by name forbidden response has a 3xx status code
func (o *DeleteSecurityLdapByNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete security ldap by name forbidden response has a 4xx status code
func (o *DeleteSecurityLdapByNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete security ldap by name forbidden response has a 5xx status code
func (o *DeleteSecurityLdapByNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete security ldap by name forbidden response a status code equal to that given
func (o *DeleteSecurityLdapByNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete security ldap by name forbidden response
func (o *DeleteSecurityLdapByNameForbidden) Code() int {
	return 403
}

func (o *DeleteSecurityLdapByNameForbidden) Error() string {
	return fmt.Sprintf("[DELETE /v1/security/ldap/{name}][%d] deleteSecurityLdapByNameForbidden", 403)
}

func (o *DeleteSecurityLdapByNameForbidden) String() string {
	return fmt.Sprintf("[DELETE /v1/security/ldap/{name}][%d] deleteSecurityLdapByNameForbidden", 403)
}

func (o *DeleteSecurityLdapByNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSecurityLdapByNameNotFound creates a DeleteSecurityLdapByNameNotFound with default headers values
func NewDeleteSecurityLdapByNameNotFound() *DeleteSecurityLdapByNameNotFound {
	return &DeleteSecurityLdapByNameNotFound{}
}

/*
DeleteSecurityLdapByNameNotFound describes a response with status code 404, with default header values.

LDAP server not found
*/
type DeleteSecurityLdapByNameNotFound struct {
}

// IsSuccess returns true when this delete security ldap by name not found response has a 2xx status code
func (o *DeleteSecurityLdapByNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete security ldap by name not found response has a 3xx status code
func (o *DeleteSecurityLdapByNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete security ldap by name not found response has a 4xx status code
func (o *DeleteSecurityLdapByNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete security ldap by name not found response has a 5xx status code
func (o *DeleteSecurityLdapByNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete security ldap by name not found response a status code equal to that given
func (o *DeleteSecurityLdapByNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete security ldap by name not found response
func (o *DeleteSecurityLdapByNameNotFound) Code() int {
	return 404
}

func (o *DeleteSecurityLdapByNameNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/security/ldap/{name}][%d] deleteSecurityLdapByNameNotFound", 404)
}

func (o *DeleteSecurityLdapByNameNotFound) String() string {
	return fmt.Sprintf("[DELETE /v1/security/ldap/{name}][%d] deleteSecurityLdapByNameNotFound", 404)
}

func (o *DeleteSecurityLdapByNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
