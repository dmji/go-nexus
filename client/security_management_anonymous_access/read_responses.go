// Code generated by go-swagger; DO NOT EDIT.

package security_management_anonymous_access

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dmji/go-nexus/models"
)

// ReadReader is a Reader for the Read structure.
type ReadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewReadForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/security/anonymous] read", response, response.Code())
	}
}

// NewReadOK creates a ReadOK with default headers values
func NewReadOK() *ReadOK {
	return &ReadOK{}
}

/*
ReadOK describes a response with status code 200, with default header values.

successful operation
*/
type ReadOK struct {
	Payload *models.AnonymousAccessSettingsXO
}

// IsSuccess returns true when this read o k response has a 2xx status code
func (o *ReadOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this read o k response has a 3xx status code
func (o *ReadOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read o k response has a 4xx status code
func (o *ReadOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this read o k response has a 5xx status code
func (o *ReadOK) IsServerError() bool {
	return false
}

// IsCode returns true when this read o k response a status code equal to that given
func (o *ReadOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the read o k response
func (o *ReadOK) Code() int {
	return 200
}

func (o *ReadOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/security/anonymous][%d] readOK %s", 200, payload)
}

func (o *ReadOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/security/anonymous][%d] readOK %s", 200, payload)
}

func (o *ReadOK) GetPayload() *models.AnonymousAccessSettingsXO {
	return o.Payload
}

func (o *ReadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AnonymousAccessSettingsXO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadForbidden creates a ReadForbidden with default headers values
func NewReadForbidden() *ReadForbidden {
	return &ReadForbidden{}
}

/*
ReadForbidden describes a response with status code 403, with default header values.

Insufficient permissions to update settings
*/
type ReadForbidden struct {
}

// IsSuccess returns true when this read forbidden response has a 2xx status code
func (o *ReadForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read forbidden response has a 3xx status code
func (o *ReadForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read forbidden response has a 4xx status code
func (o *ReadForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this read forbidden response has a 5xx status code
func (o *ReadForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this read forbidden response a status code equal to that given
func (o *ReadForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the read forbidden response
func (o *ReadForbidden) Code() int {
	return 403
}

func (o *ReadForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/security/anonymous][%d] readForbidden", 403)
}

func (o *ReadForbidden) String() string {
	return fmt.Sprintf("[GET /v1/security/anonymous][%d] readForbidden", 403)
}

func (o *ReadForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
