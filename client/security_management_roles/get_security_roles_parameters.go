// Code generated by go-swagger; DO NOT EDIT.

package security_management_roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetSecurityRolesParams creates a new GetSecurityRolesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSecurityRolesParams() *GetSecurityRolesParams {
	return &GetSecurityRolesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSecurityRolesParamsWithTimeout creates a new GetSecurityRolesParams object
// with the ability to set a timeout on a request.
func NewGetSecurityRolesParamsWithTimeout(timeout time.Duration) *GetSecurityRolesParams {
	return &GetSecurityRolesParams{
		timeout: timeout,
	}
}

// NewGetSecurityRolesParamsWithContext creates a new GetSecurityRolesParams object
// with the ability to set a context for a request.
func NewGetSecurityRolesParamsWithContext(ctx context.Context) *GetSecurityRolesParams {
	return &GetSecurityRolesParams{
		Context: ctx,
	}
}

// NewGetSecurityRolesParamsWithHTTPClient creates a new GetSecurityRolesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSecurityRolesParamsWithHTTPClient(client *http.Client) *GetSecurityRolesParams {
	return &GetSecurityRolesParams{
		HTTPClient: client,
	}
}

/*
GetSecurityRolesParams contains all the parameters to send to the API endpoint

	for the get security roles operation.

	Typically these are written to a http.Request.
*/
type GetSecurityRolesParams struct {

	/* Source.

	   The id of the user source to filter the roles by, if supplied. Otherwise roles from all user sources will be returned.
	*/
	Source *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get security roles params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSecurityRolesParams) WithDefaults() *GetSecurityRolesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get security roles params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSecurityRolesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get security roles params
func (o *GetSecurityRolesParams) WithTimeout(timeout time.Duration) *GetSecurityRolesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get security roles params
func (o *GetSecurityRolesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get security roles params
func (o *GetSecurityRolesParams) WithContext(ctx context.Context) *GetSecurityRolesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get security roles params
func (o *GetSecurityRolesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get security roles params
func (o *GetSecurityRolesParams) WithHTTPClient(client *http.Client) *GetSecurityRolesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get security roles params
func (o *GetSecurityRolesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSource adds the source to the get security roles params
func (o *GetSecurityRolesParams) WithSource(source *string) *GetSecurityRolesParams {
	o.SetSource(source)
	return o
}

// SetSource adds the source to the get security roles params
func (o *GetSecurityRolesParams) SetSource(source *string) {
	o.Source = source
}

// WriteToRequest writes these params to a swagger request
func (o *GetSecurityRolesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Source != nil {

		// query param source
		var qrSource string

		if o.Source != nil {
			qrSource = *o.Source
		}
		qSource := qrSource
		if qSource != "" {

			if err := r.SetQueryParam("source", qSource); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
