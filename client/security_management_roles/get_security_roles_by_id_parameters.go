// Code generated by go-swagger; DO NOT EDIT.

package security_management_roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetSecurityRolesByIDParams creates a new GetSecurityRolesByIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSecurityRolesByIDParams() *GetSecurityRolesByIDParams {
	return &GetSecurityRolesByIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSecurityRolesByIDParamsWithTimeout creates a new GetSecurityRolesByIDParams object
// with the ability to set a timeout on a request.
func NewGetSecurityRolesByIDParamsWithTimeout(timeout time.Duration) *GetSecurityRolesByIDParams {
	return &GetSecurityRolesByIDParams{
		timeout: timeout,
	}
}

// NewGetSecurityRolesByIDParamsWithContext creates a new GetSecurityRolesByIDParams object
// with the ability to set a context for a request.
func NewGetSecurityRolesByIDParamsWithContext(ctx context.Context) *GetSecurityRolesByIDParams {
	return &GetSecurityRolesByIDParams{
		Context: ctx,
	}
}

// NewGetSecurityRolesByIDParamsWithHTTPClient creates a new GetSecurityRolesByIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSecurityRolesByIDParamsWithHTTPClient(client *http.Client) *GetSecurityRolesByIDParams {
	return &GetSecurityRolesByIDParams{
		HTTPClient: client,
	}
}

/*
GetSecurityRolesByIDParams contains all the parameters to send to the API endpoint

	for the get security roles by Id operation.

	Typically these are written to a http.Request.
*/
type GetSecurityRolesByIDParams struct {

	/* ID.

	   The id of the role to get
	*/
	ID string

	/* Source.

	   The id of the user source to filter the roles by. Available sources can be fetched using the 'User Sources' endpoint.

	   Default: "default"
	*/
	Source *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get security roles by Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSecurityRolesByIDParams) WithDefaults() *GetSecurityRolesByIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get security roles by Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSecurityRolesByIDParams) SetDefaults() {
	var (
		sourceDefault = string("default")
	)

	val := GetSecurityRolesByIDParams{
		Source: &sourceDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get security roles by Id params
func (o *GetSecurityRolesByIDParams) WithTimeout(timeout time.Duration) *GetSecurityRolesByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get security roles by Id params
func (o *GetSecurityRolesByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get security roles by Id params
func (o *GetSecurityRolesByIDParams) WithContext(ctx context.Context) *GetSecurityRolesByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get security roles by Id params
func (o *GetSecurityRolesByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get security roles by Id params
func (o *GetSecurityRolesByIDParams) WithHTTPClient(client *http.Client) *GetSecurityRolesByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get security roles by Id params
func (o *GetSecurityRolesByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get security roles by Id params
func (o *GetSecurityRolesByIDParams) WithID(id string) *GetSecurityRolesByIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get security roles by Id params
func (o *GetSecurityRolesByIDParams) SetID(id string) {
	o.ID = id
}

// WithSource adds the source to the get security roles by Id params
func (o *GetSecurityRolesByIDParams) WithSource(source *string) *GetSecurityRolesByIDParams {
	o.SetSource(source)
	return o
}

// SetSource adds the source to the get security roles by Id params
func (o *GetSecurityRolesByIDParams) SetSource(source *string) {
	o.Source = source
}

// WriteToRequest writes these params to a swagger request
func (o *GetSecurityRolesByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Source != nil {

		// query param source
		var qrSource string

		if o.Source != nil {
			qrSource = *o.Source
		}
		qSource := qrSource
		if qSource != "" {

			if err := r.SetQueryParam("source", qSource); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
