// Code generated by go-swagger; DO NOT EDIT.

package blob_store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dmji/go-nexus/models"
)

// GetBlobstoresS3ByNameReader is a Reader for the GetBlobstoresS3ByName structure.
type GetBlobstoresS3ByNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBlobstoresS3ByNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBlobstoresS3ByNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetBlobstoresS3ByNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetBlobstoresS3ByNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetBlobstoresS3ByNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/blobstores/s3/{name}] GetBlobstoresS3ByName", response, response.Code())
	}
}

// NewGetBlobstoresS3ByNameOK creates a GetBlobstoresS3ByNameOK with default headers values
func NewGetBlobstoresS3ByNameOK() *GetBlobstoresS3ByNameOK {
	return &GetBlobstoresS3ByNameOK{}
}

/*
GetBlobstoresS3ByNameOK describes a response with status code 200, with default header values.

Success
*/
type GetBlobstoresS3ByNameOK struct {
	Payload *models.S3BlobStoreAPIModel
}

// IsSuccess returns true when this get blobstores s3 by name o k response has a 2xx status code
func (o *GetBlobstoresS3ByNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get blobstores s3 by name o k response has a 3xx status code
func (o *GetBlobstoresS3ByNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get blobstores s3 by name o k response has a 4xx status code
func (o *GetBlobstoresS3ByNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get blobstores s3 by name o k response has a 5xx status code
func (o *GetBlobstoresS3ByNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get blobstores s3 by name o k response a status code equal to that given
func (o *GetBlobstoresS3ByNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get blobstores s3 by name o k response
func (o *GetBlobstoresS3ByNameOK) Code() int {
	return 200
}

func (o *GetBlobstoresS3ByNameOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/blobstores/s3/{name}][%d] getBlobstoresS3ByNameOK %s", 200, payload)
}

func (o *GetBlobstoresS3ByNameOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/blobstores/s3/{name}][%d] getBlobstoresS3ByNameOK %s", 200, payload)
}

func (o *GetBlobstoresS3ByNameOK) GetPayload() *models.S3BlobStoreAPIModel {
	return o.Payload
}

func (o *GetBlobstoresS3ByNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.S3BlobStoreAPIModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBlobstoresS3ByNameUnauthorized creates a GetBlobstoresS3ByNameUnauthorized with default headers values
func NewGetBlobstoresS3ByNameUnauthorized() *GetBlobstoresS3ByNameUnauthorized {
	return &GetBlobstoresS3ByNameUnauthorized{}
}

/*
GetBlobstoresS3ByNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type GetBlobstoresS3ByNameUnauthorized struct {
}

// IsSuccess returns true when this get blobstores s3 by name unauthorized response has a 2xx status code
func (o *GetBlobstoresS3ByNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get blobstores s3 by name unauthorized response has a 3xx status code
func (o *GetBlobstoresS3ByNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get blobstores s3 by name unauthorized response has a 4xx status code
func (o *GetBlobstoresS3ByNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get blobstores s3 by name unauthorized response has a 5xx status code
func (o *GetBlobstoresS3ByNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get blobstores s3 by name unauthorized response a status code equal to that given
func (o *GetBlobstoresS3ByNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get blobstores s3 by name unauthorized response
func (o *GetBlobstoresS3ByNameUnauthorized) Code() int {
	return 401
}

func (o *GetBlobstoresS3ByNameUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/blobstores/s3/{name}][%d] getBlobstoresS3ByNameUnauthorized", 401)
}

func (o *GetBlobstoresS3ByNameUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/blobstores/s3/{name}][%d] getBlobstoresS3ByNameUnauthorized", 401)
}

func (o *GetBlobstoresS3ByNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBlobstoresS3ByNameForbidden creates a GetBlobstoresS3ByNameForbidden with default headers values
func NewGetBlobstoresS3ByNameForbidden() *GetBlobstoresS3ByNameForbidden {
	return &GetBlobstoresS3ByNameForbidden{}
}

/*
GetBlobstoresS3ByNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type GetBlobstoresS3ByNameForbidden struct {
}

// IsSuccess returns true when this get blobstores s3 by name forbidden response has a 2xx status code
func (o *GetBlobstoresS3ByNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get blobstores s3 by name forbidden response has a 3xx status code
func (o *GetBlobstoresS3ByNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get blobstores s3 by name forbidden response has a 4xx status code
func (o *GetBlobstoresS3ByNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get blobstores s3 by name forbidden response has a 5xx status code
func (o *GetBlobstoresS3ByNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get blobstores s3 by name forbidden response a status code equal to that given
func (o *GetBlobstoresS3ByNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get blobstores s3 by name forbidden response
func (o *GetBlobstoresS3ByNameForbidden) Code() int {
	return 403
}

func (o *GetBlobstoresS3ByNameForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/blobstores/s3/{name}][%d] getBlobstoresS3ByNameForbidden", 403)
}

func (o *GetBlobstoresS3ByNameForbidden) String() string {
	return fmt.Sprintf("[GET /v1/blobstores/s3/{name}][%d] getBlobstoresS3ByNameForbidden", 403)
}

func (o *GetBlobstoresS3ByNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBlobstoresS3ByNameNotFound creates a GetBlobstoresS3ByNameNotFound with default headers values
func NewGetBlobstoresS3ByNameNotFound() *GetBlobstoresS3ByNameNotFound {
	return &GetBlobstoresS3ByNameNotFound{}
}

/*
GetBlobstoresS3ByNameNotFound describes a response with status code 404, with default header values.

Specified S3 blob store doesn't exist
*/
type GetBlobstoresS3ByNameNotFound struct {
}

// IsSuccess returns true when this get blobstores s3 by name not found response has a 2xx status code
func (o *GetBlobstoresS3ByNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get blobstores s3 by name not found response has a 3xx status code
func (o *GetBlobstoresS3ByNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get blobstores s3 by name not found response has a 4xx status code
func (o *GetBlobstoresS3ByNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get blobstores s3 by name not found response has a 5xx status code
func (o *GetBlobstoresS3ByNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get blobstores s3 by name not found response a status code equal to that given
func (o *GetBlobstoresS3ByNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get blobstores s3 by name not found response
func (o *GetBlobstoresS3ByNameNotFound) Code() int {
	return 404
}

func (o *GetBlobstoresS3ByNameNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/blobstores/s3/{name}][%d] getBlobstoresS3ByNameNotFound", 404)
}

func (o *GetBlobstoresS3ByNameNotFound) String() string {
	return fmt.Sprintf("[GET /v1/blobstores/s3/{name}][%d] getBlobstoresS3ByNameNotFound", 404)
}

func (o *GetBlobstoresS3ByNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
