// Code generated by go-swagger; DO NOT EDIT.

package blob_store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutBlobstoresS3ByNameReader is a Reader for the PutBlobstoresS3ByName structure.
type PutBlobstoresS3ByNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutBlobstoresS3ByNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutBlobstoresS3ByNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutBlobstoresS3ByNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutBlobstoresS3ByNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutBlobstoresS3ByNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/blobstores/s3/{name}] PutBlobstoresS3ByName", response, response.Code())
	}
}

// NewPutBlobstoresS3ByNameNoContent creates a PutBlobstoresS3ByNameNoContent with default headers values
func NewPutBlobstoresS3ByNameNoContent() *PutBlobstoresS3ByNameNoContent {
	return &PutBlobstoresS3ByNameNoContent{}
}

/*
PutBlobstoresS3ByNameNoContent describes a response with status code 204, with default header values.

S3 blob store updated
*/
type PutBlobstoresS3ByNameNoContent struct {
}

// IsSuccess returns true when this put blobstores s3 by name no content response has a 2xx status code
func (o *PutBlobstoresS3ByNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put blobstores s3 by name no content response has a 3xx status code
func (o *PutBlobstoresS3ByNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put blobstores s3 by name no content response has a 4xx status code
func (o *PutBlobstoresS3ByNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put blobstores s3 by name no content response has a 5xx status code
func (o *PutBlobstoresS3ByNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put blobstores s3 by name no content response a status code equal to that given
func (o *PutBlobstoresS3ByNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put blobstores s3 by name no content response
func (o *PutBlobstoresS3ByNameNoContent) Code() int {
	return 204
}

func (o *PutBlobstoresS3ByNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/blobstores/s3/{name}][%d] putBlobstoresS3ByNameNoContent", 204)
}

func (o *PutBlobstoresS3ByNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/blobstores/s3/{name}][%d] putBlobstoresS3ByNameNoContent", 204)
}

func (o *PutBlobstoresS3ByNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutBlobstoresS3ByNameBadRequest creates a PutBlobstoresS3ByNameBadRequest with default headers values
func NewPutBlobstoresS3ByNameBadRequest() *PutBlobstoresS3ByNameBadRequest {
	return &PutBlobstoresS3ByNameBadRequest{}
}

/*
PutBlobstoresS3ByNameBadRequest describes a response with status code 400, with default header values.

Specified S3 blob store doesn't exist
*/
type PutBlobstoresS3ByNameBadRequest struct {
}

// IsSuccess returns true when this put blobstores s3 by name bad request response has a 2xx status code
func (o *PutBlobstoresS3ByNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put blobstores s3 by name bad request response has a 3xx status code
func (o *PutBlobstoresS3ByNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put blobstores s3 by name bad request response has a 4xx status code
func (o *PutBlobstoresS3ByNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put blobstores s3 by name bad request response has a 5xx status code
func (o *PutBlobstoresS3ByNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put blobstores s3 by name bad request response a status code equal to that given
func (o *PutBlobstoresS3ByNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put blobstores s3 by name bad request response
func (o *PutBlobstoresS3ByNameBadRequest) Code() int {
	return 400
}

func (o *PutBlobstoresS3ByNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/blobstores/s3/{name}][%d] putBlobstoresS3ByNameBadRequest", 400)
}

func (o *PutBlobstoresS3ByNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/blobstores/s3/{name}][%d] putBlobstoresS3ByNameBadRequest", 400)
}

func (o *PutBlobstoresS3ByNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutBlobstoresS3ByNameUnauthorized creates a PutBlobstoresS3ByNameUnauthorized with default headers values
func NewPutBlobstoresS3ByNameUnauthorized() *PutBlobstoresS3ByNameUnauthorized {
	return &PutBlobstoresS3ByNameUnauthorized{}
}

/*
PutBlobstoresS3ByNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutBlobstoresS3ByNameUnauthorized struct {
}

// IsSuccess returns true when this put blobstores s3 by name unauthorized response has a 2xx status code
func (o *PutBlobstoresS3ByNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put blobstores s3 by name unauthorized response has a 3xx status code
func (o *PutBlobstoresS3ByNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put blobstores s3 by name unauthorized response has a 4xx status code
func (o *PutBlobstoresS3ByNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put blobstores s3 by name unauthorized response has a 5xx status code
func (o *PutBlobstoresS3ByNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put blobstores s3 by name unauthorized response a status code equal to that given
func (o *PutBlobstoresS3ByNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put blobstores s3 by name unauthorized response
func (o *PutBlobstoresS3ByNameUnauthorized) Code() int {
	return 401
}

func (o *PutBlobstoresS3ByNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/blobstores/s3/{name}][%d] putBlobstoresS3ByNameUnauthorized", 401)
}

func (o *PutBlobstoresS3ByNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/blobstores/s3/{name}][%d] putBlobstoresS3ByNameUnauthorized", 401)
}

func (o *PutBlobstoresS3ByNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutBlobstoresS3ByNameForbidden creates a PutBlobstoresS3ByNameForbidden with default headers values
func NewPutBlobstoresS3ByNameForbidden() *PutBlobstoresS3ByNameForbidden {
	return &PutBlobstoresS3ByNameForbidden{}
}

/*
PutBlobstoresS3ByNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutBlobstoresS3ByNameForbidden struct {
}

// IsSuccess returns true when this put blobstores s3 by name forbidden response has a 2xx status code
func (o *PutBlobstoresS3ByNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put blobstores s3 by name forbidden response has a 3xx status code
func (o *PutBlobstoresS3ByNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put blobstores s3 by name forbidden response has a 4xx status code
func (o *PutBlobstoresS3ByNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put blobstores s3 by name forbidden response has a 5xx status code
func (o *PutBlobstoresS3ByNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put blobstores s3 by name forbidden response a status code equal to that given
func (o *PutBlobstoresS3ByNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put blobstores s3 by name forbidden response
func (o *PutBlobstoresS3ByNameForbidden) Code() int {
	return 403
}

func (o *PutBlobstoresS3ByNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/blobstores/s3/{name}][%d] putBlobstoresS3ByNameForbidden", 403)
}

func (o *PutBlobstoresS3ByNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/blobstores/s3/{name}][%d] putBlobstoresS3ByNameForbidden", 403)
}

func (o *PutBlobstoresS3ByNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
