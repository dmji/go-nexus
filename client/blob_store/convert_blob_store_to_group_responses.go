// Code generated by go-swagger; DO NOT EDIT.

package blob_store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"nexus/models"
)

// ConvertBlobStoreToGroupReader is a Reader for the ConvertBlobStoreToGroup structure.
type ConvertBlobStoreToGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConvertBlobStoreToGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewConvertBlobStoreToGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewConvertBlobStoreToGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewConvertBlobStoreToGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/blobstores/group/convert/{name}/{newNameForOriginal}] convertBlobStoreToGroup", response, response.Code())
	}
}

// NewConvertBlobStoreToGroupOK creates a ConvertBlobStoreToGroupOK with default headers values
func NewConvertBlobStoreToGroupOK() *ConvertBlobStoreToGroupOK {
	return &ConvertBlobStoreToGroupOK{}
}

/*
ConvertBlobStoreToGroupOK describes a response with status code 200, with default header values.

Success
*/
type ConvertBlobStoreToGroupOK struct {
	Payload *models.GroupBlobStoreAPIModel
}

// IsSuccess returns true when this convert blob store to group o k response has a 2xx status code
func (o *ConvertBlobStoreToGroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this convert blob store to group o k response has a 3xx status code
func (o *ConvertBlobStoreToGroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this convert blob store to group o k response has a 4xx status code
func (o *ConvertBlobStoreToGroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this convert blob store to group o k response has a 5xx status code
func (o *ConvertBlobStoreToGroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this convert blob store to group o k response a status code equal to that given
func (o *ConvertBlobStoreToGroupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the convert blob store to group o k response
func (o *ConvertBlobStoreToGroupOK) Code() int {
	return 200
}

func (o *ConvertBlobStoreToGroupOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/blobstores/group/convert/{name}/{newNameForOriginal}][%d] convertBlobStoreToGroupOK %s", 200, payload)
}

func (o *ConvertBlobStoreToGroupOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/blobstores/group/convert/{name}/{newNameForOriginal}][%d] convertBlobStoreToGroupOK %s", 200, payload)
}

func (o *ConvertBlobStoreToGroupOK) GetPayload() *models.GroupBlobStoreAPIModel {
	return o.Payload
}

func (o *ConvertBlobStoreToGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GroupBlobStoreAPIModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConvertBlobStoreToGroupForbidden creates a ConvertBlobStoreToGroupForbidden with default headers values
func NewConvertBlobStoreToGroupForbidden() *ConvertBlobStoreToGroupForbidden {
	return &ConvertBlobStoreToGroupForbidden{}
}

/*
ConvertBlobStoreToGroupForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type ConvertBlobStoreToGroupForbidden struct {
}

// IsSuccess returns true when this convert blob store to group forbidden response has a 2xx status code
func (o *ConvertBlobStoreToGroupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this convert blob store to group forbidden response has a 3xx status code
func (o *ConvertBlobStoreToGroupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this convert blob store to group forbidden response has a 4xx status code
func (o *ConvertBlobStoreToGroupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this convert blob store to group forbidden response has a 5xx status code
func (o *ConvertBlobStoreToGroupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this convert blob store to group forbidden response a status code equal to that given
func (o *ConvertBlobStoreToGroupForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the convert blob store to group forbidden response
func (o *ConvertBlobStoreToGroupForbidden) Code() int {
	return 403
}

func (o *ConvertBlobStoreToGroupForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/blobstores/group/convert/{name}/{newNameForOriginal}][%d] convertBlobStoreToGroupForbidden", 403)
}

func (o *ConvertBlobStoreToGroupForbidden) String() string {
	return fmt.Sprintf("[POST /v1/blobstores/group/convert/{name}/{newNameForOriginal}][%d] convertBlobStoreToGroupForbidden", 403)
}

func (o *ConvertBlobStoreToGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewConvertBlobStoreToGroupNotFound creates a ConvertBlobStoreToGroupNotFound with default headers values
func NewConvertBlobStoreToGroupNotFound() *ConvertBlobStoreToGroupNotFound {
	return &ConvertBlobStoreToGroupNotFound{}
}

/*
ConvertBlobStoreToGroupNotFound describes a response with status code 404, with default header values.

Blob store not found
*/
type ConvertBlobStoreToGroupNotFound struct {
}

// IsSuccess returns true when this convert blob store to group not found response has a 2xx status code
func (o *ConvertBlobStoreToGroupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this convert blob store to group not found response has a 3xx status code
func (o *ConvertBlobStoreToGroupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this convert blob store to group not found response has a 4xx status code
func (o *ConvertBlobStoreToGroupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this convert blob store to group not found response has a 5xx status code
func (o *ConvertBlobStoreToGroupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this convert blob store to group not found response a status code equal to that given
func (o *ConvertBlobStoreToGroupNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the convert blob store to group not found response
func (o *ConvertBlobStoreToGroupNotFound) Code() int {
	return 404
}

func (o *ConvertBlobStoreToGroupNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/blobstores/group/convert/{name}/{newNameForOriginal}][%d] convertBlobStoreToGroupNotFound", 404)
}

func (o *ConvertBlobStoreToGroupNotFound) String() string {
	return fmt.Sprintf("[POST /v1/blobstores/group/convert/{name}/{newNameForOriginal}][%d] convertBlobStoreToGroupNotFound", 404)
}

func (o *ConvertBlobStoreToGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
