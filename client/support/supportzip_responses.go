// Code generated by go-swagger; DO NOT EDIT.

package support

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// SupportzipReader is a Reader for the Supportzip structure.
type SupportzipReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SupportzipReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSupportzipOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewSupportzipForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/support/supportzip] supportzip", response, response.Code())
	}
}

// NewSupportzipOK creates a SupportzipOK with default headers values
func NewSupportzipOK() *SupportzipOK {
	return &SupportzipOK{}
}

/*
SupportzipOK describes a response with status code 200, with default header values.

successful operation
*/
type SupportzipOK struct {
}

// IsSuccess returns true when this supportzip o k response has a 2xx status code
func (o *SupportzipOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this supportzip o k response has a 3xx status code
func (o *SupportzipOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this supportzip o k response has a 4xx status code
func (o *SupportzipOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this supportzip o k response has a 5xx status code
func (o *SupportzipOK) IsServerError() bool {
	return false
}

// IsCode returns true when this supportzip o k response a status code equal to that given
func (o *SupportzipOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the supportzip o k response
func (o *SupportzipOK) Code() int {
	return 200
}

func (o *SupportzipOK) Error() string {
	return fmt.Sprintf("[POST /v1/support/supportzip][%d] supportzipOK", 200)
}

func (o *SupportzipOK) String() string {
	return fmt.Sprintf("[POST /v1/support/supportzip][%d] supportzipOK", 200)
}

func (o *SupportzipOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSupportzipForbidden creates a SupportzipForbidden with default headers values
func NewSupportzipForbidden() *SupportzipForbidden {
	return &SupportzipForbidden{}
}

/*
SupportzipForbidden describes a response with status code 403, with default header values.

Insufficient permissions to generate support zip
*/
type SupportzipForbidden struct {
}

// IsSuccess returns true when this supportzip forbidden response has a 2xx status code
func (o *SupportzipForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this supportzip forbidden response has a 3xx status code
func (o *SupportzipForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this supportzip forbidden response has a 4xx status code
func (o *SupportzipForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this supportzip forbidden response has a 5xx status code
func (o *SupportzipForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this supportzip forbidden response a status code equal to that given
func (o *SupportzipForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the supportzip forbidden response
func (o *SupportzipForbidden) Code() int {
	return 403
}

func (o *SupportzipForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/support/supportzip][%d] supportzipForbidden", 403)
}

func (o *SupportzipForbidden) String() string {
	return fmt.Sprintf("[POST /v1/support/supportzip][%d] supportzipForbidden", 403)
}

func (o *SupportzipForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
