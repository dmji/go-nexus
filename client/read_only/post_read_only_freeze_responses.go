// Code generated by go-swagger; DO NOT EDIT.

package read_only

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PostReadOnlyFreezeReader is a Reader for the PostReadOnlyFreeze structure.
type PostReadOnlyFreezeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostReadOnlyFreezeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPostReadOnlyFreezeNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPostReadOnlyFreezeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostReadOnlyFreezeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/read-only/freeze] PostReadOnlyFreeze", response, response.Code())
	}
}

// NewPostReadOnlyFreezeNoContent creates a PostReadOnlyFreezeNoContent with default headers values
func NewPostReadOnlyFreezeNoContent() *PostReadOnlyFreezeNoContent {
	return &PostReadOnlyFreezeNoContent{}
}

/*
PostReadOnlyFreezeNoContent describes a response with status code 204, with default header values.

Database is now read-only
*/
type PostReadOnlyFreezeNoContent struct {
}

// IsSuccess returns true when this post read only freeze no content response has a 2xx status code
func (o *PostReadOnlyFreezeNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post read only freeze no content response has a 3xx status code
func (o *PostReadOnlyFreezeNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post read only freeze no content response has a 4xx status code
func (o *PostReadOnlyFreezeNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this post read only freeze no content response has a 5xx status code
func (o *PostReadOnlyFreezeNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this post read only freeze no content response a status code equal to that given
func (o *PostReadOnlyFreezeNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the post read only freeze no content response
func (o *PostReadOnlyFreezeNoContent) Code() int {
	return 204
}

func (o *PostReadOnlyFreezeNoContent) Error() string {
	return fmt.Sprintf("[POST /v1/read-only/freeze][%d] postReadOnlyFreezeNoContent", 204)
}

func (o *PostReadOnlyFreezeNoContent) String() string {
	return fmt.Sprintf("[POST /v1/read-only/freeze][%d] postReadOnlyFreezeNoContent", 204)
}

func (o *PostReadOnlyFreezeNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostReadOnlyFreezeForbidden creates a PostReadOnlyFreezeForbidden with default headers values
func NewPostReadOnlyFreezeForbidden() *PostReadOnlyFreezeForbidden {
	return &PostReadOnlyFreezeForbidden{}
}

/*
PostReadOnlyFreezeForbidden describes a response with status code 403, with default header values.

Authentication required
*/
type PostReadOnlyFreezeForbidden struct {
}

// IsSuccess returns true when this post read only freeze forbidden response has a 2xx status code
func (o *PostReadOnlyFreezeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post read only freeze forbidden response has a 3xx status code
func (o *PostReadOnlyFreezeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post read only freeze forbidden response has a 4xx status code
func (o *PostReadOnlyFreezeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post read only freeze forbidden response has a 5xx status code
func (o *PostReadOnlyFreezeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post read only freeze forbidden response a status code equal to that given
func (o *PostReadOnlyFreezeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post read only freeze forbidden response
func (o *PostReadOnlyFreezeForbidden) Code() int {
	return 403
}

func (o *PostReadOnlyFreezeForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/read-only/freeze][%d] postReadOnlyFreezeForbidden", 403)
}

func (o *PostReadOnlyFreezeForbidden) String() string {
	return fmt.Sprintf("[POST /v1/read-only/freeze][%d] postReadOnlyFreezeForbidden", 403)
}

func (o *PostReadOnlyFreezeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostReadOnlyFreezeNotFound creates a PostReadOnlyFreezeNotFound with default headers values
func NewPostReadOnlyFreezeNotFound() *PostReadOnlyFreezeNotFound {
	return &PostReadOnlyFreezeNotFound{}
}

/*
PostReadOnlyFreezeNotFound describes a response with status code 404, with default header values.

No change to read-only state
*/
type PostReadOnlyFreezeNotFound struct {
}

// IsSuccess returns true when this post read only freeze not found response has a 2xx status code
func (o *PostReadOnlyFreezeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post read only freeze not found response has a 3xx status code
func (o *PostReadOnlyFreezeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post read only freeze not found response has a 4xx status code
func (o *PostReadOnlyFreezeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post read only freeze not found response has a 5xx status code
func (o *PostReadOnlyFreezeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post read only freeze not found response a status code equal to that given
func (o *PostReadOnlyFreezeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post read only freeze not found response
func (o *PostReadOnlyFreezeNotFound) Code() int {
	return 404
}

func (o *PostReadOnlyFreezeNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/read-only/freeze][%d] postReadOnlyFreezeNotFound", 404)
}

func (o *PostReadOnlyFreezeNotFound) String() string {
	return fmt.Sprintf("[POST /v1/read-only/freeze][%d] postReadOnlyFreezeNotFound", 404)
}

func (o *PostReadOnlyFreezeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
