// Code generated by go-swagger; DO NOT EDIT.

package read_only

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new read only API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new read only API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new read only API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for read only API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetReadOnly(params *GetReadOnlyParams, opts ...ClientOption) (*GetReadOnlyOK, error)

	PostReadOnlyForceRelease(params *PostReadOnlyForceReleaseParams, opts ...ClientOption) (*PostReadOnlyForceReleaseNoContent, error)

	PostReadOnlyFreeze(params *PostReadOnlyFreezeParams, opts ...ClientOption) (*PostReadOnlyFreezeNoContent, error)

	PostReadOnlyRelease(params *PostReadOnlyReleaseParams, opts ...ClientOption) (*PostReadOnlyReleaseNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetReadOnly gets read only state
*/
func (a *Client) GetReadOnly(params *GetReadOnlyParams, opts ...ClientOption) (*GetReadOnlyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReadOnlyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetReadOnly",
		Method:             "GET",
		PathPattern:        "/v1/read-only",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReadOnlyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReadOnlyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetReadOnly: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostReadOnlyForceRelease forciblies release read only and allow changes to embedded orient d b

Forcibly release read-only status, including if caused by system tasks. Warning: may result in data loss.
*/
func (a *Client) PostReadOnlyForceRelease(params *PostReadOnlyForceReleaseParams, opts ...ClientOption) (*PostReadOnlyForceReleaseNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostReadOnlyForceReleaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostReadOnlyForceRelease",
		Method:             "POST",
		PathPattern:        "/v1/read-only/force-release",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostReadOnlyForceReleaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostReadOnlyForceReleaseNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostReadOnlyForceRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostReadOnlyFreeze prevents changes to embedded orient d b

For low-level system maintenance purposes only; do not use if you want users to still be able to download components.
*/
func (a *Client) PostReadOnlyFreeze(params *PostReadOnlyFreezeParams, opts ...ClientOption) (*PostReadOnlyFreezeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostReadOnlyFreezeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostReadOnlyFreeze",
		Method:             "POST",
		PathPattern:        "/v1/read-only/freeze",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostReadOnlyFreezeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostReadOnlyFreezeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostReadOnlyFreeze: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostReadOnlyRelease releases read only and allow changes to embedded orient d b

Releases administrator-initiated read-only status. Will not release read-only status caused by system tasks.
*/
func (a *Client) PostReadOnlyRelease(params *PostReadOnlyReleaseParams, opts ...ClientOption) (*PostReadOnlyReleaseNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostReadOnlyReleaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostReadOnlyRelease",
		Method:             "POST",
		PathPattern:        "/v1/read-only/release",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostReadOnlyReleaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostReadOnlyReleaseNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostReadOnlyRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
