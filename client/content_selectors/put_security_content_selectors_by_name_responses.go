// Code generated by go-swagger; DO NOT EDIT.

package content_selectors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutSecurityContentSelectorsByNameReader is a Reader for the PutSecurityContentSelectorsByName structure.
type PutSecurityContentSelectorsByNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSecurityContentSelectorsByNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutSecurityContentSelectorsByNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutSecurityContentSelectorsByNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutSecurityContentSelectorsByNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/security/content-selectors/{name}] PutSecurityContentSelectorsByName", response, response.Code())
	}
}

// NewPutSecurityContentSelectorsByNameNoContent creates a PutSecurityContentSelectorsByNameNoContent with default headers values
func NewPutSecurityContentSelectorsByNameNoContent() *PutSecurityContentSelectorsByNameNoContent {
	return &PutSecurityContentSelectorsByNameNoContent{}
}

/*
PutSecurityContentSelectorsByNameNoContent describes a response with status code 204, with default header values.

Content selector updated successfully
*/
type PutSecurityContentSelectorsByNameNoContent struct {
}

// IsSuccess returns true when this put security content selectors by name no content response has a 2xx status code
func (o *PutSecurityContentSelectorsByNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put security content selectors by name no content response has a 3xx status code
func (o *PutSecurityContentSelectorsByNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put security content selectors by name no content response has a 4xx status code
func (o *PutSecurityContentSelectorsByNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put security content selectors by name no content response has a 5xx status code
func (o *PutSecurityContentSelectorsByNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put security content selectors by name no content response a status code equal to that given
func (o *PutSecurityContentSelectorsByNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put security content selectors by name no content response
func (o *PutSecurityContentSelectorsByNameNoContent) Code() int {
	return 204
}

func (o *PutSecurityContentSelectorsByNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/security/content-selectors/{name}][%d] putSecurityContentSelectorsByNameNoContent", 204)
}

func (o *PutSecurityContentSelectorsByNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/security/content-selectors/{name}][%d] putSecurityContentSelectorsByNameNoContent", 204)
}

func (o *PutSecurityContentSelectorsByNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSecurityContentSelectorsByNameBadRequest creates a PutSecurityContentSelectorsByNameBadRequest with default headers values
func NewPutSecurityContentSelectorsByNameBadRequest() *PutSecurityContentSelectorsByNameBadRequest {
	return &PutSecurityContentSelectorsByNameBadRequest{}
}

/*
PutSecurityContentSelectorsByNameBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type PutSecurityContentSelectorsByNameBadRequest struct {
}

// IsSuccess returns true when this put security content selectors by name bad request response has a 2xx status code
func (o *PutSecurityContentSelectorsByNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put security content selectors by name bad request response has a 3xx status code
func (o *PutSecurityContentSelectorsByNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put security content selectors by name bad request response has a 4xx status code
func (o *PutSecurityContentSelectorsByNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put security content selectors by name bad request response has a 5xx status code
func (o *PutSecurityContentSelectorsByNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put security content selectors by name bad request response a status code equal to that given
func (o *PutSecurityContentSelectorsByNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put security content selectors by name bad request response
func (o *PutSecurityContentSelectorsByNameBadRequest) Code() int {
	return 400
}

func (o *PutSecurityContentSelectorsByNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/security/content-selectors/{name}][%d] putSecurityContentSelectorsByNameBadRequest", 400)
}

func (o *PutSecurityContentSelectorsByNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/security/content-selectors/{name}][%d] putSecurityContentSelectorsByNameBadRequest", 400)
}

func (o *PutSecurityContentSelectorsByNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSecurityContentSelectorsByNameForbidden creates a PutSecurityContentSelectorsByNameForbidden with default headers values
func NewPutSecurityContentSelectorsByNameForbidden() *PutSecurityContentSelectorsByNameForbidden {
	return &PutSecurityContentSelectorsByNameForbidden{}
}

/*
PutSecurityContentSelectorsByNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions to update the content selector
*/
type PutSecurityContentSelectorsByNameForbidden struct {
}

// IsSuccess returns true when this put security content selectors by name forbidden response has a 2xx status code
func (o *PutSecurityContentSelectorsByNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put security content selectors by name forbidden response has a 3xx status code
func (o *PutSecurityContentSelectorsByNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put security content selectors by name forbidden response has a 4xx status code
func (o *PutSecurityContentSelectorsByNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put security content selectors by name forbidden response has a 5xx status code
func (o *PutSecurityContentSelectorsByNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put security content selectors by name forbidden response a status code equal to that given
func (o *PutSecurityContentSelectorsByNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put security content selectors by name forbidden response
func (o *PutSecurityContentSelectorsByNameForbidden) Code() int {
	return 403
}

func (o *PutSecurityContentSelectorsByNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/security/content-selectors/{name}][%d] putSecurityContentSelectorsByNameForbidden", 403)
}

func (o *PutSecurityContentSelectorsByNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/security/content-selectors/{name}][%d] putSecurityContentSelectorsByNameForbidden", 403)
}

func (o *PutSecurityContentSelectorsByNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
