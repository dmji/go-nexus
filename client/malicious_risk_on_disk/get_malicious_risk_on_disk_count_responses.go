// Code generated by go-swagger; DO NOT EDIT.

package malicious_risk_on_disk

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetMaliciousRiskOnDiskCountReader is a Reader for the GetMaliciousRiskOnDiskCount structure.
type GetMaliciousRiskOnDiskCountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMaliciousRiskOnDiskCountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMaliciousRiskOnDiskCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetMaliciousRiskOnDiskCountUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetMaliciousRiskOnDiskCountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/malicious-risk/risk-on-disk] getMaliciousRiskOnDiskCount", response, response.Code())
	}
}

// NewGetMaliciousRiskOnDiskCountOK creates a GetMaliciousRiskOnDiskCountOK with default headers values
func NewGetMaliciousRiskOnDiskCountOK() *GetMaliciousRiskOnDiskCountOK {
	return &GetMaliciousRiskOnDiskCountOK{}
}

/*
GetMaliciousRiskOnDiskCountOK describes a response with status code 200, with default header values.

Malicious Risk On Disk Count returned
*/
type GetMaliciousRiskOnDiskCountOK struct {
}

// IsSuccess returns true when this get malicious risk on disk count o k response has a 2xx status code
func (o *GetMaliciousRiskOnDiskCountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get malicious risk on disk count o k response has a 3xx status code
func (o *GetMaliciousRiskOnDiskCountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get malicious risk on disk count o k response has a 4xx status code
func (o *GetMaliciousRiskOnDiskCountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get malicious risk on disk count o k response has a 5xx status code
func (o *GetMaliciousRiskOnDiskCountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get malicious risk on disk count o k response a status code equal to that given
func (o *GetMaliciousRiskOnDiskCountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get malicious risk on disk count o k response
func (o *GetMaliciousRiskOnDiskCountOK) Code() int {
	return 200
}

func (o *GetMaliciousRiskOnDiskCountOK) Error() string {
	return fmt.Sprintf("[GET /v1/malicious-risk/risk-on-disk][%d] getMaliciousRiskOnDiskCountOK", 200)
}

func (o *GetMaliciousRiskOnDiskCountOK) String() string {
	return fmt.Sprintf("[GET /v1/malicious-risk/risk-on-disk][%d] getMaliciousRiskOnDiskCountOK", 200)
}

func (o *GetMaliciousRiskOnDiskCountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetMaliciousRiskOnDiskCountUnauthorized creates a GetMaliciousRiskOnDiskCountUnauthorized with default headers values
func NewGetMaliciousRiskOnDiskCountUnauthorized() *GetMaliciousRiskOnDiskCountUnauthorized {
	return &GetMaliciousRiskOnDiskCountUnauthorized{}
}

/*
GetMaliciousRiskOnDiskCountUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type GetMaliciousRiskOnDiskCountUnauthorized struct {
}

// IsSuccess returns true when this get malicious risk on disk count unauthorized response has a 2xx status code
func (o *GetMaliciousRiskOnDiskCountUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get malicious risk on disk count unauthorized response has a 3xx status code
func (o *GetMaliciousRiskOnDiskCountUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get malicious risk on disk count unauthorized response has a 4xx status code
func (o *GetMaliciousRiskOnDiskCountUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get malicious risk on disk count unauthorized response has a 5xx status code
func (o *GetMaliciousRiskOnDiskCountUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get malicious risk on disk count unauthorized response a status code equal to that given
func (o *GetMaliciousRiskOnDiskCountUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get malicious risk on disk count unauthorized response
func (o *GetMaliciousRiskOnDiskCountUnauthorized) Code() int {
	return 401
}

func (o *GetMaliciousRiskOnDiskCountUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/malicious-risk/risk-on-disk][%d] getMaliciousRiskOnDiskCountUnauthorized", 401)
}

func (o *GetMaliciousRiskOnDiskCountUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/malicious-risk/risk-on-disk][%d] getMaliciousRiskOnDiskCountUnauthorized", 401)
}

func (o *GetMaliciousRiskOnDiskCountUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetMaliciousRiskOnDiskCountForbidden creates a GetMaliciousRiskOnDiskCountForbidden with default headers values
func NewGetMaliciousRiskOnDiskCountForbidden() *GetMaliciousRiskOnDiskCountForbidden {
	return &GetMaliciousRiskOnDiskCountForbidden{}
}

/*
GetMaliciousRiskOnDiskCountForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type GetMaliciousRiskOnDiskCountForbidden struct {
}

// IsSuccess returns true when this get malicious risk on disk count forbidden response has a 2xx status code
func (o *GetMaliciousRiskOnDiskCountForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get malicious risk on disk count forbidden response has a 3xx status code
func (o *GetMaliciousRiskOnDiskCountForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get malicious risk on disk count forbidden response has a 4xx status code
func (o *GetMaliciousRiskOnDiskCountForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get malicious risk on disk count forbidden response has a 5xx status code
func (o *GetMaliciousRiskOnDiskCountForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get malicious risk on disk count forbidden response a status code equal to that given
func (o *GetMaliciousRiskOnDiskCountForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get malicious risk on disk count forbidden response
func (o *GetMaliciousRiskOnDiskCountForbidden) Code() int {
	return 403
}

func (o *GetMaliciousRiskOnDiskCountForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/malicious-risk/risk-on-disk][%d] getMaliciousRiskOnDiskCountForbidden", 403)
}

func (o *GetMaliciousRiskOnDiskCountForbidden) String() string {
	return fmt.Sprintf("[GET /v1/malicious-risk/risk-on-disk][%d] getMaliciousRiskOnDiskCountForbidden", 403)
}

func (o *GetMaliciousRiskOnDiskCountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
