// Code generated by go-swagger; DO NOT EDIT.

package security_management_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutSecurityUsersByUseridReader is a Reader for the PutSecurityUsersByUserid structure.
type PutSecurityUsersByUseridReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSecurityUsersByUseridReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewPutSecurityUsersByUseridBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutSecurityUsersByUseridForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutSecurityUsersByUseridNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/security/users/{userId}] PutSecurityUsersByUserid", response, response.Code())
	}
}

// NewPutSecurityUsersByUseridBadRequest creates a PutSecurityUsersByUseridBadRequest with default headers values
func NewPutSecurityUsersByUseridBadRequest() *PutSecurityUsersByUseridBadRequest {
	return &PutSecurityUsersByUseridBadRequest{}
}

/*
PutSecurityUsersByUseridBadRequest describes a response with status code 400, with default header values.

Password was not supplied in the body of the request
*/
type PutSecurityUsersByUseridBadRequest struct {
}

// IsSuccess returns true when this put security users by userid bad request response has a 2xx status code
func (o *PutSecurityUsersByUseridBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put security users by userid bad request response has a 3xx status code
func (o *PutSecurityUsersByUseridBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put security users by userid bad request response has a 4xx status code
func (o *PutSecurityUsersByUseridBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put security users by userid bad request response has a 5xx status code
func (o *PutSecurityUsersByUseridBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put security users by userid bad request response a status code equal to that given
func (o *PutSecurityUsersByUseridBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put security users by userid bad request response
func (o *PutSecurityUsersByUseridBadRequest) Code() int {
	return 400
}

func (o *PutSecurityUsersByUseridBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/security/users/{userId}][%d] putSecurityUsersByUseridBadRequest", 400)
}

func (o *PutSecurityUsersByUseridBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/security/users/{userId}][%d] putSecurityUsersByUseridBadRequest", 400)
}

func (o *PutSecurityUsersByUseridBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSecurityUsersByUseridForbidden creates a PutSecurityUsersByUseridForbidden with default headers values
func NewPutSecurityUsersByUseridForbidden() *PutSecurityUsersByUseridForbidden {
	return &PutSecurityUsersByUseridForbidden{}
}

/*
PutSecurityUsersByUseridForbidden describes a response with status code 403, with default header values.

The user does not have permission to perform the operation.
*/
type PutSecurityUsersByUseridForbidden struct {
}

// IsSuccess returns true when this put security users by userid forbidden response has a 2xx status code
func (o *PutSecurityUsersByUseridForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put security users by userid forbidden response has a 3xx status code
func (o *PutSecurityUsersByUseridForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put security users by userid forbidden response has a 4xx status code
func (o *PutSecurityUsersByUseridForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put security users by userid forbidden response has a 5xx status code
func (o *PutSecurityUsersByUseridForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put security users by userid forbidden response a status code equal to that given
func (o *PutSecurityUsersByUseridForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put security users by userid forbidden response
func (o *PutSecurityUsersByUseridForbidden) Code() int {
	return 403
}

func (o *PutSecurityUsersByUseridForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/security/users/{userId}][%d] putSecurityUsersByUseridForbidden", 403)
}

func (o *PutSecurityUsersByUseridForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/security/users/{userId}][%d] putSecurityUsersByUseridForbidden", 403)
}

func (o *PutSecurityUsersByUseridForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSecurityUsersByUseridNotFound creates a PutSecurityUsersByUseridNotFound with default headers values
func NewPutSecurityUsersByUseridNotFound() *PutSecurityUsersByUseridNotFound {
	return &PutSecurityUsersByUseridNotFound{}
}

/*
PutSecurityUsersByUseridNotFound describes a response with status code 404, with default header values.

User or user source not found in the system.
*/
type PutSecurityUsersByUseridNotFound struct {
}

// IsSuccess returns true when this put security users by userid not found response has a 2xx status code
func (o *PutSecurityUsersByUseridNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put security users by userid not found response has a 3xx status code
func (o *PutSecurityUsersByUseridNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put security users by userid not found response has a 4xx status code
func (o *PutSecurityUsersByUseridNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put security users by userid not found response has a 5xx status code
func (o *PutSecurityUsersByUseridNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put security users by userid not found response a status code equal to that given
func (o *PutSecurityUsersByUseridNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put security users by userid not found response
func (o *PutSecurityUsersByUseridNotFound) Code() int {
	return 404
}

func (o *PutSecurityUsersByUseridNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/security/users/{userId}][%d] putSecurityUsersByUseridNotFound", 404)
}

func (o *PutSecurityUsersByUseridNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/security/users/{userId}][%d] putSecurityUsersByUseridNotFound", 404)
}

func (o *PutSecurityUsersByUseridNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
