// Code generated by go-swagger; DO NOT EDIT.

package security_management_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutSecurityUsersByUserIDReader is a Reader for the PutSecurityUsersByUserID structure.
type PutSecurityUsersByUserIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSecurityUsersByUserIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewPutSecurityUsersByUserIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutSecurityUsersByUserIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutSecurityUsersByUserIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/security/users/{userId}] PutSecurityUsersByUserId", response, response.Code())
	}
}

// NewPutSecurityUsersByUserIDBadRequest creates a PutSecurityUsersByUserIDBadRequest with default headers values
func NewPutSecurityUsersByUserIDBadRequest() *PutSecurityUsersByUserIDBadRequest {
	return &PutSecurityUsersByUserIDBadRequest{}
}

/*
PutSecurityUsersByUserIDBadRequest describes a response with status code 400, with default header values.

Password was not supplied in the body of the request
*/
type PutSecurityUsersByUserIDBadRequest struct {
}

// IsSuccess returns true when this put security users by user Id bad request response has a 2xx status code
func (o *PutSecurityUsersByUserIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put security users by user Id bad request response has a 3xx status code
func (o *PutSecurityUsersByUserIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put security users by user Id bad request response has a 4xx status code
func (o *PutSecurityUsersByUserIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put security users by user Id bad request response has a 5xx status code
func (o *PutSecurityUsersByUserIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put security users by user Id bad request response a status code equal to that given
func (o *PutSecurityUsersByUserIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put security users by user Id bad request response
func (o *PutSecurityUsersByUserIDBadRequest) Code() int {
	return 400
}

func (o *PutSecurityUsersByUserIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/security/users/{userId}][%d] putSecurityUsersByUserIdBadRequest", 400)
}

func (o *PutSecurityUsersByUserIDBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/security/users/{userId}][%d] putSecurityUsersByUserIdBadRequest", 400)
}

func (o *PutSecurityUsersByUserIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSecurityUsersByUserIDForbidden creates a PutSecurityUsersByUserIDForbidden with default headers values
func NewPutSecurityUsersByUserIDForbidden() *PutSecurityUsersByUserIDForbidden {
	return &PutSecurityUsersByUserIDForbidden{}
}

/*
PutSecurityUsersByUserIDForbidden describes a response with status code 403, with default header values.

The user does not have permission to perform the operation.
*/
type PutSecurityUsersByUserIDForbidden struct {
}

// IsSuccess returns true when this put security users by user Id forbidden response has a 2xx status code
func (o *PutSecurityUsersByUserIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put security users by user Id forbidden response has a 3xx status code
func (o *PutSecurityUsersByUserIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put security users by user Id forbidden response has a 4xx status code
func (o *PutSecurityUsersByUserIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put security users by user Id forbidden response has a 5xx status code
func (o *PutSecurityUsersByUserIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put security users by user Id forbidden response a status code equal to that given
func (o *PutSecurityUsersByUserIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put security users by user Id forbidden response
func (o *PutSecurityUsersByUserIDForbidden) Code() int {
	return 403
}

func (o *PutSecurityUsersByUserIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/security/users/{userId}][%d] putSecurityUsersByUserIdForbidden", 403)
}

func (o *PutSecurityUsersByUserIDForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/security/users/{userId}][%d] putSecurityUsersByUserIdForbidden", 403)
}

func (o *PutSecurityUsersByUserIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSecurityUsersByUserIDNotFound creates a PutSecurityUsersByUserIDNotFound with default headers values
func NewPutSecurityUsersByUserIDNotFound() *PutSecurityUsersByUserIDNotFound {
	return &PutSecurityUsersByUserIDNotFound{}
}

/*
PutSecurityUsersByUserIDNotFound describes a response with status code 404, with default header values.

User or user source not found in the system.
*/
type PutSecurityUsersByUserIDNotFound struct {
}

// IsSuccess returns true when this put security users by user Id not found response has a 2xx status code
func (o *PutSecurityUsersByUserIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put security users by user Id not found response has a 3xx status code
func (o *PutSecurityUsersByUserIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put security users by user Id not found response has a 4xx status code
func (o *PutSecurityUsersByUserIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put security users by user Id not found response has a 5xx status code
func (o *PutSecurityUsersByUserIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put security users by user Id not found response a status code equal to that given
func (o *PutSecurityUsersByUserIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put security users by user Id not found response
func (o *PutSecurityUsersByUserIDNotFound) Code() int {
	return 404
}

func (o *PutSecurityUsersByUserIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/security/users/{userId}][%d] putSecurityUsersByUserIdNotFound", 404)
}

func (o *PutSecurityUsersByUserIDNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/security/users/{userId}][%d] putSecurityUsersByUserIdNotFound", 404)
}

func (o *PutSecurityUsersByUserIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
