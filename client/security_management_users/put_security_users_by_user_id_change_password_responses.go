// Code generated by go-swagger; DO NOT EDIT.

package security_management_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutSecurityUsersByUserIDChangePasswordReader is a Reader for the PutSecurityUsersByUserIDChangePassword structure.
type PutSecurityUsersByUserIDChangePasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSecurityUsersByUserIDChangePasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewPutSecurityUsersByUserIDChangePasswordBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutSecurityUsersByUserIDChangePasswordForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutSecurityUsersByUserIDChangePasswordNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/security/users/{userId}/change-password] PutSecurityUsersByUserIdChangePassword", response, response.Code())
	}
}

// NewPutSecurityUsersByUserIDChangePasswordBadRequest creates a PutSecurityUsersByUserIDChangePasswordBadRequest with default headers values
func NewPutSecurityUsersByUserIDChangePasswordBadRequest() *PutSecurityUsersByUserIDChangePasswordBadRequest {
	return &PutSecurityUsersByUserIDChangePasswordBadRequest{}
}

/*
PutSecurityUsersByUserIDChangePasswordBadRequest describes a response with status code 400, with default header values.

Password was not supplied in the body of the request
*/
type PutSecurityUsersByUserIDChangePasswordBadRequest struct {
}

// IsSuccess returns true when this put security users by user Id change password bad request response has a 2xx status code
func (o *PutSecurityUsersByUserIDChangePasswordBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put security users by user Id change password bad request response has a 3xx status code
func (o *PutSecurityUsersByUserIDChangePasswordBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put security users by user Id change password bad request response has a 4xx status code
func (o *PutSecurityUsersByUserIDChangePasswordBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put security users by user Id change password bad request response has a 5xx status code
func (o *PutSecurityUsersByUserIDChangePasswordBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put security users by user Id change password bad request response a status code equal to that given
func (o *PutSecurityUsersByUserIDChangePasswordBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put security users by user Id change password bad request response
func (o *PutSecurityUsersByUserIDChangePasswordBadRequest) Code() int {
	return 400
}

func (o *PutSecurityUsersByUserIDChangePasswordBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/security/users/{userId}/change-password][%d] putSecurityUsersByUserIdChangePasswordBadRequest", 400)
}

func (o *PutSecurityUsersByUserIDChangePasswordBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/security/users/{userId}/change-password][%d] putSecurityUsersByUserIdChangePasswordBadRequest", 400)
}

func (o *PutSecurityUsersByUserIDChangePasswordBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSecurityUsersByUserIDChangePasswordForbidden creates a PutSecurityUsersByUserIDChangePasswordForbidden with default headers values
func NewPutSecurityUsersByUserIDChangePasswordForbidden() *PutSecurityUsersByUserIDChangePasswordForbidden {
	return &PutSecurityUsersByUserIDChangePasswordForbidden{}
}

/*
PutSecurityUsersByUserIDChangePasswordForbidden describes a response with status code 403, with default header values.

The user does not have permission to perform the operation.
*/
type PutSecurityUsersByUserIDChangePasswordForbidden struct {
}

// IsSuccess returns true when this put security users by user Id change password forbidden response has a 2xx status code
func (o *PutSecurityUsersByUserIDChangePasswordForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put security users by user Id change password forbidden response has a 3xx status code
func (o *PutSecurityUsersByUserIDChangePasswordForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put security users by user Id change password forbidden response has a 4xx status code
func (o *PutSecurityUsersByUserIDChangePasswordForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put security users by user Id change password forbidden response has a 5xx status code
func (o *PutSecurityUsersByUserIDChangePasswordForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put security users by user Id change password forbidden response a status code equal to that given
func (o *PutSecurityUsersByUserIDChangePasswordForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put security users by user Id change password forbidden response
func (o *PutSecurityUsersByUserIDChangePasswordForbidden) Code() int {
	return 403
}

func (o *PutSecurityUsersByUserIDChangePasswordForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/security/users/{userId}/change-password][%d] putSecurityUsersByUserIdChangePasswordForbidden", 403)
}

func (o *PutSecurityUsersByUserIDChangePasswordForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/security/users/{userId}/change-password][%d] putSecurityUsersByUserIdChangePasswordForbidden", 403)
}

func (o *PutSecurityUsersByUserIDChangePasswordForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSecurityUsersByUserIDChangePasswordNotFound creates a PutSecurityUsersByUserIDChangePasswordNotFound with default headers values
func NewPutSecurityUsersByUserIDChangePasswordNotFound() *PutSecurityUsersByUserIDChangePasswordNotFound {
	return &PutSecurityUsersByUserIDChangePasswordNotFound{}
}

/*
PutSecurityUsersByUserIDChangePasswordNotFound describes a response with status code 404, with default header values.

User not found in the system.
*/
type PutSecurityUsersByUserIDChangePasswordNotFound struct {
}

// IsSuccess returns true when this put security users by user Id change password not found response has a 2xx status code
func (o *PutSecurityUsersByUserIDChangePasswordNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put security users by user Id change password not found response has a 3xx status code
func (o *PutSecurityUsersByUserIDChangePasswordNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put security users by user Id change password not found response has a 4xx status code
func (o *PutSecurityUsersByUserIDChangePasswordNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put security users by user Id change password not found response has a 5xx status code
func (o *PutSecurityUsersByUserIDChangePasswordNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put security users by user Id change password not found response a status code equal to that given
func (o *PutSecurityUsersByUserIDChangePasswordNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put security users by user Id change password not found response
func (o *PutSecurityUsersByUserIDChangePasswordNotFound) Code() int {
	return 404
}

func (o *PutSecurityUsersByUserIDChangePasswordNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/security/users/{userId}/change-password][%d] putSecurityUsersByUserIdChangePasswordNotFound", 404)
}

func (o *PutSecurityUsersByUserIDChangePasswordNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/security/users/{userId}/change-password][%d] putSecurityUsersByUserIdChangePasswordNotFound", 404)
}

func (o *PutSecurityUsersByUserIDChangePasswordNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
