// Code generated by go-swagger; DO NOT EDIT.

package security_management_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteSecurityUsersByUseridReader is a Reader for the DeleteSecurityUsersByUserid structure.
type DeleteSecurityUsersByUseridReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSecurityUsersByUseridReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewDeleteSecurityUsersByUseridBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteSecurityUsersByUseridForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteSecurityUsersByUseridNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/security/users/{userId}] DeleteSecurityUsersByUserid", response, response.Code())
	}
}

// NewDeleteSecurityUsersByUseridBadRequest creates a DeleteSecurityUsersByUseridBadRequest with default headers values
func NewDeleteSecurityUsersByUseridBadRequest() *DeleteSecurityUsersByUseridBadRequest {
	return &DeleteSecurityUsersByUseridBadRequest{}
}

/*
DeleteSecurityUsersByUseridBadRequest describes a response with status code 400, with default header values.

There was problem deleting a user. Consult the response body for more details
*/
type DeleteSecurityUsersByUseridBadRequest struct {
}

// IsSuccess returns true when this delete security users by userid bad request response has a 2xx status code
func (o *DeleteSecurityUsersByUseridBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete security users by userid bad request response has a 3xx status code
func (o *DeleteSecurityUsersByUseridBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete security users by userid bad request response has a 4xx status code
func (o *DeleteSecurityUsersByUseridBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete security users by userid bad request response has a 5xx status code
func (o *DeleteSecurityUsersByUseridBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete security users by userid bad request response a status code equal to that given
func (o *DeleteSecurityUsersByUseridBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete security users by userid bad request response
func (o *DeleteSecurityUsersByUseridBadRequest) Code() int {
	return 400
}

func (o *DeleteSecurityUsersByUseridBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/security/users/{userId}][%d] deleteSecurityUsersByUseridBadRequest", 400)
}

func (o *DeleteSecurityUsersByUseridBadRequest) String() string {
	return fmt.Sprintf("[DELETE /v1/security/users/{userId}][%d] deleteSecurityUsersByUseridBadRequest", 400)
}

func (o *DeleteSecurityUsersByUseridBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSecurityUsersByUseridForbidden creates a DeleteSecurityUsersByUseridForbidden with default headers values
func NewDeleteSecurityUsersByUseridForbidden() *DeleteSecurityUsersByUseridForbidden {
	return &DeleteSecurityUsersByUseridForbidden{}
}

/*
DeleteSecurityUsersByUseridForbidden describes a response with status code 403, with default header values.

The user does not have permission to perform the operation.
*/
type DeleteSecurityUsersByUseridForbidden struct {
}

// IsSuccess returns true when this delete security users by userid forbidden response has a 2xx status code
func (o *DeleteSecurityUsersByUseridForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete security users by userid forbidden response has a 3xx status code
func (o *DeleteSecurityUsersByUseridForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete security users by userid forbidden response has a 4xx status code
func (o *DeleteSecurityUsersByUseridForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete security users by userid forbidden response has a 5xx status code
func (o *DeleteSecurityUsersByUseridForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete security users by userid forbidden response a status code equal to that given
func (o *DeleteSecurityUsersByUseridForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete security users by userid forbidden response
func (o *DeleteSecurityUsersByUseridForbidden) Code() int {
	return 403
}

func (o *DeleteSecurityUsersByUseridForbidden) Error() string {
	return fmt.Sprintf("[DELETE /v1/security/users/{userId}][%d] deleteSecurityUsersByUseridForbidden", 403)
}

func (o *DeleteSecurityUsersByUseridForbidden) String() string {
	return fmt.Sprintf("[DELETE /v1/security/users/{userId}][%d] deleteSecurityUsersByUseridForbidden", 403)
}

func (o *DeleteSecurityUsersByUseridForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSecurityUsersByUseridNotFound creates a DeleteSecurityUsersByUseridNotFound with default headers values
func NewDeleteSecurityUsersByUseridNotFound() *DeleteSecurityUsersByUseridNotFound {
	return &DeleteSecurityUsersByUseridNotFound{}
}

/*
DeleteSecurityUsersByUseridNotFound describes a response with status code 404, with default header values.

User or user source not found in the system.
*/
type DeleteSecurityUsersByUseridNotFound struct {
}

// IsSuccess returns true when this delete security users by userid not found response has a 2xx status code
func (o *DeleteSecurityUsersByUseridNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete security users by userid not found response has a 3xx status code
func (o *DeleteSecurityUsersByUseridNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete security users by userid not found response has a 4xx status code
func (o *DeleteSecurityUsersByUseridNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete security users by userid not found response has a 5xx status code
func (o *DeleteSecurityUsersByUseridNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete security users by userid not found response a status code equal to that given
func (o *DeleteSecurityUsersByUseridNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete security users by userid not found response
func (o *DeleteSecurityUsersByUseridNotFound) Code() int {
	return 404
}

func (o *DeleteSecurityUsersByUseridNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/security/users/{userId}][%d] deleteSecurityUsersByUseridNotFound", 404)
}

func (o *DeleteSecurityUsersByUseridNotFound) String() string {
	return fmt.Sprintf("[DELETE /v1/security/users/{userId}][%d] deleteSecurityUsersByUseridNotFound", 404)
}

func (o *DeleteSecurityUsersByUseridNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
