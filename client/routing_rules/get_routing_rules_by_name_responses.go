// Code generated by go-swagger; DO NOT EDIT.

package routing_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dmji/go-nexus/models"
)

// GetRoutingRulesByNameReader is a Reader for the GetRoutingRulesByName structure.
type GetRoutingRulesByNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRoutingRulesByNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRoutingRulesByNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetRoutingRulesByNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRoutingRulesByNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/routing-rules/{name}] GetRoutingRulesByName", response, response.Code())
	}
}

// NewGetRoutingRulesByNameOK creates a GetRoutingRulesByNameOK with default headers values
func NewGetRoutingRulesByNameOK() *GetRoutingRulesByNameOK {
	return &GetRoutingRulesByNameOK{}
}

/*
GetRoutingRulesByNameOK describes a response with status code 200, with default header values.

successful operation
*/
type GetRoutingRulesByNameOK struct {
	Payload *models.RoutingRuleXO
}

// IsSuccess returns true when this get routing rules by name o k response has a 2xx status code
func (o *GetRoutingRulesByNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get routing rules by name o k response has a 3xx status code
func (o *GetRoutingRulesByNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing rules by name o k response has a 4xx status code
func (o *GetRoutingRulesByNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing rules by name o k response has a 5xx status code
func (o *GetRoutingRulesByNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing rules by name o k response a status code equal to that given
func (o *GetRoutingRulesByNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get routing rules by name o k response
func (o *GetRoutingRulesByNameOK) Code() int {
	return 200
}

func (o *GetRoutingRulesByNameOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routing-rules/{name}][%d] getRoutingRulesByNameOK %s", 200, payload)
}

func (o *GetRoutingRulesByNameOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routing-rules/{name}][%d] getRoutingRulesByNameOK %s", 200, payload)
}

func (o *GetRoutingRulesByNameOK) GetPayload() *models.RoutingRuleXO {
	return o.Payload
}

func (o *GetRoutingRulesByNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RoutingRuleXO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingRulesByNameForbidden creates a GetRoutingRulesByNameForbidden with default headers values
func NewGetRoutingRulesByNameForbidden() *GetRoutingRulesByNameForbidden {
	return &GetRoutingRulesByNameForbidden{}
}

/*
GetRoutingRulesByNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions to read routing rules
*/
type GetRoutingRulesByNameForbidden struct {
}

// IsSuccess returns true when this get routing rules by name forbidden response has a 2xx status code
func (o *GetRoutingRulesByNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing rules by name forbidden response has a 3xx status code
func (o *GetRoutingRulesByNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing rules by name forbidden response has a 4xx status code
func (o *GetRoutingRulesByNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing rules by name forbidden response has a 5xx status code
func (o *GetRoutingRulesByNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing rules by name forbidden response a status code equal to that given
func (o *GetRoutingRulesByNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get routing rules by name forbidden response
func (o *GetRoutingRulesByNameForbidden) Code() int {
	return 403
}

func (o *GetRoutingRulesByNameForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/routing-rules/{name}][%d] getRoutingRulesByNameForbidden", 403)
}

func (o *GetRoutingRulesByNameForbidden) String() string {
	return fmt.Sprintf("[GET /v1/routing-rules/{name}][%d] getRoutingRulesByNameForbidden", 403)
}

func (o *GetRoutingRulesByNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRoutingRulesByNameNotFound creates a GetRoutingRulesByNameNotFound with default headers values
func NewGetRoutingRulesByNameNotFound() *GetRoutingRulesByNameNotFound {
	return &GetRoutingRulesByNameNotFound{}
}

/*
GetRoutingRulesByNameNotFound describes a response with status code 404, with default header values.

Routing rule not found
*/
type GetRoutingRulesByNameNotFound struct {
}

// IsSuccess returns true when this get routing rules by name not found response has a 2xx status code
func (o *GetRoutingRulesByNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing rules by name not found response has a 3xx status code
func (o *GetRoutingRulesByNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing rules by name not found response has a 4xx status code
func (o *GetRoutingRulesByNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing rules by name not found response has a 5xx status code
func (o *GetRoutingRulesByNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing rules by name not found response a status code equal to that given
func (o *GetRoutingRulesByNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get routing rules by name not found response
func (o *GetRoutingRulesByNameNotFound) Code() int {
	return 404
}

func (o *GetRoutingRulesByNameNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/routing-rules/{name}][%d] getRoutingRulesByNameNotFound", 404)
}

func (o *GetRoutingRulesByNameNotFound) String() string {
	return fmt.Sprintf("[GET /v1/routing-rules/{name}][%d] getRoutingRulesByNameNotFound", 404)
}

func (o *GetRoutingRulesByNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
