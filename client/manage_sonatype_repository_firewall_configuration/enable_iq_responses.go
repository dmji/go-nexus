// Code generated by go-swagger; DO NOT EDIT.

package manage_sonatype_repository_firewall_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// EnableIqReader is a Reader for the EnableIq structure.
type EnableIqReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnableIqReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewEnableIqNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEnableIqBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/iq/enable] enableIq", response, response.Code())
	}
}

// NewEnableIqNoContent creates a EnableIqNoContent with default headers values
func NewEnableIqNoContent() *EnableIqNoContent {
	return &EnableIqNoContent{}
}

/*
EnableIqNoContent describes a response with status code 204, with default header values.

Sonatype Repository Firewall has been enabled
*/
type EnableIqNoContent struct {
}

// IsSuccess returns true when this enable iq no content response has a 2xx status code
func (o *EnableIqNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enable iq no content response has a 3xx status code
func (o *EnableIqNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable iq no content response has a 4xx status code
func (o *EnableIqNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this enable iq no content response has a 5xx status code
func (o *EnableIqNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this enable iq no content response a status code equal to that given
func (o *EnableIqNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the enable iq no content response
func (o *EnableIqNoContent) Code() int {
	return 204
}

func (o *EnableIqNoContent) Error() string {
	return fmt.Sprintf("[POST /v1/iq/enable][%d] enableIqNoContent", 204)
}

func (o *EnableIqNoContent) String() string {
	return fmt.Sprintf("[POST /v1/iq/enable][%d] enableIqNoContent", 204)
}

func (o *EnableIqNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnableIqBadRequest creates a EnableIqBadRequest with default headers values
func NewEnableIqBadRequest() *EnableIqBadRequest {
	return &EnableIqBadRequest{}
}

/*
EnableIqBadRequest describes a response with status code 400, with default header values.

Sonatype Repository Firewall connection not configured
*/
type EnableIqBadRequest struct {
}

// IsSuccess returns true when this enable iq bad request response has a 2xx status code
func (o *EnableIqBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable iq bad request response has a 3xx status code
func (o *EnableIqBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable iq bad request response has a 4xx status code
func (o *EnableIqBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable iq bad request response has a 5xx status code
func (o *EnableIqBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this enable iq bad request response a status code equal to that given
func (o *EnableIqBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the enable iq bad request response
func (o *EnableIqBadRequest) Code() int {
	return 400
}

func (o *EnableIqBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/iq/enable][%d] enableIqBadRequest", 400)
}

func (o *EnableIqBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/iq/enable][%d] enableIqBadRequest", 400)
}

func (o *EnableIqBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
