// Code generated by go-swagger; DO NOT EDIT.

package security_management_secrets_encryption

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutSecretsEncryptionReEncryptReader is a Reader for the PutSecretsEncryptionReEncrypt structure.
type PutSecretsEncryptionReEncryptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSecretsEncryptionReEncryptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPutSecretsEncryptionReEncryptAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutSecretsEncryptionReEncryptBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutSecretsEncryptionReEncryptForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutSecretsEncryptionReEncryptConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/secrets/encryption/re-encrypt] PutSecretsEncryptionReEncrypt", response, response.Code())
	}
}

// NewPutSecretsEncryptionReEncryptAccepted creates a PutSecretsEncryptionReEncryptAccepted with default headers values
func NewPutSecretsEncryptionReEncryptAccepted() *PutSecretsEncryptionReEncryptAccepted {
	return &PutSecretsEncryptionReEncryptAccepted{}
}

/*
PutSecretsEncryptionReEncryptAccepted describes a response with status code 202, with default header values.

Re-encrypt task successfully submitted
*/
type PutSecretsEncryptionReEncryptAccepted struct {
}

// IsSuccess returns true when this put secrets encryption re encrypt accepted response has a 2xx status code
func (o *PutSecretsEncryptionReEncryptAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put secrets encryption re encrypt accepted response has a 3xx status code
func (o *PutSecretsEncryptionReEncryptAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put secrets encryption re encrypt accepted response has a 4xx status code
func (o *PutSecretsEncryptionReEncryptAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this put secrets encryption re encrypt accepted response has a 5xx status code
func (o *PutSecretsEncryptionReEncryptAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this put secrets encryption re encrypt accepted response a status code equal to that given
func (o *PutSecretsEncryptionReEncryptAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the put secrets encryption re encrypt accepted response
func (o *PutSecretsEncryptionReEncryptAccepted) Code() int {
	return 202
}

func (o *PutSecretsEncryptionReEncryptAccepted) Error() string {
	return fmt.Sprintf("[PUT /v1/secrets/encryption/re-encrypt][%d] putSecretsEncryptionReEncryptAccepted", 202)
}

func (o *PutSecretsEncryptionReEncryptAccepted) String() string {
	return fmt.Sprintf("[PUT /v1/secrets/encryption/re-encrypt][%d] putSecretsEncryptionReEncryptAccepted", 202)
}

func (o *PutSecretsEncryptionReEncryptAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSecretsEncryptionReEncryptBadRequest creates a PutSecretsEncryptionReEncryptBadRequest with default headers values
func NewPutSecretsEncryptionReEncryptBadRequest() *PutSecretsEncryptionReEncryptBadRequest {
	return &PutSecretsEncryptionReEncryptBadRequest{}
}

/*
PutSecretsEncryptionReEncryptBadRequest describes a response with status code 400, with default header values.

Invalid request. See the response for more information. Possible causes: The key is not available to all nodes, upgrade needed or empty key id.
*/
type PutSecretsEncryptionReEncryptBadRequest struct {
}

// IsSuccess returns true when this put secrets encryption re encrypt bad request response has a 2xx status code
func (o *PutSecretsEncryptionReEncryptBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put secrets encryption re encrypt bad request response has a 3xx status code
func (o *PutSecretsEncryptionReEncryptBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put secrets encryption re encrypt bad request response has a 4xx status code
func (o *PutSecretsEncryptionReEncryptBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put secrets encryption re encrypt bad request response has a 5xx status code
func (o *PutSecretsEncryptionReEncryptBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put secrets encryption re encrypt bad request response a status code equal to that given
func (o *PutSecretsEncryptionReEncryptBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put secrets encryption re encrypt bad request response
func (o *PutSecretsEncryptionReEncryptBadRequest) Code() int {
	return 400
}

func (o *PutSecretsEncryptionReEncryptBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/secrets/encryption/re-encrypt][%d] putSecretsEncryptionReEncryptBadRequest", 400)
}

func (o *PutSecretsEncryptionReEncryptBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/secrets/encryption/re-encrypt][%d] putSecretsEncryptionReEncryptBadRequest", 400)
}

func (o *PutSecretsEncryptionReEncryptBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSecretsEncryptionReEncryptForbidden creates a PutSecretsEncryptionReEncryptForbidden with default headers values
func NewPutSecretsEncryptionReEncryptForbidden() *PutSecretsEncryptionReEncryptForbidden {
	return &PutSecretsEncryptionReEncryptForbidden{}
}

/*
PutSecretsEncryptionReEncryptForbidden describes a response with status code 403, with default header values.

Insufficient permissions to re-encrypt secrets
*/
type PutSecretsEncryptionReEncryptForbidden struct {
}

// IsSuccess returns true when this put secrets encryption re encrypt forbidden response has a 2xx status code
func (o *PutSecretsEncryptionReEncryptForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put secrets encryption re encrypt forbidden response has a 3xx status code
func (o *PutSecretsEncryptionReEncryptForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put secrets encryption re encrypt forbidden response has a 4xx status code
func (o *PutSecretsEncryptionReEncryptForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put secrets encryption re encrypt forbidden response has a 5xx status code
func (o *PutSecretsEncryptionReEncryptForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put secrets encryption re encrypt forbidden response a status code equal to that given
func (o *PutSecretsEncryptionReEncryptForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put secrets encryption re encrypt forbidden response
func (o *PutSecretsEncryptionReEncryptForbidden) Code() int {
	return 403
}

func (o *PutSecretsEncryptionReEncryptForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/secrets/encryption/re-encrypt][%d] putSecretsEncryptionReEncryptForbidden", 403)
}

func (o *PutSecretsEncryptionReEncryptForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/secrets/encryption/re-encrypt][%d] putSecretsEncryptionReEncryptForbidden", 403)
}

func (o *PutSecretsEncryptionReEncryptForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSecretsEncryptionReEncryptConflict creates a PutSecretsEncryptionReEncryptConflict with default headers values
func NewPutSecretsEncryptionReEncryptConflict() *PutSecretsEncryptionReEncryptConflict {
	return &PutSecretsEncryptionReEncryptConflict{}
}

/*
PutSecretsEncryptionReEncryptConflict describes a response with status code 409, with default header values.

Re-encryption task in progress.
*/
type PutSecretsEncryptionReEncryptConflict struct {
}

// IsSuccess returns true when this put secrets encryption re encrypt conflict response has a 2xx status code
func (o *PutSecretsEncryptionReEncryptConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put secrets encryption re encrypt conflict response has a 3xx status code
func (o *PutSecretsEncryptionReEncryptConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put secrets encryption re encrypt conflict response has a 4xx status code
func (o *PutSecretsEncryptionReEncryptConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this put secrets encryption re encrypt conflict response has a 5xx status code
func (o *PutSecretsEncryptionReEncryptConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this put secrets encryption re encrypt conflict response a status code equal to that given
func (o *PutSecretsEncryptionReEncryptConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the put secrets encryption re encrypt conflict response
func (o *PutSecretsEncryptionReEncryptConflict) Code() int {
	return 409
}

func (o *PutSecretsEncryptionReEncryptConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/secrets/encryption/re-encrypt][%d] putSecretsEncryptionReEncryptConflict", 409)
}

func (o *PutSecretsEncryptionReEncryptConflict) String() string {
	return fmt.Sprintf("[PUT /v1/secrets/encryption/re-encrypt][%d] putSecretsEncryptionReEncryptConflict", 409)
}

func (o *PutSecretsEncryptionReEncryptConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
