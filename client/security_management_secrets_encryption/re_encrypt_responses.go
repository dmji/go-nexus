// Code generated by go-swagger; DO NOT EDIT.

package security_management_secrets_encryption

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ReEncryptReader is a Reader for the ReEncrypt structure.
type ReEncryptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReEncryptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewReEncryptAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReEncryptBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReEncryptForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewReEncryptConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/secrets/encryption/re-encrypt] reEncrypt", response, response.Code())
	}
}

// NewReEncryptAccepted creates a ReEncryptAccepted with default headers values
func NewReEncryptAccepted() *ReEncryptAccepted {
	return &ReEncryptAccepted{}
}

/*
ReEncryptAccepted describes a response with status code 202, with default header values.

Re-encrypt task successfully submitted
*/
type ReEncryptAccepted struct {
}

// IsSuccess returns true when this re encrypt accepted response has a 2xx status code
func (o *ReEncryptAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this re encrypt accepted response has a 3xx status code
func (o *ReEncryptAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this re encrypt accepted response has a 4xx status code
func (o *ReEncryptAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this re encrypt accepted response has a 5xx status code
func (o *ReEncryptAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this re encrypt accepted response a status code equal to that given
func (o *ReEncryptAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the re encrypt accepted response
func (o *ReEncryptAccepted) Code() int {
	return 202
}

func (o *ReEncryptAccepted) Error() string {
	return fmt.Sprintf("[PUT /v1/secrets/encryption/re-encrypt][%d] reEncryptAccepted", 202)
}

func (o *ReEncryptAccepted) String() string {
	return fmt.Sprintf("[PUT /v1/secrets/encryption/re-encrypt][%d] reEncryptAccepted", 202)
}

func (o *ReEncryptAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReEncryptBadRequest creates a ReEncryptBadRequest with default headers values
func NewReEncryptBadRequest() *ReEncryptBadRequest {
	return &ReEncryptBadRequest{}
}

/*
ReEncryptBadRequest describes a response with status code 400, with default header values.

Invalid request. See the response for more information. Possible causes: The key is not available to all nodes, upgrade needed or empty key id.
*/
type ReEncryptBadRequest struct {
}

// IsSuccess returns true when this re encrypt bad request response has a 2xx status code
func (o *ReEncryptBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this re encrypt bad request response has a 3xx status code
func (o *ReEncryptBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this re encrypt bad request response has a 4xx status code
func (o *ReEncryptBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this re encrypt bad request response has a 5xx status code
func (o *ReEncryptBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this re encrypt bad request response a status code equal to that given
func (o *ReEncryptBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the re encrypt bad request response
func (o *ReEncryptBadRequest) Code() int {
	return 400
}

func (o *ReEncryptBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/secrets/encryption/re-encrypt][%d] reEncryptBadRequest", 400)
}

func (o *ReEncryptBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/secrets/encryption/re-encrypt][%d] reEncryptBadRequest", 400)
}

func (o *ReEncryptBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReEncryptForbidden creates a ReEncryptForbidden with default headers values
func NewReEncryptForbidden() *ReEncryptForbidden {
	return &ReEncryptForbidden{}
}

/*
ReEncryptForbidden describes a response with status code 403, with default header values.

Insufficient permissions to re-encrypt secrets
*/
type ReEncryptForbidden struct {
}

// IsSuccess returns true when this re encrypt forbidden response has a 2xx status code
func (o *ReEncryptForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this re encrypt forbidden response has a 3xx status code
func (o *ReEncryptForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this re encrypt forbidden response has a 4xx status code
func (o *ReEncryptForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this re encrypt forbidden response has a 5xx status code
func (o *ReEncryptForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this re encrypt forbidden response a status code equal to that given
func (o *ReEncryptForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the re encrypt forbidden response
func (o *ReEncryptForbidden) Code() int {
	return 403
}

func (o *ReEncryptForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/secrets/encryption/re-encrypt][%d] reEncryptForbidden", 403)
}

func (o *ReEncryptForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/secrets/encryption/re-encrypt][%d] reEncryptForbidden", 403)
}

func (o *ReEncryptForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReEncryptConflict creates a ReEncryptConflict with default headers values
func NewReEncryptConflict() *ReEncryptConflict {
	return &ReEncryptConflict{}
}

/*
ReEncryptConflict describes a response with status code 409, with default header values.

Re-encryption task in progress.
*/
type ReEncryptConflict struct {
}

// IsSuccess returns true when this re encrypt conflict response has a 2xx status code
func (o *ReEncryptConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this re encrypt conflict response has a 3xx status code
func (o *ReEncryptConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this re encrypt conflict response has a 4xx status code
func (o *ReEncryptConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this re encrypt conflict response has a 5xx status code
func (o *ReEncryptConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this re encrypt conflict response a status code equal to that given
func (o *ReEncryptConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the re encrypt conflict response
func (o *ReEncryptConflict) Code() int {
	return 409
}

func (o *ReEncryptConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/secrets/encryption/re-encrypt][%d] reEncryptConflict", 409)
}

func (o *ReEncryptConflict) String() string {
	return fmt.Sprintf("[PUT /v1/secrets/encryption/re-encrypt][%d] reEncryptConflict", 409)
}

func (o *ReEncryptConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
