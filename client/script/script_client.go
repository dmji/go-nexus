// Code generated by go-swagger; DO NOT EDIT.

package script

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new script API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new script API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new script API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for script API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeTextPlain sets the Content-Type header to "text/plain".
func WithContentTypeTextPlain(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"text/plain"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteScriptByName(params *DeleteScriptByNameParams, opts ...ClientOption) (*DeleteScriptByNameNoContent, error)

	GetScript(params *GetScriptParams, opts ...ClientOption) (*GetScriptOK, error)

	GetScriptByName(params *GetScriptByNameParams, opts ...ClientOption) (*GetScriptByNameOK, error)

	PostScript(params *PostScriptParams, opts ...ClientOption) (*PostScriptNoContent, error)

	PostScriptByNameRun(params *PostScriptByNameRunParams, opts ...ClientOption) (*PostScriptByNameRunOK, error)

	PutScriptByName(params *PutScriptByNameParams, opts ...ClientOption) (*PutScriptByNameNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteScriptByName deletes stored script by name
*/
func (a *Client) DeleteScriptByName(params *DeleteScriptByNameParams, opts ...ClientOption) (*DeleteScriptByNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScriptByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteScriptByName",
		Method:             "DELETE",
		PathPattern:        "/v1/script/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteScriptByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScriptByNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteScriptByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetScript lists all stored scripts
*/
func (a *Client) GetScript(params *GetScriptParams, opts ...ClientOption) (*GetScriptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetScript",
		Method:             "GET",
		PathPattern:        "/v1/script",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetScriptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScriptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScript: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetScriptByName reads stored script by name
*/
func (a *Client) GetScriptByName(params *GetScriptByNameParams, opts ...ClientOption) (*GetScriptByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScriptByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetScriptByName",
		Method:             "GET",
		PathPattern:        "/v1/script/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetScriptByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScriptByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScriptByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostScript adds a new script
*/
func (a *Client) PostScript(params *PostScriptParams, opts ...ClientOption) (*PostScriptNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostScript",
		Method:             "POST",
		PathPattern:        "/v1/script",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostScriptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostScriptNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostScript: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostScriptByNameRun runs stored script by name
*/
func (a *Client) PostScriptByNameRun(params *PostScriptByNameRunParams, opts ...ClientOption) (*PostScriptByNameRunOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostScriptByNameRunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostScriptByNameRun",
		Method:             "POST",
		PathPattern:        "/v1/script/{name}/run",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/plain", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostScriptByNameRunReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostScriptByNameRunOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostScriptByNameRun: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutScriptByName updates stored script by name
*/
func (a *Client) PutScriptByName(params *PutScriptByNameParams, opts ...ClientOption) (*PutScriptByNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutScriptByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutScriptByName",
		Method:             "PUT",
		PathPattern:        "/v1/script/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutScriptByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutScriptByNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutScriptByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
