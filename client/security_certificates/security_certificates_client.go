// Code generated by go-swagger; DO NOT EDIT.

package security_certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new security certificates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new security certificates API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new security certificates API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for security certificates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteSecuritySslTruststoreByID(params *DeleteSecuritySslTruststoreByIDParams, opts ...ClientOption) error

	GetSecuritySsl(params *GetSecuritySslParams, opts ...ClientOption) (*GetSecuritySslOK, error)

	GetSecuritySslTruststore(params *GetSecuritySslTruststoreParams, opts ...ClientOption) (*GetSecuritySslTruststoreOK, error)

	PostSecuritySslTruststore(params *PostSecuritySslTruststoreParams, opts ...ClientOption) (*PostSecuritySslTruststoreCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteSecuritySslTruststoreByID removes a certificate in the trust store
*/
func (a *Client) DeleteSecuritySslTruststoreByID(params *DeleteSecuritySslTruststoreByIDParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSecuritySslTruststoreByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSecuritySslTruststoreById",
		Method:             "DELETE",
		PathPattern:        "/v1/security/ssl/truststore/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSecuritySslTruststoreByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetSecuritySsl helpers method to retrieve certificate details from a remote system
*/
func (a *Client) GetSecuritySsl(params *GetSecuritySslParams, opts ...ClientOption) (*GetSecuritySslOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecuritySslParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSecuritySsl",
		Method:             "GET",
		PathPattern:        "/v1/security/ssl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSecuritySslReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecuritySslOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSecuritySsl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSecuritySslTruststore retrieves a list of certificates added to the trust store
*/
func (a *Client) GetSecuritySslTruststore(params *GetSecuritySslTruststoreParams, opts ...ClientOption) (*GetSecuritySslTruststoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecuritySslTruststoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSecuritySslTruststore",
		Method:             "GET",
		PathPattern:        "/v1/security/ssl/truststore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSecuritySslTruststoreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecuritySslTruststoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSecuritySslTruststore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSecuritySslTruststore adds a certificate to the trust store
*/
func (a *Client) PostSecuritySslTruststore(params *PostSecuritySslTruststoreParams, opts ...ClientOption) (*PostSecuritySslTruststoreCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSecuritySslTruststoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSecuritySslTruststore",
		Method:             "POST",
		PathPattern:        "/v1/security/ssl/truststore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSecuritySslTruststoreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSecuritySslTruststoreCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSecuritySslTruststore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
