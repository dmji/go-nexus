// Code generated by go-swagger; DO NOT EDIT.

package security_certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSecuritySslParams creates a new GetSecuritySslParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSecuritySslParams() *GetSecuritySslParams {
	return &GetSecuritySslParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSecuritySslParamsWithTimeout creates a new GetSecuritySslParams object
// with the ability to set a timeout on a request.
func NewGetSecuritySslParamsWithTimeout(timeout time.Duration) *GetSecuritySslParams {
	return &GetSecuritySslParams{
		timeout: timeout,
	}
}

// NewGetSecuritySslParamsWithContext creates a new GetSecuritySslParams object
// with the ability to set a context for a request.
func NewGetSecuritySslParamsWithContext(ctx context.Context) *GetSecuritySslParams {
	return &GetSecuritySslParams{
		Context: ctx,
	}
}

// NewGetSecuritySslParamsWithHTTPClient creates a new GetSecuritySslParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSecuritySslParamsWithHTTPClient(client *http.Client) *GetSecuritySslParams {
	return &GetSecuritySslParams{
		HTTPClient: client,
	}
}

/*
GetSecuritySslParams contains all the parameters to send to the API endpoint

	for the get security ssl operation.

	Typically these are written to a http.Request.
*/
type GetSecuritySslParams struct {

	/* Host.

	   The remote system's host name
	*/
	Host string

	/* Port.

	   The port on the remote system to connect to

	   Format: int32
	   Default: 443
	*/
	Port *int32

	/* ProtocolHint.

	   An optional hint of the protocol to try for the connection
	*/
	ProtocolHint *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get security ssl params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSecuritySslParams) WithDefaults() *GetSecuritySslParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get security ssl params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSecuritySslParams) SetDefaults() {
	var (
		portDefault = int32(443)
	)

	val := GetSecuritySslParams{
		Port: &portDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get security ssl params
func (o *GetSecuritySslParams) WithTimeout(timeout time.Duration) *GetSecuritySslParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get security ssl params
func (o *GetSecuritySslParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get security ssl params
func (o *GetSecuritySslParams) WithContext(ctx context.Context) *GetSecuritySslParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get security ssl params
func (o *GetSecuritySslParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get security ssl params
func (o *GetSecuritySslParams) WithHTTPClient(client *http.Client) *GetSecuritySslParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get security ssl params
func (o *GetSecuritySslParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHost adds the host to the get security ssl params
func (o *GetSecuritySslParams) WithHost(host string) *GetSecuritySslParams {
	o.SetHost(host)
	return o
}

// SetHost adds the host to the get security ssl params
func (o *GetSecuritySslParams) SetHost(host string) {
	o.Host = host
}

// WithPort adds the port to the get security ssl params
func (o *GetSecuritySslParams) WithPort(port *int32) *GetSecuritySslParams {
	o.SetPort(port)
	return o
}

// SetPort adds the port to the get security ssl params
func (o *GetSecuritySslParams) SetPort(port *int32) {
	o.Port = port
}

// WithProtocolHint adds the protocolHint to the get security ssl params
func (o *GetSecuritySslParams) WithProtocolHint(protocolHint *string) *GetSecuritySslParams {
	o.SetProtocolHint(protocolHint)
	return o
}

// SetProtocolHint adds the protocolHint to the get security ssl params
func (o *GetSecuritySslParams) SetProtocolHint(protocolHint *string) {
	o.ProtocolHint = protocolHint
}

// WriteToRequest writes these params to a swagger request
func (o *GetSecuritySslParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param host
	qrHost := o.Host
	qHost := qrHost
	if qHost != "" {

		if err := r.SetQueryParam("host", qHost); err != nil {
			return err
		}
	}

	if o.Port != nil {

		// query param port
		var qrPort int32

		if o.Port != nil {
			qrPort = *o.Port
		}
		qPort := swag.FormatInt32(qrPort)
		if qPort != "" {

			if err := r.SetQueryParam("port", qPort); err != nil {
				return err
			}
		}
	}

	if o.ProtocolHint != nil {

		// query param protocolHint
		var qrProtocolHint string

		if o.ProtocolHint != nil {
			qrProtocolHint = *o.ProtocolHint
		}
		qProtocolHint := qrProtocolHint
		if qProtocolHint != "" {

			if err := r.SetQueryParam("protocolHint", qProtocolHint); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
