// Code generated by go-swagger; DO NOT EDIT.

package security_certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dmji/go-nexus/models"
)

// PostSecuritySslTruststoreReader is a Reader for the PostSecuritySslTruststore structure.
type PostSecuritySslTruststoreReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostSecuritySslTruststoreReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostSecuritySslTruststoreCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPostSecuritySslTruststoreForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostSecuritySslTruststoreConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/security/ssl/truststore] PostSecuritySslTruststore", response, response.Code())
	}
}

// NewPostSecuritySslTruststoreCreated creates a PostSecuritySslTruststoreCreated with default headers values
func NewPostSecuritySslTruststoreCreated() *PostSecuritySslTruststoreCreated {
	return &PostSecuritySslTruststoreCreated{}
}

/*
PostSecuritySslTruststoreCreated describes a response with status code 201, with default header values.

The certificate was successfully added.
*/
type PostSecuritySslTruststoreCreated struct {
	Payload *models.APICertificate
}

// IsSuccess returns true when this post security ssl truststore created response has a 2xx status code
func (o *PostSecuritySslTruststoreCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post security ssl truststore created response has a 3xx status code
func (o *PostSecuritySslTruststoreCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post security ssl truststore created response has a 4xx status code
func (o *PostSecuritySslTruststoreCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post security ssl truststore created response has a 5xx status code
func (o *PostSecuritySslTruststoreCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post security ssl truststore created response a status code equal to that given
func (o *PostSecuritySslTruststoreCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post security ssl truststore created response
func (o *PostSecuritySslTruststoreCreated) Code() int {
	return 201
}

func (o *PostSecuritySslTruststoreCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/security/ssl/truststore][%d] postSecuritySslTruststoreCreated %s", 201, payload)
}

func (o *PostSecuritySslTruststoreCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/security/ssl/truststore][%d] postSecuritySslTruststoreCreated %s", 201, payload)
}

func (o *PostSecuritySslTruststoreCreated) GetPayload() *models.APICertificate {
	return o.Payload
}

func (o *PostSecuritySslTruststoreCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APICertificate)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSecuritySslTruststoreForbidden creates a PostSecuritySslTruststoreForbidden with default headers values
func NewPostSecuritySslTruststoreForbidden() *PostSecuritySslTruststoreForbidden {
	return &PostSecuritySslTruststoreForbidden{}
}

/*
PostSecuritySslTruststoreForbidden describes a response with status code 403, with default header values.

Insufficient permissions to add certificate to the trust store.
*/
type PostSecuritySslTruststoreForbidden struct {
}

// IsSuccess returns true when this post security ssl truststore forbidden response has a 2xx status code
func (o *PostSecuritySslTruststoreForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post security ssl truststore forbidden response has a 3xx status code
func (o *PostSecuritySslTruststoreForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post security ssl truststore forbidden response has a 4xx status code
func (o *PostSecuritySslTruststoreForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post security ssl truststore forbidden response has a 5xx status code
func (o *PostSecuritySslTruststoreForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post security ssl truststore forbidden response a status code equal to that given
func (o *PostSecuritySslTruststoreForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post security ssl truststore forbidden response
func (o *PostSecuritySslTruststoreForbidden) Code() int {
	return 403
}

func (o *PostSecuritySslTruststoreForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/security/ssl/truststore][%d] postSecuritySslTruststoreForbidden", 403)
}

func (o *PostSecuritySslTruststoreForbidden) String() string {
	return fmt.Sprintf("[POST /v1/security/ssl/truststore][%d] postSecuritySslTruststoreForbidden", 403)
}

func (o *PostSecuritySslTruststoreForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostSecuritySslTruststoreConflict creates a PostSecuritySslTruststoreConflict with default headers values
func NewPostSecuritySslTruststoreConflict() *PostSecuritySslTruststoreConflict {
	return &PostSecuritySslTruststoreConflict{}
}

/*
PostSecuritySslTruststoreConflict describes a response with status code 409, with default header values.

The certificate already exists in the system.
*/
type PostSecuritySslTruststoreConflict struct {
}

// IsSuccess returns true when this post security ssl truststore conflict response has a 2xx status code
func (o *PostSecuritySslTruststoreConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post security ssl truststore conflict response has a 3xx status code
func (o *PostSecuritySslTruststoreConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post security ssl truststore conflict response has a 4xx status code
func (o *PostSecuritySslTruststoreConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this post security ssl truststore conflict response has a 5xx status code
func (o *PostSecuritySslTruststoreConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this post security ssl truststore conflict response a status code equal to that given
func (o *PostSecuritySslTruststoreConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the post security ssl truststore conflict response
func (o *PostSecuritySslTruststoreConflict) Code() int {
	return 409
}

func (o *PostSecuritySslTruststoreConflict) Error() string {
	return fmt.Sprintf("[POST /v1/security/ssl/truststore][%d] postSecuritySslTruststoreConflict", 409)
}

func (o *PostSecuritySslTruststoreConflict) String() string {
	return fmt.Sprintf("[POST /v1/security/ssl/truststore][%d] postSecuritySslTruststoreConflict", 409)
}

func (o *PostSecuritySslTruststoreConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
