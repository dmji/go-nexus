// Code generated by go-swagger; DO NOT EDIT.

package security_certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"nexus/models"
)

// GetTrustStoreCertificatesReader is a Reader for the GetTrustStoreCertificates structure.
type GetTrustStoreCertificatesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTrustStoreCertificatesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTrustStoreCertificatesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetTrustStoreCertificatesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/security/ssl/truststore] getTrustStoreCertificates", response, response.Code())
	}
}

// NewGetTrustStoreCertificatesOK creates a GetTrustStoreCertificatesOK with default headers values
func NewGetTrustStoreCertificatesOK() *GetTrustStoreCertificatesOK {
	return &GetTrustStoreCertificatesOK{}
}

/*
GetTrustStoreCertificatesOK describes a response with status code 200, with default header values.

successful operation
*/
type GetTrustStoreCertificatesOK struct {
	Payload []*models.APICertificate
}

// IsSuccess returns true when this get trust store certificates o k response has a 2xx status code
func (o *GetTrustStoreCertificatesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get trust store certificates o k response has a 3xx status code
func (o *GetTrustStoreCertificatesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get trust store certificates o k response has a 4xx status code
func (o *GetTrustStoreCertificatesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get trust store certificates o k response has a 5xx status code
func (o *GetTrustStoreCertificatesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get trust store certificates o k response a status code equal to that given
func (o *GetTrustStoreCertificatesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get trust store certificates o k response
func (o *GetTrustStoreCertificatesOK) Code() int {
	return 200
}

func (o *GetTrustStoreCertificatesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/security/ssl/truststore][%d] getTrustStoreCertificatesOK %s", 200, payload)
}

func (o *GetTrustStoreCertificatesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/security/ssl/truststore][%d] getTrustStoreCertificatesOK %s", 200, payload)
}

func (o *GetTrustStoreCertificatesOK) GetPayload() []*models.APICertificate {
	return o.Payload
}

func (o *GetTrustStoreCertificatesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTrustStoreCertificatesForbidden creates a GetTrustStoreCertificatesForbidden with default headers values
func NewGetTrustStoreCertificatesForbidden() *GetTrustStoreCertificatesForbidden {
	return &GetTrustStoreCertificatesForbidden{}
}

/*
GetTrustStoreCertificatesForbidden describes a response with status code 403, with default header values.

Insufficient permissions to list certificates in the trust store.
*/
type GetTrustStoreCertificatesForbidden struct {
}

// IsSuccess returns true when this get trust store certificates forbidden response has a 2xx status code
func (o *GetTrustStoreCertificatesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get trust store certificates forbidden response has a 3xx status code
func (o *GetTrustStoreCertificatesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get trust store certificates forbidden response has a 4xx status code
func (o *GetTrustStoreCertificatesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get trust store certificates forbidden response has a 5xx status code
func (o *GetTrustStoreCertificatesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get trust store certificates forbidden response a status code equal to that given
func (o *GetTrustStoreCertificatesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get trust store certificates forbidden response
func (o *GetTrustStoreCertificatesForbidden) Code() int {
	return 403
}

func (o *GetTrustStoreCertificatesForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/security/ssl/truststore][%d] getTrustStoreCertificatesForbidden", 403)
}

func (o *GetTrustStoreCertificatesForbidden) String() string {
	return fmt.Sprintf("[GET /v1/security/ssl/truststore][%d] getTrustStoreCertificatesForbidden", 403)
}

func (o *GetTrustStoreCertificatesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
