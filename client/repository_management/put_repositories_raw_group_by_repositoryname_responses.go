// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesRawGroupByRepositorynameReader is a Reader for the PutRepositoriesRawGroupByRepositoryname structure.
type PutRepositoriesRawGroupByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesRawGroupByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesRawGroupByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesRawGroupByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesRawGroupByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesRawGroupByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/raw/group/{repositoryName}] PutRepositoriesRawGroupByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesRawGroupByRepositorynameNoContent creates a PutRepositoriesRawGroupByRepositorynameNoContent with default headers values
func NewPutRepositoriesRawGroupByRepositorynameNoContent() *PutRepositoriesRawGroupByRepositorynameNoContent {
	return &PutRepositoriesRawGroupByRepositorynameNoContent{}
}

/*
PutRepositoriesRawGroupByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesRawGroupByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories raw group by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesRawGroupByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories raw group by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesRawGroupByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories raw group by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesRawGroupByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories raw group by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesRawGroupByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories raw group by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesRawGroupByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories raw group by repositoryname no content response
func (o *PutRepositoriesRawGroupByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesRawGroupByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/group/{repositoryName}][%d] putRepositoriesRawGroupByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesRawGroupByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/group/{repositoryName}][%d] putRepositoriesRawGroupByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesRawGroupByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRawGroupByRepositorynameBadRequest creates a PutRepositoriesRawGroupByRepositorynameBadRequest with default headers values
func NewPutRepositoriesRawGroupByRepositorynameBadRequest() *PutRepositoriesRawGroupByRepositorynameBadRequest {
	return &PutRepositoriesRawGroupByRepositorynameBadRequest{}
}

/*
PutRepositoriesRawGroupByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesRawGroupByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories raw group by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesRawGroupByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories raw group by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesRawGroupByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories raw group by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesRawGroupByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories raw group by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesRawGroupByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories raw group by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesRawGroupByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories raw group by repositoryname bad request response
func (o *PutRepositoriesRawGroupByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesRawGroupByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/group/{repositoryName}][%d] putRepositoriesRawGroupByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesRawGroupByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/group/{repositoryName}][%d] putRepositoriesRawGroupByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesRawGroupByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRawGroupByRepositorynameUnauthorized creates a PutRepositoriesRawGroupByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesRawGroupByRepositorynameUnauthorized() *PutRepositoriesRawGroupByRepositorynameUnauthorized {
	return &PutRepositoriesRawGroupByRepositorynameUnauthorized{}
}

/*
PutRepositoriesRawGroupByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesRawGroupByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories raw group by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesRawGroupByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories raw group by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesRawGroupByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories raw group by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesRawGroupByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories raw group by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesRawGroupByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories raw group by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesRawGroupByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories raw group by repositoryname unauthorized response
func (o *PutRepositoriesRawGroupByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesRawGroupByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/group/{repositoryName}][%d] putRepositoriesRawGroupByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesRawGroupByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/group/{repositoryName}][%d] putRepositoriesRawGroupByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesRawGroupByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRawGroupByRepositorynameForbidden creates a PutRepositoriesRawGroupByRepositorynameForbidden with default headers values
func NewPutRepositoriesRawGroupByRepositorynameForbidden() *PutRepositoriesRawGroupByRepositorynameForbidden {
	return &PutRepositoriesRawGroupByRepositorynameForbidden{}
}

/*
PutRepositoriesRawGroupByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesRawGroupByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories raw group by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesRawGroupByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories raw group by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesRawGroupByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories raw group by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesRawGroupByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories raw group by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesRawGroupByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories raw group by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesRawGroupByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories raw group by repositoryname forbidden response
func (o *PutRepositoriesRawGroupByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesRawGroupByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/group/{repositoryName}][%d] putRepositoriesRawGroupByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesRawGroupByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/group/{repositoryName}][%d] putRepositoriesRawGroupByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesRawGroupByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
