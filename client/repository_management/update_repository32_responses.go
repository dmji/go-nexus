// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateRepository32Reader is a Reader for the UpdateRepository32 structure.
type UpdateRepository32Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRepository32Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateRepository32NoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRepository32BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRepository32Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRepository32Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/p2/proxy/{repositoryName}] updateRepository_32", response, response.Code())
	}
}

// NewUpdateRepository32NoContent creates a UpdateRepository32NoContent with default headers values
func NewUpdateRepository32NoContent() *UpdateRepository32NoContent {
	return &UpdateRepository32NoContent{}
}

/*
UpdateRepository32NoContent describes a response with status code 204, with default header values.

Repository updated
*/
type UpdateRepository32NoContent struct {
}

// IsSuccess returns true when this update repository32 no content response has a 2xx status code
func (o *UpdateRepository32NoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update repository32 no content response has a 3xx status code
func (o *UpdateRepository32NoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository32 no content response has a 4xx status code
func (o *UpdateRepository32NoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update repository32 no content response has a 5xx status code
func (o *UpdateRepository32NoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository32 no content response a status code equal to that given
func (o *UpdateRepository32NoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update repository32 no content response
func (o *UpdateRepository32NoContent) Code() int {
	return 204
}

func (o *UpdateRepository32NoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] updateRepository32NoContent", 204)
}

func (o *UpdateRepository32NoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] updateRepository32NoContent", 204)
}

func (o *UpdateRepository32NoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository32BadRequest creates a UpdateRepository32BadRequest with default headers values
func NewUpdateRepository32BadRequest() *UpdateRepository32BadRequest {
	return &UpdateRepository32BadRequest{}
}

/*
UpdateRepository32BadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateRepository32BadRequest struct {
}

// IsSuccess returns true when this update repository32 bad request response has a 2xx status code
func (o *UpdateRepository32BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository32 bad request response has a 3xx status code
func (o *UpdateRepository32BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository32 bad request response has a 4xx status code
func (o *UpdateRepository32BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository32 bad request response has a 5xx status code
func (o *UpdateRepository32BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository32 bad request response a status code equal to that given
func (o *UpdateRepository32BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update repository32 bad request response
func (o *UpdateRepository32BadRequest) Code() int {
	return 400
}

func (o *UpdateRepository32BadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] updateRepository32BadRequest", 400)
}

func (o *UpdateRepository32BadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] updateRepository32BadRequest", 400)
}

func (o *UpdateRepository32BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository32Unauthorized creates a UpdateRepository32Unauthorized with default headers values
func NewUpdateRepository32Unauthorized() *UpdateRepository32Unauthorized {
	return &UpdateRepository32Unauthorized{}
}

/*
UpdateRepository32Unauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type UpdateRepository32Unauthorized struct {
}

// IsSuccess returns true when this update repository32 unauthorized response has a 2xx status code
func (o *UpdateRepository32Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository32 unauthorized response has a 3xx status code
func (o *UpdateRepository32Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository32 unauthorized response has a 4xx status code
func (o *UpdateRepository32Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository32 unauthorized response has a 5xx status code
func (o *UpdateRepository32Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository32 unauthorized response a status code equal to that given
func (o *UpdateRepository32Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update repository32 unauthorized response
func (o *UpdateRepository32Unauthorized) Code() int {
	return 401
}

func (o *UpdateRepository32Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] updateRepository32Unauthorized", 401)
}

func (o *UpdateRepository32Unauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] updateRepository32Unauthorized", 401)
}

func (o *UpdateRepository32Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository32Forbidden creates a UpdateRepository32Forbidden with default headers values
func NewUpdateRepository32Forbidden() *UpdateRepository32Forbidden {
	return &UpdateRepository32Forbidden{}
}

/*
UpdateRepository32Forbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type UpdateRepository32Forbidden struct {
}

// IsSuccess returns true when this update repository32 forbidden response has a 2xx status code
func (o *UpdateRepository32Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository32 forbidden response has a 3xx status code
func (o *UpdateRepository32Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository32 forbidden response has a 4xx status code
func (o *UpdateRepository32Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository32 forbidden response has a 5xx status code
func (o *UpdateRepository32Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository32 forbidden response a status code equal to that given
func (o *UpdateRepository32Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update repository32 forbidden response
func (o *UpdateRepository32Forbidden) Code() int {
	return 403
}

func (o *UpdateRepository32Forbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] updateRepository32Forbidden", 403)
}

func (o *UpdateRepository32Forbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] updateRepository32Forbidden", 403)
}

func (o *UpdateRepository32Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
