// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesNpmHostedByRepositoryNameReader is a Reader for the PutRepositoriesNpmHostedByRepositoryName structure.
type PutRepositoriesNpmHostedByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesNpmHostedByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesNpmHostedByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesNpmHostedByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesNpmHostedByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesNpmHostedByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/npm/hosted/{repositoryName}] PutRepositoriesNpmHostedByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesNpmHostedByRepositoryNameNoContent creates a PutRepositoriesNpmHostedByRepositoryNameNoContent with default headers values
func NewPutRepositoriesNpmHostedByRepositoryNameNoContent() *PutRepositoriesNpmHostedByRepositoryNameNoContent {
	return &PutRepositoriesNpmHostedByRepositoryNameNoContent{}
}

/*
PutRepositoriesNpmHostedByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesNpmHostedByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories npm hosted by repository name no content response has a 2xx status code
func (o *PutRepositoriesNpmHostedByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories npm hosted by repository name no content response has a 3xx status code
func (o *PutRepositoriesNpmHostedByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories npm hosted by repository name no content response has a 4xx status code
func (o *PutRepositoriesNpmHostedByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories npm hosted by repository name no content response has a 5xx status code
func (o *PutRepositoriesNpmHostedByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories npm hosted by repository name no content response a status code equal to that given
func (o *PutRepositoriesNpmHostedByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories npm hosted by repository name no content response
func (o *PutRepositoriesNpmHostedByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesNpmHostedByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/hosted/{repositoryName}][%d] putRepositoriesNpmHostedByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesNpmHostedByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/hosted/{repositoryName}][%d] putRepositoriesNpmHostedByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesNpmHostedByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesNpmHostedByRepositoryNameBadRequest creates a PutRepositoriesNpmHostedByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesNpmHostedByRepositoryNameBadRequest() *PutRepositoriesNpmHostedByRepositoryNameBadRequest {
	return &PutRepositoriesNpmHostedByRepositoryNameBadRequest{}
}

/*
PutRepositoriesNpmHostedByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesNpmHostedByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories npm hosted by repository name bad request response has a 2xx status code
func (o *PutRepositoriesNpmHostedByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories npm hosted by repository name bad request response has a 3xx status code
func (o *PutRepositoriesNpmHostedByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories npm hosted by repository name bad request response has a 4xx status code
func (o *PutRepositoriesNpmHostedByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories npm hosted by repository name bad request response has a 5xx status code
func (o *PutRepositoriesNpmHostedByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories npm hosted by repository name bad request response a status code equal to that given
func (o *PutRepositoriesNpmHostedByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories npm hosted by repository name bad request response
func (o *PutRepositoriesNpmHostedByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesNpmHostedByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/hosted/{repositoryName}][%d] putRepositoriesNpmHostedByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesNpmHostedByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/hosted/{repositoryName}][%d] putRepositoriesNpmHostedByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesNpmHostedByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesNpmHostedByRepositoryNameUnauthorized creates a PutRepositoriesNpmHostedByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesNpmHostedByRepositoryNameUnauthorized() *PutRepositoriesNpmHostedByRepositoryNameUnauthorized {
	return &PutRepositoriesNpmHostedByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesNpmHostedByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesNpmHostedByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories npm hosted by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesNpmHostedByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories npm hosted by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesNpmHostedByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories npm hosted by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesNpmHostedByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories npm hosted by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesNpmHostedByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories npm hosted by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesNpmHostedByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories npm hosted by repository name unauthorized response
func (o *PutRepositoriesNpmHostedByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesNpmHostedByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/hosted/{repositoryName}][%d] putRepositoriesNpmHostedByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesNpmHostedByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/hosted/{repositoryName}][%d] putRepositoriesNpmHostedByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesNpmHostedByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesNpmHostedByRepositoryNameForbidden creates a PutRepositoriesNpmHostedByRepositoryNameForbidden with default headers values
func NewPutRepositoriesNpmHostedByRepositoryNameForbidden() *PutRepositoriesNpmHostedByRepositoryNameForbidden {
	return &PutRepositoriesNpmHostedByRepositoryNameForbidden{}
}

/*
PutRepositoriesNpmHostedByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesNpmHostedByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories npm hosted by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesNpmHostedByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories npm hosted by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesNpmHostedByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories npm hosted by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesNpmHostedByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories npm hosted by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesNpmHostedByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories npm hosted by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesNpmHostedByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories npm hosted by repository name forbidden response
func (o *PutRepositoriesNpmHostedByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesNpmHostedByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/hosted/{repositoryName}][%d] putRepositoriesNpmHostedByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesNpmHostedByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/hosted/{repositoryName}][%d] putRepositoriesNpmHostedByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesNpmHostedByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
