// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateRepository3Reader is a Reader for the UpdateRepository3 structure.
type UpdateRepository3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRepository3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateRepository3NoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRepository3BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRepository3Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRepository3Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/maven/hosted/{repositoryName}] updateRepository_3", response, response.Code())
	}
}

// NewUpdateRepository3NoContent creates a UpdateRepository3NoContent with default headers values
func NewUpdateRepository3NoContent() *UpdateRepository3NoContent {
	return &UpdateRepository3NoContent{}
}

/*
UpdateRepository3NoContent describes a response with status code 204, with default header values.

Repository updated
*/
type UpdateRepository3NoContent struct {
}

// IsSuccess returns true when this update repository3 no content response has a 2xx status code
func (o *UpdateRepository3NoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update repository3 no content response has a 3xx status code
func (o *UpdateRepository3NoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository3 no content response has a 4xx status code
func (o *UpdateRepository3NoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update repository3 no content response has a 5xx status code
func (o *UpdateRepository3NoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository3 no content response a status code equal to that given
func (o *UpdateRepository3NoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update repository3 no content response
func (o *UpdateRepository3NoContent) Code() int {
	return 204
}

func (o *UpdateRepository3NoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/maven/hosted/{repositoryName}][%d] updateRepository3NoContent", 204)
}

func (o *UpdateRepository3NoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/maven/hosted/{repositoryName}][%d] updateRepository3NoContent", 204)
}

func (o *UpdateRepository3NoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository3BadRequest creates a UpdateRepository3BadRequest with default headers values
func NewUpdateRepository3BadRequest() *UpdateRepository3BadRequest {
	return &UpdateRepository3BadRequest{}
}

/*
UpdateRepository3BadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateRepository3BadRequest struct {
}

// IsSuccess returns true when this update repository3 bad request response has a 2xx status code
func (o *UpdateRepository3BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository3 bad request response has a 3xx status code
func (o *UpdateRepository3BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository3 bad request response has a 4xx status code
func (o *UpdateRepository3BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository3 bad request response has a 5xx status code
func (o *UpdateRepository3BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository3 bad request response a status code equal to that given
func (o *UpdateRepository3BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update repository3 bad request response
func (o *UpdateRepository3BadRequest) Code() int {
	return 400
}

func (o *UpdateRepository3BadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/maven/hosted/{repositoryName}][%d] updateRepository3BadRequest", 400)
}

func (o *UpdateRepository3BadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/maven/hosted/{repositoryName}][%d] updateRepository3BadRequest", 400)
}

func (o *UpdateRepository3BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository3Unauthorized creates a UpdateRepository3Unauthorized with default headers values
func NewUpdateRepository3Unauthorized() *UpdateRepository3Unauthorized {
	return &UpdateRepository3Unauthorized{}
}

/*
UpdateRepository3Unauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type UpdateRepository3Unauthorized struct {
}

// IsSuccess returns true when this update repository3 unauthorized response has a 2xx status code
func (o *UpdateRepository3Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository3 unauthorized response has a 3xx status code
func (o *UpdateRepository3Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository3 unauthorized response has a 4xx status code
func (o *UpdateRepository3Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository3 unauthorized response has a 5xx status code
func (o *UpdateRepository3Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository3 unauthorized response a status code equal to that given
func (o *UpdateRepository3Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update repository3 unauthorized response
func (o *UpdateRepository3Unauthorized) Code() int {
	return 401
}

func (o *UpdateRepository3Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/maven/hosted/{repositoryName}][%d] updateRepository3Unauthorized", 401)
}

func (o *UpdateRepository3Unauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/maven/hosted/{repositoryName}][%d] updateRepository3Unauthorized", 401)
}

func (o *UpdateRepository3Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository3Forbidden creates a UpdateRepository3Forbidden with default headers values
func NewUpdateRepository3Forbidden() *UpdateRepository3Forbidden {
	return &UpdateRepository3Forbidden{}
}

/*
UpdateRepository3Forbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type UpdateRepository3Forbidden struct {
}

// IsSuccess returns true when this update repository3 forbidden response has a 2xx status code
func (o *UpdateRepository3Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository3 forbidden response has a 3xx status code
func (o *UpdateRepository3Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository3 forbidden response has a 4xx status code
func (o *UpdateRepository3Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository3 forbidden response has a 5xx status code
func (o *UpdateRepository3Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository3 forbidden response a status code equal to that given
func (o *UpdateRepository3Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update repository3 forbidden response
func (o *UpdateRepository3Forbidden) Code() int {
	return 403
}

func (o *UpdateRepository3Forbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/maven/hosted/{repositoryName}][%d] updateRepository3Forbidden", 403)
}

func (o *UpdateRepository3Forbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/maven/hosted/{repositoryName}][%d] updateRepository3Forbidden", 403)
}

func (o *UpdateRepository3Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
