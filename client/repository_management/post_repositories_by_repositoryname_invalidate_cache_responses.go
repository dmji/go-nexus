// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PostRepositoriesByRepositorynameInvalidateCacheReader is a Reader for the PostRepositoriesByRepositorynameInvalidateCache structure.
type PostRepositoriesByRepositorynameInvalidateCacheReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRepositoriesByRepositorynameInvalidateCacheReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPostRepositoriesByRepositorynameInvalidateCacheNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostRepositoriesByRepositorynameInvalidateCacheBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostRepositoriesByRepositorynameInvalidateCacheUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostRepositoriesByRepositorynameInvalidateCacheForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRepositoriesByRepositorynameInvalidateCacheNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/repositories/{repositoryName}/invalidate-cache] PostRepositoriesByRepositorynameInvalidateCache", response, response.Code())
	}
}

// NewPostRepositoriesByRepositorynameInvalidateCacheNoContent creates a PostRepositoriesByRepositorynameInvalidateCacheNoContent with default headers values
func NewPostRepositoriesByRepositorynameInvalidateCacheNoContent() *PostRepositoriesByRepositorynameInvalidateCacheNoContent {
	return &PostRepositoriesByRepositorynameInvalidateCacheNoContent{}
}

/*
PostRepositoriesByRepositorynameInvalidateCacheNoContent describes a response with status code 204, with default header values.

Repository cache invalidated
*/
type PostRepositoriesByRepositorynameInvalidateCacheNoContent struct {
}

// IsSuccess returns true when this post repositories by repositoryname invalidate cache no content response has a 2xx status code
func (o *PostRepositoriesByRepositorynameInvalidateCacheNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post repositories by repositoryname invalidate cache no content response has a 3xx status code
func (o *PostRepositoriesByRepositorynameInvalidateCacheNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post repositories by repositoryname invalidate cache no content response has a 4xx status code
func (o *PostRepositoriesByRepositorynameInvalidateCacheNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this post repositories by repositoryname invalidate cache no content response has a 5xx status code
func (o *PostRepositoriesByRepositorynameInvalidateCacheNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this post repositories by repositoryname invalidate cache no content response a status code equal to that given
func (o *PostRepositoriesByRepositorynameInvalidateCacheNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the post repositories by repositoryname invalidate cache no content response
func (o *PostRepositoriesByRepositorynameInvalidateCacheNoContent) Code() int {
	return 204
}

func (o *PostRepositoriesByRepositorynameInvalidateCacheNoContent) Error() string {
	return fmt.Sprintf("[POST /v1/repositories/{repositoryName}/invalidate-cache][%d] postRepositoriesByRepositorynameInvalidateCacheNoContent", 204)
}

func (o *PostRepositoriesByRepositorynameInvalidateCacheNoContent) String() string {
	return fmt.Sprintf("[POST /v1/repositories/{repositoryName}/invalidate-cache][%d] postRepositoriesByRepositorynameInvalidateCacheNoContent", 204)
}

func (o *PostRepositoriesByRepositorynameInvalidateCacheNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRepositoriesByRepositorynameInvalidateCacheBadRequest creates a PostRepositoriesByRepositorynameInvalidateCacheBadRequest with default headers values
func NewPostRepositoriesByRepositorynameInvalidateCacheBadRequest() *PostRepositoriesByRepositorynameInvalidateCacheBadRequest {
	return &PostRepositoriesByRepositorynameInvalidateCacheBadRequest{}
}

/*
PostRepositoriesByRepositorynameInvalidateCacheBadRequest describes a response with status code 400, with default header values.

Repository is not of proxy or group type
*/
type PostRepositoriesByRepositorynameInvalidateCacheBadRequest struct {
}

// IsSuccess returns true when this post repositories by repositoryname invalidate cache bad request response has a 2xx status code
func (o *PostRepositoriesByRepositorynameInvalidateCacheBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post repositories by repositoryname invalidate cache bad request response has a 3xx status code
func (o *PostRepositoriesByRepositorynameInvalidateCacheBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post repositories by repositoryname invalidate cache bad request response has a 4xx status code
func (o *PostRepositoriesByRepositorynameInvalidateCacheBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post repositories by repositoryname invalidate cache bad request response has a 5xx status code
func (o *PostRepositoriesByRepositorynameInvalidateCacheBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post repositories by repositoryname invalidate cache bad request response a status code equal to that given
func (o *PostRepositoriesByRepositorynameInvalidateCacheBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post repositories by repositoryname invalidate cache bad request response
func (o *PostRepositoriesByRepositorynameInvalidateCacheBadRequest) Code() int {
	return 400
}

func (o *PostRepositoriesByRepositorynameInvalidateCacheBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/repositories/{repositoryName}/invalidate-cache][%d] postRepositoriesByRepositorynameInvalidateCacheBadRequest", 400)
}

func (o *PostRepositoriesByRepositorynameInvalidateCacheBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/repositories/{repositoryName}/invalidate-cache][%d] postRepositoriesByRepositorynameInvalidateCacheBadRequest", 400)
}

func (o *PostRepositoriesByRepositorynameInvalidateCacheBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRepositoriesByRepositorynameInvalidateCacheUnauthorized creates a PostRepositoriesByRepositorynameInvalidateCacheUnauthorized with default headers values
func NewPostRepositoriesByRepositorynameInvalidateCacheUnauthorized() *PostRepositoriesByRepositorynameInvalidateCacheUnauthorized {
	return &PostRepositoriesByRepositorynameInvalidateCacheUnauthorized{}
}

/*
PostRepositoriesByRepositorynameInvalidateCacheUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PostRepositoriesByRepositorynameInvalidateCacheUnauthorized struct {
}

// IsSuccess returns true when this post repositories by repositoryname invalidate cache unauthorized response has a 2xx status code
func (o *PostRepositoriesByRepositorynameInvalidateCacheUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post repositories by repositoryname invalidate cache unauthorized response has a 3xx status code
func (o *PostRepositoriesByRepositorynameInvalidateCacheUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post repositories by repositoryname invalidate cache unauthorized response has a 4xx status code
func (o *PostRepositoriesByRepositorynameInvalidateCacheUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post repositories by repositoryname invalidate cache unauthorized response has a 5xx status code
func (o *PostRepositoriesByRepositorynameInvalidateCacheUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post repositories by repositoryname invalidate cache unauthorized response a status code equal to that given
func (o *PostRepositoriesByRepositorynameInvalidateCacheUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post repositories by repositoryname invalidate cache unauthorized response
func (o *PostRepositoriesByRepositorynameInvalidateCacheUnauthorized) Code() int {
	return 401
}

func (o *PostRepositoriesByRepositorynameInvalidateCacheUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/repositories/{repositoryName}/invalidate-cache][%d] postRepositoriesByRepositorynameInvalidateCacheUnauthorized", 401)
}

func (o *PostRepositoriesByRepositorynameInvalidateCacheUnauthorized) String() string {
	return fmt.Sprintf("[POST /v1/repositories/{repositoryName}/invalidate-cache][%d] postRepositoriesByRepositorynameInvalidateCacheUnauthorized", 401)
}

func (o *PostRepositoriesByRepositorynameInvalidateCacheUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRepositoriesByRepositorynameInvalidateCacheForbidden creates a PostRepositoriesByRepositorynameInvalidateCacheForbidden with default headers values
func NewPostRepositoriesByRepositorynameInvalidateCacheForbidden() *PostRepositoriesByRepositorynameInvalidateCacheForbidden {
	return &PostRepositoriesByRepositorynameInvalidateCacheForbidden{}
}

/*
PostRepositoriesByRepositorynameInvalidateCacheForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PostRepositoriesByRepositorynameInvalidateCacheForbidden struct {
}

// IsSuccess returns true when this post repositories by repositoryname invalidate cache forbidden response has a 2xx status code
func (o *PostRepositoriesByRepositorynameInvalidateCacheForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post repositories by repositoryname invalidate cache forbidden response has a 3xx status code
func (o *PostRepositoriesByRepositorynameInvalidateCacheForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post repositories by repositoryname invalidate cache forbidden response has a 4xx status code
func (o *PostRepositoriesByRepositorynameInvalidateCacheForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post repositories by repositoryname invalidate cache forbidden response has a 5xx status code
func (o *PostRepositoriesByRepositorynameInvalidateCacheForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post repositories by repositoryname invalidate cache forbidden response a status code equal to that given
func (o *PostRepositoriesByRepositorynameInvalidateCacheForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post repositories by repositoryname invalidate cache forbidden response
func (o *PostRepositoriesByRepositorynameInvalidateCacheForbidden) Code() int {
	return 403
}

func (o *PostRepositoriesByRepositorynameInvalidateCacheForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/repositories/{repositoryName}/invalidate-cache][%d] postRepositoriesByRepositorynameInvalidateCacheForbidden", 403)
}

func (o *PostRepositoriesByRepositorynameInvalidateCacheForbidden) String() string {
	return fmt.Sprintf("[POST /v1/repositories/{repositoryName}/invalidate-cache][%d] postRepositoriesByRepositorynameInvalidateCacheForbidden", 403)
}

func (o *PostRepositoriesByRepositorynameInvalidateCacheForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRepositoriesByRepositorynameInvalidateCacheNotFound creates a PostRepositoriesByRepositorynameInvalidateCacheNotFound with default headers values
func NewPostRepositoriesByRepositorynameInvalidateCacheNotFound() *PostRepositoriesByRepositorynameInvalidateCacheNotFound {
	return &PostRepositoriesByRepositorynameInvalidateCacheNotFound{}
}

/*
PostRepositoriesByRepositorynameInvalidateCacheNotFound describes a response with status code 404, with default header values.

Repository not found
*/
type PostRepositoriesByRepositorynameInvalidateCacheNotFound struct {
}

// IsSuccess returns true when this post repositories by repositoryname invalidate cache not found response has a 2xx status code
func (o *PostRepositoriesByRepositorynameInvalidateCacheNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post repositories by repositoryname invalidate cache not found response has a 3xx status code
func (o *PostRepositoriesByRepositorynameInvalidateCacheNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post repositories by repositoryname invalidate cache not found response has a 4xx status code
func (o *PostRepositoriesByRepositorynameInvalidateCacheNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post repositories by repositoryname invalidate cache not found response has a 5xx status code
func (o *PostRepositoriesByRepositorynameInvalidateCacheNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post repositories by repositoryname invalidate cache not found response a status code equal to that given
func (o *PostRepositoriesByRepositorynameInvalidateCacheNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post repositories by repositoryname invalidate cache not found response
func (o *PostRepositoriesByRepositorynameInvalidateCacheNotFound) Code() int {
	return 404
}

func (o *PostRepositoriesByRepositorynameInvalidateCacheNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/repositories/{repositoryName}/invalidate-cache][%d] postRepositoriesByRepositorynameInvalidateCacheNotFound", 404)
}

func (o *PostRepositoriesByRepositorynameInvalidateCacheNotFound) String() string {
	return fmt.Sprintf("[POST /v1/repositories/{repositoryName}/invalidate-cache][%d] postRepositoriesByRepositorynameInvalidateCacheNotFound", 404)
}

func (o *PostRepositoriesByRepositorynameInvalidateCacheNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
