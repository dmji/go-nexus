// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateRepository13Reader is a Reader for the UpdateRepository13 structure.
type UpdateRepository13Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRepository13Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateRepository13NoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRepository13BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRepository13Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRepository13Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/conan/group/{repositoryName}] updateRepository_13", response, response.Code())
	}
}

// NewUpdateRepository13NoContent creates a UpdateRepository13NoContent with default headers values
func NewUpdateRepository13NoContent() *UpdateRepository13NoContent {
	return &UpdateRepository13NoContent{}
}

/*
UpdateRepository13NoContent describes a response with status code 204, with default header values.

Repository updated
*/
type UpdateRepository13NoContent struct {
}

// IsSuccess returns true when this update repository13 no content response has a 2xx status code
func (o *UpdateRepository13NoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update repository13 no content response has a 3xx status code
func (o *UpdateRepository13NoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository13 no content response has a 4xx status code
func (o *UpdateRepository13NoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update repository13 no content response has a 5xx status code
func (o *UpdateRepository13NoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository13 no content response a status code equal to that given
func (o *UpdateRepository13NoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update repository13 no content response
func (o *UpdateRepository13NoContent) Code() int {
	return 204
}

func (o *UpdateRepository13NoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] updateRepository13NoContent", 204)
}

func (o *UpdateRepository13NoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] updateRepository13NoContent", 204)
}

func (o *UpdateRepository13NoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository13BadRequest creates a UpdateRepository13BadRequest with default headers values
func NewUpdateRepository13BadRequest() *UpdateRepository13BadRequest {
	return &UpdateRepository13BadRequest{}
}

/*
UpdateRepository13BadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateRepository13BadRequest struct {
}

// IsSuccess returns true when this update repository13 bad request response has a 2xx status code
func (o *UpdateRepository13BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository13 bad request response has a 3xx status code
func (o *UpdateRepository13BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository13 bad request response has a 4xx status code
func (o *UpdateRepository13BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository13 bad request response has a 5xx status code
func (o *UpdateRepository13BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository13 bad request response a status code equal to that given
func (o *UpdateRepository13BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update repository13 bad request response
func (o *UpdateRepository13BadRequest) Code() int {
	return 400
}

func (o *UpdateRepository13BadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] updateRepository13BadRequest", 400)
}

func (o *UpdateRepository13BadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] updateRepository13BadRequest", 400)
}

func (o *UpdateRepository13BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository13Unauthorized creates a UpdateRepository13Unauthorized with default headers values
func NewUpdateRepository13Unauthorized() *UpdateRepository13Unauthorized {
	return &UpdateRepository13Unauthorized{}
}

/*
UpdateRepository13Unauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type UpdateRepository13Unauthorized struct {
}

// IsSuccess returns true when this update repository13 unauthorized response has a 2xx status code
func (o *UpdateRepository13Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository13 unauthorized response has a 3xx status code
func (o *UpdateRepository13Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository13 unauthorized response has a 4xx status code
func (o *UpdateRepository13Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository13 unauthorized response has a 5xx status code
func (o *UpdateRepository13Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository13 unauthorized response a status code equal to that given
func (o *UpdateRepository13Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update repository13 unauthorized response
func (o *UpdateRepository13Unauthorized) Code() int {
	return 401
}

func (o *UpdateRepository13Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] updateRepository13Unauthorized", 401)
}

func (o *UpdateRepository13Unauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] updateRepository13Unauthorized", 401)
}

func (o *UpdateRepository13Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository13Forbidden creates a UpdateRepository13Forbidden with default headers values
func NewUpdateRepository13Forbidden() *UpdateRepository13Forbidden {
	return &UpdateRepository13Forbidden{}
}

/*
UpdateRepository13Forbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type UpdateRepository13Forbidden struct {
}

// IsSuccess returns true when this update repository13 forbidden response has a 2xx status code
func (o *UpdateRepository13Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository13 forbidden response has a 3xx status code
func (o *UpdateRepository13Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository13 forbidden response has a 4xx status code
func (o *UpdateRepository13Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository13 forbidden response has a 5xx status code
func (o *UpdateRepository13Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository13 forbidden response a status code equal to that given
func (o *UpdateRepository13Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update repository13 forbidden response
func (o *UpdateRepository13Forbidden) Code() int {
	return 403
}

func (o *UpdateRepository13Forbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] updateRepository13Forbidden", 403)
}

func (o *UpdateRepository13Forbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] updateRepository13Forbidden", 403)
}

func (o *UpdateRepository13Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
