// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesAptHostedByRepositorynameReader is a Reader for the PutRepositoriesAptHostedByRepositoryname structure.
type PutRepositoriesAptHostedByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesAptHostedByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesAptHostedByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesAptHostedByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesAptHostedByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesAptHostedByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRepositoriesAptHostedByRepositorynameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/apt/hosted/{repositoryName}] PutRepositoriesAptHostedByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesAptHostedByRepositorynameNoContent creates a PutRepositoriesAptHostedByRepositorynameNoContent with default headers values
func NewPutRepositoriesAptHostedByRepositorynameNoContent() *PutRepositoriesAptHostedByRepositorynameNoContent {
	return &PutRepositoriesAptHostedByRepositorynameNoContent{}
}

/*
PutRepositoriesAptHostedByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesAptHostedByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories apt hosted by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesAptHostedByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories apt hosted by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesAptHostedByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories apt hosted by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesAptHostedByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories apt hosted by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesAptHostedByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories apt hosted by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesAptHostedByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories apt hosted by repositoryname no content response
func (o *PutRepositoriesAptHostedByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesAptHostedByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/hosted/{repositoryName}][%d] putRepositoriesAptHostedByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesAptHostedByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/hosted/{repositoryName}][%d] putRepositoriesAptHostedByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesAptHostedByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesAptHostedByRepositorynameBadRequest creates a PutRepositoriesAptHostedByRepositorynameBadRequest with default headers values
func NewPutRepositoriesAptHostedByRepositorynameBadRequest() *PutRepositoriesAptHostedByRepositorynameBadRequest {
	return &PutRepositoriesAptHostedByRepositorynameBadRequest{}
}

/*
PutRepositoriesAptHostedByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesAptHostedByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories apt hosted by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesAptHostedByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories apt hosted by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesAptHostedByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories apt hosted by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesAptHostedByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories apt hosted by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesAptHostedByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories apt hosted by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesAptHostedByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories apt hosted by repositoryname bad request response
func (o *PutRepositoriesAptHostedByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesAptHostedByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/hosted/{repositoryName}][%d] putRepositoriesAptHostedByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesAptHostedByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/hosted/{repositoryName}][%d] putRepositoriesAptHostedByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesAptHostedByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesAptHostedByRepositorynameUnauthorized creates a PutRepositoriesAptHostedByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesAptHostedByRepositorynameUnauthorized() *PutRepositoriesAptHostedByRepositorynameUnauthorized {
	return &PutRepositoriesAptHostedByRepositorynameUnauthorized{}
}

/*
PutRepositoriesAptHostedByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesAptHostedByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories apt hosted by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesAptHostedByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories apt hosted by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesAptHostedByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories apt hosted by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesAptHostedByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories apt hosted by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesAptHostedByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories apt hosted by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesAptHostedByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories apt hosted by repositoryname unauthorized response
func (o *PutRepositoriesAptHostedByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesAptHostedByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/hosted/{repositoryName}][%d] putRepositoriesAptHostedByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesAptHostedByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/hosted/{repositoryName}][%d] putRepositoriesAptHostedByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesAptHostedByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesAptHostedByRepositorynameForbidden creates a PutRepositoriesAptHostedByRepositorynameForbidden with default headers values
func NewPutRepositoriesAptHostedByRepositorynameForbidden() *PutRepositoriesAptHostedByRepositorynameForbidden {
	return &PutRepositoriesAptHostedByRepositorynameForbidden{}
}

/*
PutRepositoriesAptHostedByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesAptHostedByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories apt hosted by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesAptHostedByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories apt hosted by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesAptHostedByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories apt hosted by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesAptHostedByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories apt hosted by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesAptHostedByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories apt hosted by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesAptHostedByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories apt hosted by repositoryname forbidden response
func (o *PutRepositoriesAptHostedByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesAptHostedByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/hosted/{repositoryName}][%d] putRepositoriesAptHostedByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesAptHostedByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/hosted/{repositoryName}][%d] putRepositoriesAptHostedByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesAptHostedByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesAptHostedByRepositorynameNotFound creates a PutRepositoriesAptHostedByRepositorynameNotFound with default headers values
func NewPutRepositoriesAptHostedByRepositorynameNotFound() *PutRepositoriesAptHostedByRepositorynameNotFound {
	return &PutRepositoriesAptHostedByRepositorynameNotFound{}
}

/*
PutRepositoriesAptHostedByRepositorynameNotFound describes a response with status code 404, with default header values.

Repository not found
*/
type PutRepositoriesAptHostedByRepositorynameNotFound struct {
}

// IsSuccess returns true when this put repositories apt hosted by repositoryname not found response has a 2xx status code
func (o *PutRepositoriesAptHostedByRepositorynameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories apt hosted by repositoryname not found response has a 3xx status code
func (o *PutRepositoriesAptHostedByRepositorynameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories apt hosted by repositoryname not found response has a 4xx status code
func (o *PutRepositoriesAptHostedByRepositorynameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories apt hosted by repositoryname not found response has a 5xx status code
func (o *PutRepositoriesAptHostedByRepositorynameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories apt hosted by repositoryname not found response a status code equal to that given
func (o *PutRepositoriesAptHostedByRepositorynameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put repositories apt hosted by repositoryname not found response
func (o *PutRepositoriesAptHostedByRepositorynameNotFound) Code() int {
	return 404
}

func (o *PutRepositoriesAptHostedByRepositorynameNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/hosted/{repositoryName}][%d] putRepositoriesAptHostedByRepositorynameNotFound", 404)
}

func (o *PutRepositoriesAptHostedByRepositorynameNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/hosted/{repositoryName}][%d] putRepositoriesAptHostedByRepositorynameNotFound", 404)
}

func (o *PutRepositoriesAptHostedByRepositorynameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
