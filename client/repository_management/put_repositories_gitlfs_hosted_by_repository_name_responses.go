// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesGitlfsHostedByRepositoryNameReader is a Reader for the PutRepositoriesGitlfsHostedByRepositoryName structure.
type PutRepositoriesGitlfsHostedByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesGitlfsHostedByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesGitlfsHostedByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesGitlfsHostedByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesGitlfsHostedByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesGitlfsHostedByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/gitlfs/hosted/{repositoryName}] PutRepositoriesGitlfsHostedByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesGitlfsHostedByRepositoryNameNoContent creates a PutRepositoriesGitlfsHostedByRepositoryNameNoContent with default headers values
func NewPutRepositoriesGitlfsHostedByRepositoryNameNoContent() *PutRepositoriesGitlfsHostedByRepositoryNameNoContent {
	return &PutRepositoriesGitlfsHostedByRepositoryNameNoContent{}
}

/*
PutRepositoriesGitlfsHostedByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesGitlfsHostedByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories gitlfs hosted by repository name no content response has a 2xx status code
func (o *PutRepositoriesGitlfsHostedByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories gitlfs hosted by repository name no content response has a 3xx status code
func (o *PutRepositoriesGitlfsHostedByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories gitlfs hosted by repository name no content response has a 4xx status code
func (o *PutRepositoriesGitlfsHostedByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories gitlfs hosted by repository name no content response has a 5xx status code
func (o *PutRepositoriesGitlfsHostedByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories gitlfs hosted by repository name no content response a status code equal to that given
func (o *PutRepositoriesGitlfsHostedByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories gitlfs hosted by repository name no content response
func (o *PutRepositoriesGitlfsHostedByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesGitlfsHostedByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/gitlfs/hosted/{repositoryName}][%d] putRepositoriesGitlfsHostedByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesGitlfsHostedByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/gitlfs/hosted/{repositoryName}][%d] putRepositoriesGitlfsHostedByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesGitlfsHostedByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesGitlfsHostedByRepositoryNameBadRequest creates a PutRepositoriesGitlfsHostedByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesGitlfsHostedByRepositoryNameBadRequest() *PutRepositoriesGitlfsHostedByRepositoryNameBadRequest {
	return &PutRepositoriesGitlfsHostedByRepositoryNameBadRequest{}
}

/*
PutRepositoriesGitlfsHostedByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesGitlfsHostedByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories gitlfs hosted by repository name bad request response has a 2xx status code
func (o *PutRepositoriesGitlfsHostedByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories gitlfs hosted by repository name bad request response has a 3xx status code
func (o *PutRepositoriesGitlfsHostedByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories gitlfs hosted by repository name bad request response has a 4xx status code
func (o *PutRepositoriesGitlfsHostedByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories gitlfs hosted by repository name bad request response has a 5xx status code
func (o *PutRepositoriesGitlfsHostedByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories gitlfs hosted by repository name bad request response a status code equal to that given
func (o *PutRepositoriesGitlfsHostedByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories gitlfs hosted by repository name bad request response
func (o *PutRepositoriesGitlfsHostedByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesGitlfsHostedByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/gitlfs/hosted/{repositoryName}][%d] putRepositoriesGitlfsHostedByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesGitlfsHostedByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/gitlfs/hosted/{repositoryName}][%d] putRepositoriesGitlfsHostedByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesGitlfsHostedByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesGitlfsHostedByRepositoryNameUnauthorized creates a PutRepositoriesGitlfsHostedByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesGitlfsHostedByRepositoryNameUnauthorized() *PutRepositoriesGitlfsHostedByRepositoryNameUnauthorized {
	return &PutRepositoriesGitlfsHostedByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesGitlfsHostedByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesGitlfsHostedByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories gitlfs hosted by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesGitlfsHostedByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories gitlfs hosted by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesGitlfsHostedByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories gitlfs hosted by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesGitlfsHostedByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories gitlfs hosted by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesGitlfsHostedByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories gitlfs hosted by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesGitlfsHostedByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories gitlfs hosted by repository name unauthorized response
func (o *PutRepositoriesGitlfsHostedByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesGitlfsHostedByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/gitlfs/hosted/{repositoryName}][%d] putRepositoriesGitlfsHostedByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesGitlfsHostedByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/gitlfs/hosted/{repositoryName}][%d] putRepositoriesGitlfsHostedByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesGitlfsHostedByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesGitlfsHostedByRepositoryNameForbidden creates a PutRepositoriesGitlfsHostedByRepositoryNameForbidden with default headers values
func NewPutRepositoriesGitlfsHostedByRepositoryNameForbidden() *PutRepositoriesGitlfsHostedByRepositoryNameForbidden {
	return &PutRepositoriesGitlfsHostedByRepositoryNameForbidden{}
}

/*
PutRepositoriesGitlfsHostedByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesGitlfsHostedByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories gitlfs hosted by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesGitlfsHostedByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories gitlfs hosted by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesGitlfsHostedByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories gitlfs hosted by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesGitlfsHostedByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories gitlfs hosted by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesGitlfsHostedByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories gitlfs hosted by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesGitlfsHostedByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories gitlfs hosted by repository name forbidden response
func (o *PutRepositoriesGitlfsHostedByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesGitlfsHostedByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/gitlfs/hosted/{repositoryName}][%d] putRepositoriesGitlfsHostedByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesGitlfsHostedByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/gitlfs/hosted/{repositoryName}][%d] putRepositoriesGitlfsHostedByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesGitlfsHostedByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
