// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesYumProxyByRepositoryNameReader is a Reader for the PutRepositoriesYumProxyByRepositoryName structure.
type PutRepositoriesYumProxyByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesYumProxyByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesYumProxyByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesYumProxyByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesYumProxyByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesYumProxyByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/yum/proxy/{repositoryName}] PutRepositoriesYumProxyByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesYumProxyByRepositoryNameNoContent creates a PutRepositoriesYumProxyByRepositoryNameNoContent with default headers values
func NewPutRepositoriesYumProxyByRepositoryNameNoContent() *PutRepositoriesYumProxyByRepositoryNameNoContent {
	return &PutRepositoriesYumProxyByRepositoryNameNoContent{}
}

/*
PutRepositoriesYumProxyByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesYumProxyByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories yum proxy by repository name no content response has a 2xx status code
func (o *PutRepositoriesYumProxyByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories yum proxy by repository name no content response has a 3xx status code
func (o *PutRepositoriesYumProxyByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories yum proxy by repository name no content response has a 4xx status code
func (o *PutRepositoriesYumProxyByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories yum proxy by repository name no content response has a 5xx status code
func (o *PutRepositoriesYumProxyByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories yum proxy by repository name no content response a status code equal to that given
func (o *PutRepositoriesYumProxyByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories yum proxy by repository name no content response
func (o *PutRepositoriesYumProxyByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesYumProxyByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/proxy/{repositoryName}][%d] putRepositoriesYumProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesYumProxyByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/proxy/{repositoryName}][%d] putRepositoriesYumProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesYumProxyByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesYumProxyByRepositoryNameBadRequest creates a PutRepositoriesYumProxyByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesYumProxyByRepositoryNameBadRequest() *PutRepositoriesYumProxyByRepositoryNameBadRequest {
	return &PutRepositoriesYumProxyByRepositoryNameBadRequest{}
}

/*
PutRepositoriesYumProxyByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesYumProxyByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories yum proxy by repository name bad request response has a 2xx status code
func (o *PutRepositoriesYumProxyByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories yum proxy by repository name bad request response has a 3xx status code
func (o *PutRepositoriesYumProxyByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories yum proxy by repository name bad request response has a 4xx status code
func (o *PutRepositoriesYumProxyByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories yum proxy by repository name bad request response has a 5xx status code
func (o *PutRepositoriesYumProxyByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories yum proxy by repository name bad request response a status code equal to that given
func (o *PutRepositoriesYumProxyByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories yum proxy by repository name bad request response
func (o *PutRepositoriesYumProxyByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesYumProxyByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/proxy/{repositoryName}][%d] putRepositoriesYumProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesYumProxyByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/proxy/{repositoryName}][%d] putRepositoriesYumProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesYumProxyByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesYumProxyByRepositoryNameUnauthorized creates a PutRepositoriesYumProxyByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesYumProxyByRepositoryNameUnauthorized() *PutRepositoriesYumProxyByRepositoryNameUnauthorized {
	return &PutRepositoriesYumProxyByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesYumProxyByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesYumProxyByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories yum proxy by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesYumProxyByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories yum proxy by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesYumProxyByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories yum proxy by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesYumProxyByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories yum proxy by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesYumProxyByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories yum proxy by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesYumProxyByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories yum proxy by repository name unauthorized response
func (o *PutRepositoriesYumProxyByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesYumProxyByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/proxy/{repositoryName}][%d] putRepositoriesYumProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesYumProxyByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/proxy/{repositoryName}][%d] putRepositoriesYumProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesYumProxyByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesYumProxyByRepositoryNameForbidden creates a PutRepositoriesYumProxyByRepositoryNameForbidden with default headers values
func NewPutRepositoriesYumProxyByRepositoryNameForbidden() *PutRepositoriesYumProxyByRepositoryNameForbidden {
	return &PutRepositoriesYumProxyByRepositoryNameForbidden{}
}

/*
PutRepositoriesYumProxyByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesYumProxyByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories yum proxy by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesYumProxyByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories yum proxy by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesYumProxyByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories yum proxy by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesYumProxyByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories yum proxy by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesYumProxyByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories yum proxy by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesYumProxyByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories yum proxy by repository name forbidden response
func (o *PutRepositoriesYumProxyByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesYumProxyByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/proxy/{repositoryName}][%d] putRepositoriesYumProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesYumProxyByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/proxy/{repositoryName}][%d] putRepositoriesYumProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesYumProxyByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
