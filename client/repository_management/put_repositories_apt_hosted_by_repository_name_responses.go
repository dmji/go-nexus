// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesAptHostedByRepositoryNameReader is a Reader for the PutRepositoriesAptHostedByRepositoryName structure.
type PutRepositoriesAptHostedByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesAptHostedByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesAptHostedByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesAptHostedByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesAptHostedByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesAptHostedByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRepositoriesAptHostedByRepositoryNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/apt/hosted/{repositoryName}] PutRepositoriesAptHostedByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesAptHostedByRepositoryNameNoContent creates a PutRepositoriesAptHostedByRepositoryNameNoContent with default headers values
func NewPutRepositoriesAptHostedByRepositoryNameNoContent() *PutRepositoriesAptHostedByRepositoryNameNoContent {
	return &PutRepositoriesAptHostedByRepositoryNameNoContent{}
}

/*
PutRepositoriesAptHostedByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesAptHostedByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories apt hosted by repository name no content response has a 2xx status code
func (o *PutRepositoriesAptHostedByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories apt hosted by repository name no content response has a 3xx status code
func (o *PutRepositoriesAptHostedByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories apt hosted by repository name no content response has a 4xx status code
func (o *PutRepositoriesAptHostedByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories apt hosted by repository name no content response has a 5xx status code
func (o *PutRepositoriesAptHostedByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories apt hosted by repository name no content response a status code equal to that given
func (o *PutRepositoriesAptHostedByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories apt hosted by repository name no content response
func (o *PutRepositoriesAptHostedByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesAptHostedByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/hosted/{repositoryName}][%d] putRepositoriesAptHostedByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesAptHostedByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/hosted/{repositoryName}][%d] putRepositoriesAptHostedByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesAptHostedByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesAptHostedByRepositoryNameBadRequest creates a PutRepositoriesAptHostedByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesAptHostedByRepositoryNameBadRequest() *PutRepositoriesAptHostedByRepositoryNameBadRequest {
	return &PutRepositoriesAptHostedByRepositoryNameBadRequest{}
}

/*
PutRepositoriesAptHostedByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesAptHostedByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories apt hosted by repository name bad request response has a 2xx status code
func (o *PutRepositoriesAptHostedByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories apt hosted by repository name bad request response has a 3xx status code
func (o *PutRepositoriesAptHostedByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories apt hosted by repository name bad request response has a 4xx status code
func (o *PutRepositoriesAptHostedByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories apt hosted by repository name bad request response has a 5xx status code
func (o *PutRepositoriesAptHostedByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories apt hosted by repository name bad request response a status code equal to that given
func (o *PutRepositoriesAptHostedByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories apt hosted by repository name bad request response
func (o *PutRepositoriesAptHostedByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesAptHostedByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/hosted/{repositoryName}][%d] putRepositoriesAptHostedByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesAptHostedByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/hosted/{repositoryName}][%d] putRepositoriesAptHostedByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesAptHostedByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesAptHostedByRepositoryNameUnauthorized creates a PutRepositoriesAptHostedByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesAptHostedByRepositoryNameUnauthorized() *PutRepositoriesAptHostedByRepositoryNameUnauthorized {
	return &PutRepositoriesAptHostedByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesAptHostedByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesAptHostedByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories apt hosted by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesAptHostedByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories apt hosted by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesAptHostedByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories apt hosted by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesAptHostedByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories apt hosted by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesAptHostedByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories apt hosted by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesAptHostedByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories apt hosted by repository name unauthorized response
func (o *PutRepositoriesAptHostedByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesAptHostedByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/hosted/{repositoryName}][%d] putRepositoriesAptHostedByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesAptHostedByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/hosted/{repositoryName}][%d] putRepositoriesAptHostedByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesAptHostedByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesAptHostedByRepositoryNameForbidden creates a PutRepositoriesAptHostedByRepositoryNameForbidden with default headers values
func NewPutRepositoriesAptHostedByRepositoryNameForbidden() *PutRepositoriesAptHostedByRepositoryNameForbidden {
	return &PutRepositoriesAptHostedByRepositoryNameForbidden{}
}

/*
PutRepositoriesAptHostedByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesAptHostedByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories apt hosted by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesAptHostedByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories apt hosted by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesAptHostedByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories apt hosted by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesAptHostedByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories apt hosted by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesAptHostedByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories apt hosted by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesAptHostedByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories apt hosted by repository name forbidden response
func (o *PutRepositoriesAptHostedByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesAptHostedByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/hosted/{repositoryName}][%d] putRepositoriesAptHostedByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesAptHostedByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/hosted/{repositoryName}][%d] putRepositoriesAptHostedByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesAptHostedByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesAptHostedByRepositoryNameNotFound creates a PutRepositoriesAptHostedByRepositoryNameNotFound with default headers values
func NewPutRepositoriesAptHostedByRepositoryNameNotFound() *PutRepositoriesAptHostedByRepositoryNameNotFound {
	return &PutRepositoriesAptHostedByRepositoryNameNotFound{}
}

/*
PutRepositoriesAptHostedByRepositoryNameNotFound describes a response with status code 404, with default header values.

Repository not found
*/
type PutRepositoriesAptHostedByRepositoryNameNotFound struct {
}

// IsSuccess returns true when this put repositories apt hosted by repository name not found response has a 2xx status code
func (o *PutRepositoriesAptHostedByRepositoryNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories apt hosted by repository name not found response has a 3xx status code
func (o *PutRepositoriesAptHostedByRepositoryNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories apt hosted by repository name not found response has a 4xx status code
func (o *PutRepositoriesAptHostedByRepositoryNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories apt hosted by repository name not found response has a 5xx status code
func (o *PutRepositoriesAptHostedByRepositoryNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories apt hosted by repository name not found response a status code equal to that given
func (o *PutRepositoriesAptHostedByRepositoryNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put repositories apt hosted by repository name not found response
func (o *PutRepositoriesAptHostedByRepositoryNameNotFound) Code() int {
	return 404
}

func (o *PutRepositoriesAptHostedByRepositoryNameNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/hosted/{repositoryName}][%d] putRepositoriesAptHostedByRepositoryNameNotFound", 404)
}

func (o *PutRepositoriesAptHostedByRepositoryNameNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/hosted/{repositoryName}][%d] putRepositoriesAptHostedByRepositoryNameNotFound", 404)
}

func (o *PutRepositoriesAptHostedByRepositoryNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
