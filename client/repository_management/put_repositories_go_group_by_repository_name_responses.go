// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesGoGroupByRepositoryNameReader is a Reader for the PutRepositoriesGoGroupByRepositoryName structure.
type PutRepositoriesGoGroupByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesGoGroupByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesGoGroupByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesGoGroupByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesGoGroupByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesGoGroupByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRepositoriesGoGroupByRepositoryNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/go/group/{repositoryName}] PutRepositoriesGoGroupByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesGoGroupByRepositoryNameNoContent creates a PutRepositoriesGoGroupByRepositoryNameNoContent with default headers values
func NewPutRepositoriesGoGroupByRepositoryNameNoContent() *PutRepositoriesGoGroupByRepositoryNameNoContent {
	return &PutRepositoriesGoGroupByRepositoryNameNoContent{}
}

/*
PutRepositoriesGoGroupByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesGoGroupByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories go group by repository name no content response has a 2xx status code
func (o *PutRepositoriesGoGroupByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories go group by repository name no content response has a 3xx status code
func (o *PutRepositoriesGoGroupByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories go group by repository name no content response has a 4xx status code
func (o *PutRepositoriesGoGroupByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories go group by repository name no content response has a 5xx status code
func (o *PutRepositoriesGoGroupByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories go group by repository name no content response a status code equal to that given
func (o *PutRepositoriesGoGroupByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories go group by repository name no content response
func (o *PutRepositoriesGoGroupByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesGoGroupByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] putRepositoriesGoGroupByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesGoGroupByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] putRepositoriesGoGroupByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesGoGroupByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesGoGroupByRepositoryNameBadRequest creates a PutRepositoriesGoGroupByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesGoGroupByRepositoryNameBadRequest() *PutRepositoriesGoGroupByRepositoryNameBadRequest {
	return &PutRepositoriesGoGroupByRepositoryNameBadRequest{}
}

/*
PutRepositoriesGoGroupByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesGoGroupByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories go group by repository name bad request response has a 2xx status code
func (o *PutRepositoriesGoGroupByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories go group by repository name bad request response has a 3xx status code
func (o *PutRepositoriesGoGroupByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories go group by repository name bad request response has a 4xx status code
func (o *PutRepositoriesGoGroupByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories go group by repository name bad request response has a 5xx status code
func (o *PutRepositoriesGoGroupByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories go group by repository name bad request response a status code equal to that given
func (o *PutRepositoriesGoGroupByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories go group by repository name bad request response
func (o *PutRepositoriesGoGroupByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesGoGroupByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] putRepositoriesGoGroupByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesGoGroupByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] putRepositoriesGoGroupByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesGoGroupByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesGoGroupByRepositoryNameUnauthorized creates a PutRepositoriesGoGroupByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesGoGroupByRepositoryNameUnauthorized() *PutRepositoriesGoGroupByRepositoryNameUnauthorized {
	return &PutRepositoriesGoGroupByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesGoGroupByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesGoGroupByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories go group by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesGoGroupByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories go group by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesGoGroupByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories go group by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesGoGroupByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories go group by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesGoGroupByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories go group by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesGoGroupByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories go group by repository name unauthorized response
func (o *PutRepositoriesGoGroupByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesGoGroupByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] putRepositoriesGoGroupByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesGoGroupByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] putRepositoriesGoGroupByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesGoGroupByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesGoGroupByRepositoryNameForbidden creates a PutRepositoriesGoGroupByRepositoryNameForbidden with default headers values
func NewPutRepositoriesGoGroupByRepositoryNameForbidden() *PutRepositoriesGoGroupByRepositoryNameForbidden {
	return &PutRepositoriesGoGroupByRepositoryNameForbidden{}
}

/*
PutRepositoriesGoGroupByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesGoGroupByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories go group by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesGoGroupByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories go group by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesGoGroupByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories go group by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesGoGroupByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories go group by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesGoGroupByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories go group by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesGoGroupByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories go group by repository name forbidden response
func (o *PutRepositoriesGoGroupByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesGoGroupByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] putRepositoriesGoGroupByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesGoGroupByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] putRepositoriesGoGroupByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesGoGroupByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesGoGroupByRepositoryNameNotFound creates a PutRepositoriesGoGroupByRepositoryNameNotFound with default headers values
func NewPutRepositoriesGoGroupByRepositoryNameNotFound() *PutRepositoriesGoGroupByRepositoryNameNotFound {
	return &PutRepositoriesGoGroupByRepositoryNameNotFound{}
}

/*
PutRepositoriesGoGroupByRepositoryNameNotFound describes a response with status code 404, with default header values.

Repository not found
*/
type PutRepositoriesGoGroupByRepositoryNameNotFound struct {
}

// IsSuccess returns true when this put repositories go group by repository name not found response has a 2xx status code
func (o *PutRepositoriesGoGroupByRepositoryNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories go group by repository name not found response has a 3xx status code
func (o *PutRepositoriesGoGroupByRepositoryNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories go group by repository name not found response has a 4xx status code
func (o *PutRepositoriesGoGroupByRepositoryNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories go group by repository name not found response has a 5xx status code
func (o *PutRepositoriesGoGroupByRepositoryNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories go group by repository name not found response a status code equal to that given
func (o *PutRepositoriesGoGroupByRepositoryNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put repositories go group by repository name not found response
func (o *PutRepositoriesGoGroupByRepositoryNameNotFound) Code() int {
	return 404
}

func (o *PutRepositoriesGoGroupByRepositoryNameNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] putRepositoriesGoGroupByRepositoryNameNotFound", 404)
}

func (o *PutRepositoriesGoGroupByRepositoryNameNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] putRepositoriesGoGroupByRepositoryNameNotFound", 404)
}

func (o *PutRepositoriesGoGroupByRepositoryNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
