// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteRepositoriesByRepositoryNameReader is a Reader for the DeleteRepositoriesByRepositoryName structure.
type DeleteRepositoriesByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRepositoriesByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteRepositoriesByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteRepositoriesByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteRepositoriesByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRepositoriesByRepositoryNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/repositories/{repositoryName}] DeleteRepositoriesByRepositoryName", response, response.Code())
	}
}

// NewDeleteRepositoriesByRepositoryNameNoContent creates a DeleteRepositoriesByRepositoryNameNoContent with default headers values
func NewDeleteRepositoriesByRepositoryNameNoContent() *DeleteRepositoriesByRepositoryNameNoContent {
	return &DeleteRepositoriesByRepositoryNameNoContent{}
}

/*
DeleteRepositoriesByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository deleted
*/
type DeleteRepositoriesByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this delete repositories by repository name no content response has a 2xx status code
func (o *DeleteRepositoriesByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete repositories by repository name no content response has a 3xx status code
func (o *DeleteRepositoriesByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete repositories by repository name no content response has a 4xx status code
func (o *DeleteRepositoriesByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete repositories by repository name no content response has a 5xx status code
func (o *DeleteRepositoriesByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete repositories by repository name no content response a status code equal to that given
func (o *DeleteRepositoriesByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete repositories by repository name no content response
func (o *DeleteRepositoriesByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *DeleteRepositoriesByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}][%d] deleteRepositoriesByRepositoryNameNoContent", 204)
}

func (o *DeleteRepositoriesByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}][%d] deleteRepositoriesByRepositoryNameNoContent", 204)
}

func (o *DeleteRepositoriesByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRepositoriesByRepositoryNameUnauthorized creates a DeleteRepositoriesByRepositoryNameUnauthorized with default headers values
func NewDeleteRepositoriesByRepositoryNameUnauthorized() *DeleteRepositoriesByRepositoryNameUnauthorized {
	return &DeleteRepositoriesByRepositoryNameUnauthorized{}
}

/*
DeleteRepositoriesByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type DeleteRepositoriesByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this delete repositories by repository name unauthorized response has a 2xx status code
func (o *DeleteRepositoriesByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete repositories by repository name unauthorized response has a 3xx status code
func (o *DeleteRepositoriesByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete repositories by repository name unauthorized response has a 4xx status code
func (o *DeleteRepositoriesByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete repositories by repository name unauthorized response has a 5xx status code
func (o *DeleteRepositoriesByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete repositories by repository name unauthorized response a status code equal to that given
func (o *DeleteRepositoriesByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete repositories by repository name unauthorized response
func (o *DeleteRepositoriesByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *DeleteRepositoriesByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}][%d] deleteRepositoriesByRepositoryNameUnauthorized", 401)
}

func (o *DeleteRepositoriesByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}][%d] deleteRepositoriesByRepositoryNameUnauthorized", 401)
}

func (o *DeleteRepositoriesByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRepositoriesByRepositoryNameForbidden creates a DeleteRepositoriesByRepositoryNameForbidden with default headers values
func NewDeleteRepositoriesByRepositoryNameForbidden() *DeleteRepositoriesByRepositoryNameForbidden {
	return &DeleteRepositoriesByRepositoryNameForbidden{}
}

/*
DeleteRepositoriesByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type DeleteRepositoriesByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this delete repositories by repository name forbidden response has a 2xx status code
func (o *DeleteRepositoriesByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete repositories by repository name forbidden response has a 3xx status code
func (o *DeleteRepositoriesByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete repositories by repository name forbidden response has a 4xx status code
func (o *DeleteRepositoriesByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete repositories by repository name forbidden response has a 5xx status code
func (o *DeleteRepositoriesByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete repositories by repository name forbidden response a status code equal to that given
func (o *DeleteRepositoriesByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete repositories by repository name forbidden response
func (o *DeleteRepositoriesByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *DeleteRepositoriesByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}][%d] deleteRepositoriesByRepositoryNameForbidden", 403)
}

func (o *DeleteRepositoriesByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}][%d] deleteRepositoriesByRepositoryNameForbidden", 403)
}

func (o *DeleteRepositoriesByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRepositoriesByRepositoryNameNotFound creates a DeleteRepositoriesByRepositoryNameNotFound with default headers values
func NewDeleteRepositoriesByRepositoryNameNotFound() *DeleteRepositoriesByRepositoryNameNotFound {
	return &DeleteRepositoriesByRepositoryNameNotFound{}
}

/*
DeleteRepositoriesByRepositoryNameNotFound describes a response with status code 404, with default header values.

Repository not found
*/
type DeleteRepositoriesByRepositoryNameNotFound struct {
}

// IsSuccess returns true when this delete repositories by repository name not found response has a 2xx status code
func (o *DeleteRepositoriesByRepositoryNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete repositories by repository name not found response has a 3xx status code
func (o *DeleteRepositoriesByRepositoryNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete repositories by repository name not found response has a 4xx status code
func (o *DeleteRepositoriesByRepositoryNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete repositories by repository name not found response has a 5xx status code
func (o *DeleteRepositoriesByRepositoryNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete repositories by repository name not found response a status code equal to that given
func (o *DeleteRepositoriesByRepositoryNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete repositories by repository name not found response
func (o *DeleteRepositoriesByRepositoryNameNotFound) Code() int {
	return 404
}

func (o *DeleteRepositoriesByRepositoryNameNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}][%d] deleteRepositoriesByRepositoryNameNotFound", 404)
}

func (o *DeleteRepositoriesByRepositoryNameNotFound) String() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}][%d] deleteRepositoriesByRepositoryNameNotFound", 404)
}

func (o *DeleteRepositoriesByRepositoryNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
