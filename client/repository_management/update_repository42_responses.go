// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateRepository42Reader is a Reader for the UpdateRepository42 structure.
type UpdateRepository42Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRepository42Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateRepository42NoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRepository42BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRepository42Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRepository42Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/yum/group/{repositoryName}] updateRepository_42", response, response.Code())
	}
}

// NewUpdateRepository42NoContent creates a UpdateRepository42NoContent with default headers values
func NewUpdateRepository42NoContent() *UpdateRepository42NoContent {
	return &UpdateRepository42NoContent{}
}

/*
UpdateRepository42NoContent describes a response with status code 204, with default header values.

Repository updated
*/
type UpdateRepository42NoContent struct {
}

// IsSuccess returns true when this update repository42 no content response has a 2xx status code
func (o *UpdateRepository42NoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update repository42 no content response has a 3xx status code
func (o *UpdateRepository42NoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository42 no content response has a 4xx status code
func (o *UpdateRepository42NoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update repository42 no content response has a 5xx status code
func (o *UpdateRepository42NoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository42 no content response a status code equal to that given
func (o *UpdateRepository42NoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update repository42 no content response
func (o *UpdateRepository42NoContent) Code() int {
	return 204
}

func (o *UpdateRepository42NoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/group/{repositoryName}][%d] updateRepository42NoContent", 204)
}

func (o *UpdateRepository42NoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/group/{repositoryName}][%d] updateRepository42NoContent", 204)
}

func (o *UpdateRepository42NoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository42BadRequest creates a UpdateRepository42BadRequest with default headers values
func NewUpdateRepository42BadRequest() *UpdateRepository42BadRequest {
	return &UpdateRepository42BadRequest{}
}

/*
UpdateRepository42BadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateRepository42BadRequest struct {
}

// IsSuccess returns true when this update repository42 bad request response has a 2xx status code
func (o *UpdateRepository42BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository42 bad request response has a 3xx status code
func (o *UpdateRepository42BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository42 bad request response has a 4xx status code
func (o *UpdateRepository42BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository42 bad request response has a 5xx status code
func (o *UpdateRepository42BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository42 bad request response a status code equal to that given
func (o *UpdateRepository42BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update repository42 bad request response
func (o *UpdateRepository42BadRequest) Code() int {
	return 400
}

func (o *UpdateRepository42BadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/group/{repositoryName}][%d] updateRepository42BadRequest", 400)
}

func (o *UpdateRepository42BadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/group/{repositoryName}][%d] updateRepository42BadRequest", 400)
}

func (o *UpdateRepository42BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository42Unauthorized creates a UpdateRepository42Unauthorized with default headers values
func NewUpdateRepository42Unauthorized() *UpdateRepository42Unauthorized {
	return &UpdateRepository42Unauthorized{}
}

/*
UpdateRepository42Unauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type UpdateRepository42Unauthorized struct {
}

// IsSuccess returns true when this update repository42 unauthorized response has a 2xx status code
func (o *UpdateRepository42Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository42 unauthorized response has a 3xx status code
func (o *UpdateRepository42Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository42 unauthorized response has a 4xx status code
func (o *UpdateRepository42Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository42 unauthorized response has a 5xx status code
func (o *UpdateRepository42Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository42 unauthorized response a status code equal to that given
func (o *UpdateRepository42Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update repository42 unauthorized response
func (o *UpdateRepository42Unauthorized) Code() int {
	return 401
}

func (o *UpdateRepository42Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/group/{repositoryName}][%d] updateRepository42Unauthorized", 401)
}

func (o *UpdateRepository42Unauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/group/{repositoryName}][%d] updateRepository42Unauthorized", 401)
}

func (o *UpdateRepository42Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository42Forbidden creates a UpdateRepository42Forbidden with default headers values
func NewUpdateRepository42Forbidden() *UpdateRepository42Forbidden {
	return &UpdateRepository42Forbidden{}
}

/*
UpdateRepository42Forbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type UpdateRepository42Forbidden struct {
}

// IsSuccess returns true when this update repository42 forbidden response has a 2xx status code
func (o *UpdateRepository42Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository42 forbidden response has a 3xx status code
func (o *UpdateRepository42Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository42 forbidden response has a 4xx status code
func (o *UpdateRepository42Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository42 forbidden response has a 5xx status code
func (o *UpdateRepository42Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository42 forbidden response a status code equal to that given
func (o *UpdateRepository42Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update repository42 forbidden response
func (o *UpdateRepository42Forbidden) Code() int {
	return 403
}

func (o *UpdateRepository42Forbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/group/{repositoryName}][%d] updateRepository42Forbidden", 403)
}

func (o *UpdateRepository42Forbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/group/{repositoryName}][%d] updateRepository42Forbidden", 403)
}

func (o *UpdateRepository42Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
