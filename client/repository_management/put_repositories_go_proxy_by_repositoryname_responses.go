// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesGoProxyByRepositorynameReader is a Reader for the PutRepositoriesGoProxyByRepositoryname structure.
type PutRepositoriesGoProxyByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesGoProxyByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesGoProxyByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesGoProxyByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesGoProxyByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesGoProxyByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRepositoriesGoProxyByRepositorynameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/go/proxy/{repositoryName}] PutRepositoriesGoProxyByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesGoProxyByRepositorynameNoContent creates a PutRepositoriesGoProxyByRepositorynameNoContent with default headers values
func NewPutRepositoriesGoProxyByRepositorynameNoContent() *PutRepositoriesGoProxyByRepositorynameNoContent {
	return &PutRepositoriesGoProxyByRepositorynameNoContent{}
}

/*
PutRepositoriesGoProxyByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesGoProxyByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories go proxy by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesGoProxyByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories go proxy by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesGoProxyByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories go proxy by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesGoProxyByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories go proxy by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesGoProxyByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories go proxy by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesGoProxyByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories go proxy by repositoryname no content response
func (o *PutRepositoriesGoProxyByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesGoProxyByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/proxy/{repositoryName}][%d] putRepositoriesGoProxyByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesGoProxyByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/proxy/{repositoryName}][%d] putRepositoriesGoProxyByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesGoProxyByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesGoProxyByRepositorynameBadRequest creates a PutRepositoriesGoProxyByRepositorynameBadRequest with default headers values
func NewPutRepositoriesGoProxyByRepositorynameBadRequest() *PutRepositoriesGoProxyByRepositorynameBadRequest {
	return &PutRepositoriesGoProxyByRepositorynameBadRequest{}
}

/*
PutRepositoriesGoProxyByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesGoProxyByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories go proxy by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesGoProxyByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories go proxy by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesGoProxyByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories go proxy by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesGoProxyByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories go proxy by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesGoProxyByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories go proxy by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesGoProxyByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories go proxy by repositoryname bad request response
func (o *PutRepositoriesGoProxyByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesGoProxyByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/proxy/{repositoryName}][%d] putRepositoriesGoProxyByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesGoProxyByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/proxy/{repositoryName}][%d] putRepositoriesGoProxyByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesGoProxyByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesGoProxyByRepositorynameUnauthorized creates a PutRepositoriesGoProxyByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesGoProxyByRepositorynameUnauthorized() *PutRepositoriesGoProxyByRepositorynameUnauthorized {
	return &PutRepositoriesGoProxyByRepositorynameUnauthorized{}
}

/*
PutRepositoriesGoProxyByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesGoProxyByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories go proxy by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesGoProxyByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories go proxy by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesGoProxyByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories go proxy by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesGoProxyByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories go proxy by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesGoProxyByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories go proxy by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesGoProxyByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories go proxy by repositoryname unauthorized response
func (o *PutRepositoriesGoProxyByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesGoProxyByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/proxy/{repositoryName}][%d] putRepositoriesGoProxyByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesGoProxyByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/proxy/{repositoryName}][%d] putRepositoriesGoProxyByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesGoProxyByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesGoProxyByRepositorynameForbidden creates a PutRepositoriesGoProxyByRepositorynameForbidden with default headers values
func NewPutRepositoriesGoProxyByRepositorynameForbidden() *PutRepositoriesGoProxyByRepositorynameForbidden {
	return &PutRepositoriesGoProxyByRepositorynameForbidden{}
}

/*
PutRepositoriesGoProxyByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesGoProxyByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories go proxy by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesGoProxyByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories go proxy by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesGoProxyByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories go proxy by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesGoProxyByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories go proxy by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesGoProxyByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories go proxy by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesGoProxyByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories go proxy by repositoryname forbidden response
func (o *PutRepositoriesGoProxyByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesGoProxyByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/proxy/{repositoryName}][%d] putRepositoriesGoProxyByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesGoProxyByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/proxy/{repositoryName}][%d] putRepositoriesGoProxyByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesGoProxyByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesGoProxyByRepositorynameNotFound creates a PutRepositoriesGoProxyByRepositorynameNotFound with default headers values
func NewPutRepositoriesGoProxyByRepositorynameNotFound() *PutRepositoriesGoProxyByRepositorynameNotFound {
	return &PutRepositoriesGoProxyByRepositorynameNotFound{}
}

/*
PutRepositoriesGoProxyByRepositorynameNotFound describes a response with status code 404, with default header values.

Repository not found
*/
type PutRepositoriesGoProxyByRepositorynameNotFound struct {
}

// IsSuccess returns true when this put repositories go proxy by repositoryname not found response has a 2xx status code
func (o *PutRepositoriesGoProxyByRepositorynameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories go proxy by repositoryname not found response has a 3xx status code
func (o *PutRepositoriesGoProxyByRepositorynameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories go proxy by repositoryname not found response has a 4xx status code
func (o *PutRepositoriesGoProxyByRepositorynameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories go proxy by repositoryname not found response has a 5xx status code
func (o *PutRepositoriesGoProxyByRepositorynameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories go proxy by repositoryname not found response a status code equal to that given
func (o *PutRepositoriesGoProxyByRepositorynameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put repositories go proxy by repositoryname not found response
func (o *PutRepositoriesGoProxyByRepositorynameNotFound) Code() int {
	return 404
}

func (o *PutRepositoriesGoProxyByRepositorynameNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/proxy/{repositoryName}][%d] putRepositoriesGoProxyByRepositorynameNotFound", 404)
}

func (o *PutRepositoriesGoProxyByRepositorynameNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/proxy/{repositoryName}][%d] putRepositoriesGoProxyByRepositorynameNotFound", 404)
}

func (o *PutRepositoriesGoProxyByRepositorynameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
