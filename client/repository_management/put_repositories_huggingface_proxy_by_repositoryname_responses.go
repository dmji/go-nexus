// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesHuggingfaceProxyByRepositorynameReader is a Reader for the PutRepositoriesHuggingfaceProxyByRepositoryname structure.
type PutRepositoriesHuggingfaceProxyByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesHuggingfaceProxyByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesHuggingfaceProxyByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesHuggingfaceProxyByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesHuggingfaceProxyByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/huggingface/proxy/{repositoryName}] PutRepositoriesHuggingfaceProxyByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesHuggingfaceProxyByRepositorynameNoContent creates a PutRepositoriesHuggingfaceProxyByRepositorynameNoContent with default headers values
func NewPutRepositoriesHuggingfaceProxyByRepositorynameNoContent() *PutRepositoriesHuggingfaceProxyByRepositorynameNoContent {
	return &PutRepositoriesHuggingfaceProxyByRepositorynameNoContent{}
}

/*
PutRepositoriesHuggingfaceProxyByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesHuggingfaceProxyByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories huggingface proxy by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories huggingface proxy by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories huggingface proxy by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories huggingface proxy by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories huggingface proxy by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories huggingface proxy by repositoryname no content response
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesHuggingfaceProxyByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/huggingface/proxy/{repositoryName}][%d] putRepositoriesHuggingfaceProxyByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesHuggingfaceProxyByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/huggingface/proxy/{repositoryName}][%d] putRepositoriesHuggingfaceProxyByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesHuggingfaceProxyByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesHuggingfaceProxyByRepositorynameBadRequest creates a PutRepositoriesHuggingfaceProxyByRepositorynameBadRequest with default headers values
func NewPutRepositoriesHuggingfaceProxyByRepositorynameBadRequest() *PutRepositoriesHuggingfaceProxyByRepositorynameBadRequest {
	return &PutRepositoriesHuggingfaceProxyByRepositorynameBadRequest{}
}

/*
PutRepositoriesHuggingfaceProxyByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesHuggingfaceProxyByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories huggingface proxy by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories huggingface proxy by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories huggingface proxy by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories huggingface proxy by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories huggingface proxy by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories huggingface proxy by repositoryname bad request response
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesHuggingfaceProxyByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/huggingface/proxy/{repositoryName}][%d] putRepositoriesHuggingfaceProxyByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesHuggingfaceProxyByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/huggingface/proxy/{repositoryName}][%d] putRepositoriesHuggingfaceProxyByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesHuggingfaceProxyByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesHuggingfaceProxyByRepositorynameUnauthorized creates a PutRepositoriesHuggingfaceProxyByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesHuggingfaceProxyByRepositorynameUnauthorized() *PutRepositoriesHuggingfaceProxyByRepositorynameUnauthorized {
	return &PutRepositoriesHuggingfaceProxyByRepositorynameUnauthorized{}
}

/*
PutRepositoriesHuggingfaceProxyByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesHuggingfaceProxyByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories huggingface proxy by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories huggingface proxy by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories huggingface proxy by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories huggingface proxy by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories huggingface proxy by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories huggingface proxy by repositoryname unauthorized response
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesHuggingfaceProxyByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/huggingface/proxy/{repositoryName}][%d] putRepositoriesHuggingfaceProxyByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesHuggingfaceProxyByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/huggingface/proxy/{repositoryName}][%d] putRepositoriesHuggingfaceProxyByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesHuggingfaceProxyByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesHuggingfaceProxyByRepositorynameForbidden creates a PutRepositoriesHuggingfaceProxyByRepositorynameForbidden with default headers values
func NewPutRepositoriesHuggingfaceProxyByRepositorynameForbidden() *PutRepositoriesHuggingfaceProxyByRepositorynameForbidden {
	return &PutRepositoriesHuggingfaceProxyByRepositorynameForbidden{}
}

/*
PutRepositoriesHuggingfaceProxyByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesHuggingfaceProxyByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories huggingface proxy by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories huggingface proxy by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories huggingface proxy by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories huggingface proxy by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories huggingface proxy by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories huggingface proxy by repositoryname forbidden response
func (o *PutRepositoriesHuggingfaceProxyByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesHuggingfaceProxyByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/huggingface/proxy/{repositoryName}][%d] putRepositoriesHuggingfaceProxyByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesHuggingfaceProxyByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/huggingface/proxy/{repositoryName}][%d] putRepositoriesHuggingfaceProxyByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesHuggingfaceProxyByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
