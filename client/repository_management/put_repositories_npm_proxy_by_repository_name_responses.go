// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesNpmProxyByRepositoryNameReader is a Reader for the PutRepositoriesNpmProxyByRepositoryName structure.
type PutRepositoriesNpmProxyByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesNpmProxyByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesNpmProxyByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesNpmProxyByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesNpmProxyByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesNpmProxyByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/npm/proxy/{repositoryName}] PutRepositoriesNpmProxyByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesNpmProxyByRepositoryNameNoContent creates a PutRepositoriesNpmProxyByRepositoryNameNoContent with default headers values
func NewPutRepositoriesNpmProxyByRepositoryNameNoContent() *PutRepositoriesNpmProxyByRepositoryNameNoContent {
	return &PutRepositoriesNpmProxyByRepositoryNameNoContent{}
}

/*
PutRepositoriesNpmProxyByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesNpmProxyByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories npm proxy by repository name no content response has a 2xx status code
func (o *PutRepositoriesNpmProxyByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories npm proxy by repository name no content response has a 3xx status code
func (o *PutRepositoriesNpmProxyByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories npm proxy by repository name no content response has a 4xx status code
func (o *PutRepositoriesNpmProxyByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories npm proxy by repository name no content response has a 5xx status code
func (o *PutRepositoriesNpmProxyByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories npm proxy by repository name no content response a status code equal to that given
func (o *PutRepositoriesNpmProxyByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories npm proxy by repository name no content response
func (o *PutRepositoriesNpmProxyByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesNpmProxyByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/proxy/{repositoryName}][%d] putRepositoriesNpmProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesNpmProxyByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/proxy/{repositoryName}][%d] putRepositoriesNpmProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesNpmProxyByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesNpmProxyByRepositoryNameBadRequest creates a PutRepositoriesNpmProxyByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesNpmProxyByRepositoryNameBadRequest() *PutRepositoriesNpmProxyByRepositoryNameBadRequest {
	return &PutRepositoriesNpmProxyByRepositoryNameBadRequest{}
}

/*
PutRepositoriesNpmProxyByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesNpmProxyByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories npm proxy by repository name bad request response has a 2xx status code
func (o *PutRepositoriesNpmProxyByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories npm proxy by repository name bad request response has a 3xx status code
func (o *PutRepositoriesNpmProxyByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories npm proxy by repository name bad request response has a 4xx status code
func (o *PutRepositoriesNpmProxyByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories npm proxy by repository name bad request response has a 5xx status code
func (o *PutRepositoriesNpmProxyByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories npm proxy by repository name bad request response a status code equal to that given
func (o *PutRepositoriesNpmProxyByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories npm proxy by repository name bad request response
func (o *PutRepositoriesNpmProxyByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesNpmProxyByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/proxy/{repositoryName}][%d] putRepositoriesNpmProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesNpmProxyByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/proxy/{repositoryName}][%d] putRepositoriesNpmProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesNpmProxyByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesNpmProxyByRepositoryNameUnauthorized creates a PutRepositoriesNpmProxyByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesNpmProxyByRepositoryNameUnauthorized() *PutRepositoriesNpmProxyByRepositoryNameUnauthorized {
	return &PutRepositoriesNpmProxyByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesNpmProxyByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesNpmProxyByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories npm proxy by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesNpmProxyByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories npm proxy by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesNpmProxyByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories npm proxy by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesNpmProxyByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories npm proxy by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesNpmProxyByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories npm proxy by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesNpmProxyByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories npm proxy by repository name unauthorized response
func (o *PutRepositoriesNpmProxyByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesNpmProxyByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/proxy/{repositoryName}][%d] putRepositoriesNpmProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesNpmProxyByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/proxy/{repositoryName}][%d] putRepositoriesNpmProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesNpmProxyByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesNpmProxyByRepositoryNameForbidden creates a PutRepositoriesNpmProxyByRepositoryNameForbidden with default headers values
func NewPutRepositoriesNpmProxyByRepositoryNameForbidden() *PutRepositoriesNpmProxyByRepositoryNameForbidden {
	return &PutRepositoriesNpmProxyByRepositoryNameForbidden{}
}

/*
PutRepositoriesNpmProxyByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesNpmProxyByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories npm proxy by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesNpmProxyByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories npm proxy by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesNpmProxyByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories npm proxy by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesNpmProxyByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories npm proxy by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesNpmProxyByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories npm proxy by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesNpmProxyByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories npm proxy by repository name forbidden response
func (o *PutRepositoriesNpmProxyByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesNpmProxyByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/proxy/{repositoryName}][%d] putRepositoriesNpmProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesNpmProxyByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/proxy/{repositoryName}][%d] putRepositoriesNpmProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesNpmProxyByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
