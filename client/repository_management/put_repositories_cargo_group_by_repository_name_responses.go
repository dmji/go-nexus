// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesCargoGroupByRepositoryNameReader is a Reader for the PutRepositoriesCargoGroupByRepositoryName structure.
type PutRepositoriesCargoGroupByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesCargoGroupByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesCargoGroupByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesCargoGroupByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesCargoGroupByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesCargoGroupByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/cargo/group/{repositoryName}] PutRepositoriesCargoGroupByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesCargoGroupByRepositoryNameNoContent creates a PutRepositoriesCargoGroupByRepositoryNameNoContent with default headers values
func NewPutRepositoriesCargoGroupByRepositoryNameNoContent() *PutRepositoriesCargoGroupByRepositoryNameNoContent {
	return &PutRepositoriesCargoGroupByRepositoryNameNoContent{}
}

/*
PutRepositoriesCargoGroupByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesCargoGroupByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories cargo group by repository name no content response has a 2xx status code
func (o *PutRepositoriesCargoGroupByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories cargo group by repository name no content response has a 3xx status code
func (o *PutRepositoriesCargoGroupByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories cargo group by repository name no content response has a 4xx status code
func (o *PutRepositoriesCargoGroupByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories cargo group by repository name no content response has a 5xx status code
func (o *PutRepositoriesCargoGroupByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories cargo group by repository name no content response a status code equal to that given
func (o *PutRepositoriesCargoGroupByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories cargo group by repository name no content response
func (o *PutRepositoriesCargoGroupByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesCargoGroupByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/cargo/group/{repositoryName}][%d] putRepositoriesCargoGroupByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesCargoGroupByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/cargo/group/{repositoryName}][%d] putRepositoriesCargoGroupByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesCargoGroupByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesCargoGroupByRepositoryNameBadRequest creates a PutRepositoriesCargoGroupByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesCargoGroupByRepositoryNameBadRequest() *PutRepositoriesCargoGroupByRepositoryNameBadRequest {
	return &PutRepositoriesCargoGroupByRepositoryNameBadRequest{}
}

/*
PutRepositoriesCargoGroupByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesCargoGroupByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories cargo group by repository name bad request response has a 2xx status code
func (o *PutRepositoriesCargoGroupByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories cargo group by repository name bad request response has a 3xx status code
func (o *PutRepositoriesCargoGroupByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories cargo group by repository name bad request response has a 4xx status code
func (o *PutRepositoriesCargoGroupByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories cargo group by repository name bad request response has a 5xx status code
func (o *PutRepositoriesCargoGroupByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories cargo group by repository name bad request response a status code equal to that given
func (o *PutRepositoriesCargoGroupByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories cargo group by repository name bad request response
func (o *PutRepositoriesCargoGroupByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesCargoGroupByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/cargo/group/{repositoryName}][%d] putRepositoriesCargoGroupByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesCargoGroupByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/cargo/group/{repositoryName}][%d] putRepositoriesCargoGroupByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesCargoGroupByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesCargoGroupByRepositoryNameUnauthorized creates a PutRepositoriesCargoGroupByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesCargoGroupByRepositoryNameUnauthorized() *PutRepositoriesCargoGroupByRepositoryNameUnauthorized {
	return &PutRepositoriesCargoGroupByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesCargoGroupByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesCargoGroupByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories cargo group by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesCargoGroupByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories cargo group by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesCargoGroupByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories cargo group by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesCargoGroupByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories cargo group by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesCargoGroupByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories cargo group by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesCargoGroupByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories cargo group by repository name unauthorized response
func (o *PutRepositoriesCargoGroupByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesCargoGroupByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/cargo/group/{repositoryName}][%d] putRepositoriesCargoGroupByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesCargoGroupByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/cargo/group/{repositoryName}][%d] putRepositoriesCargoGroupByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesCargoGroupByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesCargoGroupByRepositoryNameForbidden creates a PutRepositoriesCargoGroupByRepositoryNameForbidden with default headers values
func NewPutRepositoriesCargoGroupByRepositoryNameForbidden() *PutRepositoriesCargoGroupByRepositoryNameForbidden {
	return &PutRepositoriesCargoGroupByRepositoryNameForbidden{}
}

/*
PutRepositoriesCargoGroupByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesCargoGroupByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories cargo group by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesCargoGroupByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories cargo group by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesCargoGroupByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories cargo group by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesCargoGroupByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories cargo group by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesCargoGroupByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories cargo group by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesCargoGroupByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories cargo group by repository name forbidden response
func (o *PutRepositoriesCargoGroupByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesCargoGroupByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/cargo/group/{repositoryName}][%d] putRepositoriesCargoGroupByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesCargoGroupByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/cargo/group/{repositoryName}][%d] putRepositoriesCargoGroupByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesCargoGroupByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
