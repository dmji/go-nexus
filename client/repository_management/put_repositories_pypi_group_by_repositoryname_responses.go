// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesPypiGroupByRepositorynameReader is a Reader for the PutRepositoriesPypiGroupByRepositoryname structure.
type PutRepositoriesPypiGroupByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesPypiGroupByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesPypiGroupByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesPypiGroupByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesPypiGroupByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesPypiGroupByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/pypi/group/{repositoryName}] PutRepositoriesPypiGroupByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesPypiGroupByRepositorynameNoContent creates a PutRepositoriesPypiGroupByRepositorynameNoContent with default headers values
func NewPutRepositoriesPypiGroupByRepositorynameNoContent() *PutRepositoriesPypiGroupByRepositorynameNoContent {
	return &PutRepositoriesPypiGroupByRepositorynameNoContent{}
}

/*
PutRepositoriesPypiGroupByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesPypiGroupByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories pypi group by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesPypiGroupByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories pypi group by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesPypiGroupByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories pypi group by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesPypiGroupByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories pypi group by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesPypiGroupByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories pypi group by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesPypiGroupByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories pypi group by repositoryname no content response
func (o *PutRepositoriesPypiGroupByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesPypiGroupByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/pypi/group/{repositoryName}][%d] putRepositoriesPypiGroupByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesPypiGroupByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/pypi/group/{repositoryName}][%d] putRepositoriesPypiGroupByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesPypiGroupByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesPypiGroupByRepositorynameBadRequest creates a PutRepositoriesPypiGroupByRepositorynameBadRequest with default headers values
func NewPutRepositoriesPypiGroupByRepositorynameBadRequest() *PutRepositoriesPypiGroupByRepositorynameBadRequest {
	return &PutRepositoriesPypiGroupByRepositorynameBadRequest{}
}

/*
PutRepositoriesPypiGroupByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesPypiGroupByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories pypi group by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesPypiGroupByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories pypi group by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesPypiGroupByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories pypi group by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesPypiGroupByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories pypi group by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesPypiGroupByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories pypi group by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesPypiGroupByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories pypi group by repositoryname bad request response
func (o *PutRepositoriesPypiGroupByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesPypiGroupByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/pypi/group/{repositoryName}][%d] putRepositoriesPypiGroupByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesPypiGroupByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/pypi/group/{repositoryName}][%d] putRepositoriesPypiGroupByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesPypiGroupByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesPypiGroupByRepositorynameUnauthorized creates a PutRepositoriesPypiGroupByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesPypiGroupByRepositorynameUnauthorized() *PutRepositoriesPypiGroupByRepositorynameUnauthorized {
	return &PutRepositoriesPypiGroupByRepositorynameUnauthorized{}
}

/*
PutRepositoriesPypiGroupByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesPypiGroupByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories pypi group by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesPypiGroupByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories pypi group by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesPypiGroupByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories pypi group by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesPypiGroupByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories pypi group by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesPypiGroupByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories pypi group by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesPypiGroupByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories pypi group by repositoryname unauthorized response
func (o *PutRepositoriesPypiGroupByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesPypiGroupByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/pypi/group/{repositoryName}][%d] putRepositoriesPypiGroupByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesPypiGroupByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/pypi/group/{repositoryName}][%d] putRepositoriesPypiGroupByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesPypiGroupByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesPypiGroupByRepositorynameForbidden creates a PutRepositoriesPypiGroupByRepositorynameForbidden with default headers values
func NewPutRepositoriesPypiGroupByRepositorynameForbidden() *PutRepositoriesPypiGroupByRepositorynameForbidden {
	return &PutRepositoriesPypiGroupByRepositorynameForbidden{}
}

/*
PutRepositoriesPypiGroupByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesPypiGroupByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories pypi group by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesPypiGroupByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories pypi group by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesPypiGroupByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories pypi group by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesPypiGroupByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories pypi group by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesPypiGroupByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories pypi group by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesPypiGroupByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories pypi group by repositoryname forbidden response
func (o *PutRepositoriesPypiGroupByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesPypiGroupByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/pypi/group/{repositoryName}][%d] putRepositoriesPypiGroupByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesPypiGroupByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/pypi/group/{repositoryName}][%d] putRepositoriesPypiGroupByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesPypiGroupByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
