// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesCondaProxyByRepositoryNameReader is a Reader for the PutRepositoriesCondaProxyByRepositoryName structure.
type PutRepositoriesCondaProxyByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesCondaProxyByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesCondaProxyByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesCondaProxyByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesCondaProxyByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesCondaProxyByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/conda/proxy/{repositoryName}] PutRepositoriesCondaProxyByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesCondaProxyByRepositoryNameNoContent creates a PutRepositoriesCondaProxyByRepositoryNameNoContent with default headers values
func NewPutRepositoriesCondaProxyByRepositoryNameNoContent() *PutRepositoriesCondaProxyByRepositoryNameNoContent {
	return &PutRepositoriesCondaProxyByRepositoryNameNoContent{}
}

/*
PutRepositoriesCondaProxyByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesCondaProxyByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories conda proxy by repository name no content response has a 2xx status code
func (o *PutRepositoriesCondaProxyByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories conda proxy by repository name no content response has a 3xx status code
func (o *PutRepositoriesCondaProxyByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories conda proxy by repository name no content response has a 4xx status code
func (o *PutRepositoriesCondaProxyByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories conda proxy by repository name no content response has a 5xx status code
func (o *PutRepositoriesCondaProxyByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories conda proxy by repository name no content response a status code equal to that given
func (o *PutRepositoriesCondaProxyByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories conda proxy by repository name no content response
func (o *PutRepositoriesCondaProxyByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesCondaProxyByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conda/proxy/{repositoryName}][%d] putRepositoriesCondaProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesCondaProxyByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conda/proxy/{repositoryName}][%d] putRepositoriesCondaProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesCondaProxyByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesCondaProxyByRepositoryNameBadRequest creates a PutRepositoriesCondaProxyByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesCondaProxyByRepositoryNameBadRequest() *PutRepositoriesCondaProxyByRepositoryNameBadRequest {
	return &PutRepositoriesCondaProxyByRepositoryNameBadRequest{}
}

/*
PutRepositoriesCondaProxyByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesCondaProxyByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories conda proxy by repository name bad request response has a 2xx status code
func (o *PutRepositoriesCondaProxyByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories conda proxy by repository name bad request response has a 3xx status code
func (o *PutRepositoriesCondaProxyByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories conda proxy by repository name bad request response has a 4xx status code
func (o *PutRepositoriesCondaProxyByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories conda proxy by repository name bad request response has a 5xx status code
func (o *PutRepositoriesCondaProxyByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories conda proxy by repository name bad request response a status code equal to that given
func (o *PutRepositoriesCondaProxyByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories conda proxy by repository name bad request response
func (o *PutRepositoriesCondaProxyByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesCondaProxyByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conda/proxy/{repositoryName}][%d] putRepositoriesCondaProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesCondaProxyByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conda/proxy/{repositoryName}][%d] putRepositoriesCondaProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesCondaProxyByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesCondaProxyByRepositoryNameUnauthorized creates a PutRepositoriesCondaProxyByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesCondaProxyByRepositoryNameUnauthorized() *PutRepositoriesCondaProxyByRepositoryNameUnauthorized {
	return &PutRepositoriesCondaProxyByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesCondaProxyByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesCondaProxyByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories conda proxy by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesCondaProxyByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories conda proxy by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesCondaProxyByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories conda proxy by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesCondaProxyByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories conda proxy by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesCondaProxyByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories conda proxy by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesCondaProxyByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories conda proxy by repository name unauthorized response
func (o *PutRepositoriesCondaProxyByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesCondaProxyByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conda/proxy/{repositoryName}][%d] putRepositoriesCondaProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesCondaProxyByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conda/proxy/{repositoryName}][%d] putRepositoriesCondaProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesCondaProxyByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesCondaProxyByRepositoryNameForbidden creates a PutRepositoriesCondaProxyByRepositoryNameForbidden with default headers values
func NewPutRepositoriesCondaProxyByRepositoryNameForbidden() *PutRepositoriesCondaProxyByRepositoryNameForbidden {
	return &PutRepositoriesCondaProxyByRepositoryNameForbidden{}
}

/*
PutRepositoriesCondaProxyByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesCondaProxyByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories conda proxy by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesCondaProxyByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories conda proxy by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesCondaProxyByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories conda proxy by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesCondaProxyByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories conda proxy by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesCondaProxyByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories conda proxy by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesCondaProxyByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories conda proxy by repository name forbidden response
func (o *PutRepositoriesCondaProxyByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesCondaProxyByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conda/proxy/{repositoryName}][%d] putRepositoriesCondaProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesCondaProxyByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conda/proxy/{repositoryName}][%d] putRepositoriesCondaProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesCondaProxyByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
