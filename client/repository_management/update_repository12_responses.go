// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateRepository12Reader is a Reader for the UpdateRepository12 structure.
type UpdateRepository12Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRepository12Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateRepository12NoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRepository12BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRepository12Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRepository12Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/composer/proxy/{repositoryName}] updateRepository_12", response, response.Code())
	}
}

// NewUpdateRepository12NoContent creates a UpdateRepository12NoContent with default headers values
func NewUpdateRepository12NoContent() *UpdateRepository12NoContent {
	return &UpdateRepository12NoContent{}
}

/*
UpdateRepository12NoContent describes a response with status code 204, with default header values.

Repository updated
*/
type UpdateRepository12NoContent struct {
}

// IsSuccess returns true when this update repository12 no content response has a 2xx status code
func (o *UpdateRepository12NoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update repository12 no content response has a 3xx status code
func (o *UpdateRepository12NoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository12 no content response has a 4xx status code
func (o *UpdateRepository12NoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update repository12 no content response has a 5xx status code
func (o *UpdateRepository12NoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository12 no content response a status code equal to that given
func (o *UpdateRepository12NoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update repository12 no content response
func (o *UpdateRepository12NoContent) Code() int {
	return 204
}

func (o *UpdateRepository12NoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/composer/proxy/{repositoryName}][%d] updateRepository12NoContent", 204)
}

func (o *UpdateRepository12NoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/composer/proxy/{repositoryName}][%d] updateRepository12NoContent", 204)
}

func (o *UpdateRepository12NoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository12BadRequest creates a UpdateRepository12BadRequest with default headers values
func NewUpdateRepository12BadRequest() *UpdateRepository12BadRequest {
	return &UpdateRepository12BadRequest{}
}

/*
UpdateRepository12BadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateRepository12BadRequest struct {
}

// IsSuccess returns true when this update repository12 bad request response has a 2xx status code
func (o *UpdateRepository12BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository12 bad request response has a 3xx status code
func (o *UpdateRepository12BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository12 bad request response has a 4xx status code
func (o *UpdateRepository12BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository12 bad request response has a 5xx status code
func (o *UpdateRepository12BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository12 bad request response a status code equal to that given
func (o *UpdateRepository12BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update repository12 bad request response
func (o *UpdateRepository12BadRequest) Code() int {
	return 400
}

func (o *UpdateRepository12BadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/composer/proxy/{repositoryName}][%d] updateRepository12BadRequest", 400)
}

func (o *UpdateRepository12BadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/composer/proxy/{repositoryName}][%d] updateRepository12BadRequest", 400)
}

func (o *UpdateRepository12BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository12Unauthorized creates a UpdateRepository12Unauthorized with default headers values
func NewUpdateRepository12Unauthorized() *UpdateRepository12Unauthorized {
	return &UpdateRepository12Unauthorized{}
}

/*
UpdateRepository12Unauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type UpdateRepository12Unauthorized struct {
}

// IsSuccess returns true when this update repository12 unauthorized response has a 2xx status code
func (o *UpdateRepository12Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository12 unauthorized response has a 3xx status code
func (o *UpdateRepository12Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository12 unauthorized response has a 4xx status code
func (o *UpdateRepository12Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository12 unauthorized response has a 5xx status code
func (o *UpdateRepository12Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository12 unauthorized response a status code equal to that given
func (o *UpdateRepository12Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update repository12 unauthorized response
func (o *UpdateRepository12Unauthorized) Code() int {
	return 401
}

func (o *UpdateRepository12Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/composer/proxy/{repositoryName}][%d] updateRepository12Unauthorized", 401)
}

func (o *UpdateRepository12Unauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/composer/proxy/{repositoryName}][%d] updateRepository12Unauthorized", 401)
}

func (o *UpdateRepository12Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository12Forbidden creates a UpdateRepository12Forbidden with default headers values
func NewUpdateRepository12Forbidden() *UpdateRepository12Forbidden {
	return &UpdateRepository12Forbidden{}
}

/*
UpdateRepository12Forbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type UpdateRepository12Forbidden struct {
}

// IsSuccess returns true when this update repository12 forbidden response has a 2xx status code
func (o *UpdateRepository12Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository12 forbidden response has a 3xx status code
func (o *UpdateRepository12Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository12 forbidden response has a 4xx status code
func (o *UpdateRepository12Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository12 forbidden response has a 5xx status code
func (o *UpdateRepository12Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository12 forbidden response a status code equal to that given
func (o *UpdateRepository12Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update repository12 forbidden response
func (o *UpdateRepository12Forbidden) Code() int {
	return 403
}

func (o *UpdateRepository12Forbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/composer/proxy/{repositoryName}][%d] updateRepository12Forbidden", 403)
}

func (o *UpdateRepository12Forbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/composer/proxy/{repositoryName}][%d] updateRepository12Forbidden", 403)
}

func (o *UpdateRepository12Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
