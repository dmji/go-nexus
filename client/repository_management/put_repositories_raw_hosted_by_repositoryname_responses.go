// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesRawHostedByRepositorynameReader is a Reader for the PutRepositoriesRawHostedByRepositoryname structure.
type PutRepositoriesRawHostedByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesRawHostedByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesRawHostedByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesRawHostedByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesRawHostedByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesRawHostedByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/raw/hosted/{repositoryName}] PutRepositoriesRawHostedByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesRawHostedByRepositorynameNoContent creates a PutRepositoriesRawHostedByRepositorynameNoContent with default headers values
func NewPutRepositoriesRawHostedByRepositorynameNoContent() *PutRepositoriesRawHostedByRepositorynameNoContent {
	return &PutRepositoriesRawHostedByRepositorynameNoContent{}
}

/*
PutRepositoriesRawHostedByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesRawHostedByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories raw hosted by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesRawHostedByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories raw hosted by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesRawHostedByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories raw hosted by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesRawHostedByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories raw hosted by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesRawHostedByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories raw hosted by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesRawHostedByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories raw hosted by repositoryname no content response
func (o *PutRepositoriesRawHostedByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesRawHostedByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/hosted/{repositoryName}][%d] putRepositoriesRawHostedByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesRawHostedByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/hosted/{repositoryName}][%d] putRepositoriesRawHostedByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesRawHostedByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRawHostedByRepositorynameBadRequest creates a PutRepositoriesRawHostedByRepositorynameBadRequest with default headers values
func NewPutRepositoriesRawHostedByRepositorynameBadRequest() *PutRepositoriesRawHostedByRepositorynameBadRequest {
	return &PutRepositoriesRawHostedByRepositorynameBadRequest{}
}

/*
PutRepositoriesRawHostedByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesRawHostedByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories raw hosted by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesRawHostedByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories raw hosted by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesRawHostedByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories raw hosted by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesRawHostedByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories raw hosted by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesRawHostedByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories raw hosted by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesRawHostedByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories raw hosted by repositoryname bad request response
func (o *PutRepositoriesRawHostedByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesRawHostedByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/hosted/{repositoryName}][%d] putRepositoriesRawHostedByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesRawHostedByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/hosted/{repositoryName}][%d] putRepositoriesRawHostedByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesRawHostedByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRawHostedByRepositorynameUnauthorized creates a PutRepositoriesRawHostedByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesRawHostedByRepositorynameUnauthorized() *PutRepositoriesRawHostedByRepositorynameUnauthorized {
	return &PutRepositoriesRawHostedByRepositorynameUnauthorized{}
}

/*
PutRepositoriesRawHostedByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesRawHostedByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories raw hosted by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesRawHostedByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories raw hosted by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesRawHostedByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories raw hosted by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesRawHostedByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories raw hosted by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesRawHostedByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories raw hosted by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesRawHostedByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories raw hosted by repositoryname unauthorized response
func (o *PutRepositoriesRawHostedByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesRawHostedByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/hosted/{repositoryName}][%d] putRepositoriesRawHostedByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesRawHostedByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/hosted/{repositoryName}][%d] putRepositoriesRawHostedByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesRawHostedByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRawHostedByRepositorynameForbidden creates a PutRepositoriesRawHostedByRepositorynameForbidden with default headers values
func NewPutRepositoriesRawHostedByRepositorynameForbidden() *PutRepositoriesRawHostedByRepositorynameForbidden {
	return &PutRepositoriesRawHostedByRepositorynameForbidden{}
}

/*
PutRepositoriesRawHostedByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesRawHostedByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories raw hosted by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesRawHostedByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories raw hosted by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesRawHostedByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories raw hosted by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesRawHostedByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories raw hosted by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesRawHostedByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories raw hosted by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesRawHostedByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories raw hosted by repositoryname forbidden response
func (o *PutRepositoriesRawHostedByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesRawHostedByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/hosted/{repositoryName}][%d] putRepositoriesRawHostedByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesRawHostedByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/hosted/{repositoryName}][%d] putRepositoriesRawHostedByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesRawHostedByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
