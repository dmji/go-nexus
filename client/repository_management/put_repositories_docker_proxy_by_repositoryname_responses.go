// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesDockerProxyByRepositorynameReader is a Reader for the PutRepositoriesDockerProxyByRepositoryname structure.
type PutRepositoriesDockerProxyByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesDockerProxyByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesDockerProxyByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesDockerProxyByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesDockerProxyByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesDockerProxyByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRepositoriesDockerProxyByRepositorynameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/docker/proxy/{repositoryName}] PutRepositoriesDockerProxyByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesDockerProxyByRepositorynameNoContent creates a PutRepositoriesDockerProxyByRepositorynameNoContent with default headers values
func NewPutRepositoriesDockerProxyByRepositorynameNoContent() *PutRepositoriesDockerProxyByRepositorynameNoContent {
	return &PutRepositoriesDockerProxyByRepositorynameNoContent{}
}

/*
PutRepositoriesDockerProxyByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesDockerProxyByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories docker proxy by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesDockerProxyByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories docker proxy by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesDockerProxyByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories docker proxy by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesDockerProxyByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories docker proxy by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesDockerProxyByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories docker proxy by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesDockerProxyByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories docker proxy by repositoryname no content response
func (o *PutRepositoriesDockerProxyByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesDockerProxyByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/proxy/{repositoryName}][%d] putRepositoriesDockerProxyByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesDockerProxyByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/proxy/{repositoryName}][%d] putRepositoriesDockerProxyByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesDockerProxyByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesDockerProxyByRepositorynameBadRequest creates a PutRepositoriesDockerProxyByRepositorynameBadRequest with default headers values
func NewPutRepositoriesDockerProxyByRepositorynameBadRequest() *PutRepositoriesDockerProxyByRepositorynameBadRequest {
	return &PutRepositoriesDockerProxyByRepositorynameBadRequest{}
}

/*
PutRepositoriesDockerProxyByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesDockerProxyByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories docker proxy by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesDockerProxyByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories docker proxy by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesDockerProxyByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories docker proxy by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesDockerProxyByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories docker proxy by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesDockerProxyByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories docker proxy by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesDockerProxyByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories docker proxy by repositoryname bad request response
func (o *PutRepositoriesDockerProxyByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesDockerProxyByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/proxy/{repositoryName}][%d] putRepositoriesDockerProxyByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesDockerProxyByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/proxy/{repositoryName}][%d] putRepositoriesDockerProxyByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesDockerProxyByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesDockerProxyByRepositorynameUnauthorized creates a PutRepositoriesDockerProxyByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesDockerProxyByRepositorynameUnauthorized() *PutRepositoriesDockerProxyByRepositorynameUnauthorized {
	return &PutRepositoriesDockerProxyByRepositorynameUnauthorized{}
}

/*
PutRepositoriesDockerProxyByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesDockerProxyByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories docker proxy by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesDockerProxyByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories docker proxy by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesDockerProxyByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories docker proxy by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesDockerProxyByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories docker proxy by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesDockerProxyByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories docker proxy by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesDockerProxyByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories docker proxy by repositoryname unauthorized response
func (o *PutRepositoriesDockerProxyByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesDockerProxyByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/proxy/{repositoryName}][%d] putRepositoriesDockerProxyByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesDockerProxyByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/proxy/{repositoryName}][%d] putRepositoriesDockerProxyByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesDockerProxyByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesDockerProxyByRepositorynameForbidden creates a PutRepositoriesDockerProxyByRepositorynameForbidden with default headers values
func NewPutRepositoriesDockerProxyByRepositorynameForbidden() *PutRepositoriesDockerProxyByRepositorynameForbidden {
	return &PutRepositoriesDockerProxyByRepositorynameForbidden{}
}

/*
PutRepositoriesDockerProxyByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesDockerProxyByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories docker proxy by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesDockerProxyByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories docker proxy by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesDockerProxyByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories docker proxy by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesDockerProxyByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories docker proxy by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesDockerProxyByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories docker proxy by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesDockerProxyByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories docker proxy by repositoryname forbidden response
func (o *PutRepositoriesDockerProxyByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesDockerProxyByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/proxy/{repositoryName}][%d] putRepositoriesDockerProxyByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesDockerProxyByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/proxy/{repositoryName}][%d] putRepositoriesDockerProxyByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesDockerProxyByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesDockerProxyByRepositorynameNotFound creates a PutRepositoriesDockerProxyByRepositorynameNotFound with default headers values
func NewPutRepositoriesDockerProxyByRepositorynameNotFound() *PutRepositoriesDockerProxyByRepositorynameNotFound {
	return &PutRepositoriesDockerProxyByRepositorynameNotFound{}
}

/*
PutRepositoriesDockerProxyByRepositorynameNotFound describes a response with status code 404, with default header values.

Repository not found
*/
type PutRepositoriesDockerProxyByRepositorynameNotFound struct {
}

// IsSuccess returns true when this put repositories docker proxy by repositoryname not found response has a 2xx status code
func (o *PutRepositoriesDockerProxyByRepositorynameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories docker proxy by repositoryname not found response has a 3xx status code
func (o *PutRepositoriesDockerProxyByRepositorynameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories docker proxy by repositoryname not found response has a 4xx status code
func (o *PutRepositoriesDockerProxyByRepositorynameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories docker proxy by repositoryname not found response has a 5xx status code
func (o *PutRepositoriesDockerProxyByRepositorynameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories docker proxy by repositoryname not found response a status code equal to that given
func (o *PutRepositoriesDockerProxyByRepositorynameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put repositories docker proxy by repositoryname not found response
func (o *PutRepositoriesDockerProxyByRepositorynameNotFound) Code() int {
	return 404
}

func (o *PutRepositoriesDockerProxyByRepositorynameNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/proxy/{repositoryName}][%d] putRepositoriesDockerProxyByRepositorynameNotFound", 404)
}

func (o *PutRepositoriesDockerProxyByRepositorynameNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/proxy/{repositoryName}][%d] putRepositoriesDockerProxyByRepositorynameNotFound", 404)
}

func (o *PutRepositoriesDockerProxyByRepositorynameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
