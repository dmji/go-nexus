// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesGoGroupByRepositorynameReader is a Reader for the PutRepositoriesGoGroupByRepositoryname structure.
type PutRepositoriesGoGroupByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesGoGroupByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesGoGroupByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesGoGroupByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesGoGroupByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesGoGroupByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRepositoriesGoGroupByRepositorynameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/go/group/{repositoryName}] PutRepositoriesGoGroupByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesGoGroupByRepositorynameNoContent creates a PutRepositoriesGoGroupByRepositorynameNoContent with default headers values
func NewPutRepositoriesGoGroupByRepositorynameNoContent() *PutRepositoriesGoGroupByRepositorynameNoContent {
	return &PutRepositoriesGoGroupByRepositorynameNoContent{}
}

/*
PutRepositoriesGoGroupByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesGoGroupByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories go group by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesGoGroupByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories go group by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesGoGroupByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories go group by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesGoGroupByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories go group by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesGoGroupByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories go group by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesGoGroupByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories go group by repositoryname no content response
func (o *PutRepositoriesGoGroupByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesGoGroupByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] putRepositoriesGoGroupByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesGoGroupByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] putRepositoriesGoGroupByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesGoGroupByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesGoGroupByRepositorynameBadRequest creates a PutRepositoriesGoGroupByRepositorynameBadRequest with default headers values
func NewPutRepositoriesGoGroupByRepositorynameBadRequest() *PutRepositoriesGoGroupByRepositorynameBadRequest {
	return &PutRepositoriesGoGroupByRepositorynameBadRequest{}
}

/*
PutRepositoriesGoGroupByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesGoGroupByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories go group by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesGoGroupByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories go group by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesGoGroupByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories go group by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesGoGroupByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories go group by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesGoGroupByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories go group by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesGoGroupByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories go group by repositoryname bad request response
func (o *PutRepositoriesGoGroupByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesGoGroupByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] putRepositoriesGoGroupByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesGoGroupByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] putRepositoriesGoGroupByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesGoGroupByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesGoGroupByRepositorynameUnauthorized creates a PutRepositoriesGoGroupByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesGoGroupByRepositorynameUnauthorized() *PutRepositoriesGoGroupByRepositorynameUnauthorized {
	return &PutRepositoriesGoGroupByRepositorynameUnauthorized{}
}

/*
PutRepositoriesGoGroupByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesGoGroupByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories go group by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesGoGroupByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories go group by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesGoGroupByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories go group by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesGoGroupByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories go group by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesGoGroupByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories go group by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesGoGroupByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories go group by repositoryname unauthorized response
func (o *PutRepositoriesGoGroupByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesGoGroupByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] putRepositoriesGoGroupByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesGoGroupByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] putRepositoriesGoGroupByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesGoGroupByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesGoGroupByRepositorynameForbidden creates a PutRepositoriesGoGroupByRepositorynameForbidden with default headers values
func NewPutRepositoriesGoGroupByRepositorynameForbidden() *PutRepositoriesGoGroupByRepositorynameForbidden {
	return &PutRepositoriesGoGroupByRepositorynameForbidden{}
}

/*
PutRepositoriesGoGroupByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesGoGroupByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories go group by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesGoGroupByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories go group by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesGoGroupByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories go group by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesGoGroupByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories go group by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesGoGroupByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories go group by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesGoGroupByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories go group by repositoryname forbidden response
func (o *PutRepositoriesGoGroupByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesGoGroupByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] putRepositoriesGoGroupByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesGoGroupByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] putRepositoriesGoGroupByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesGoGroupByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesGoGroupByRepositorynameNotFound creates a PutRepositoriesGoGroupByRepositorynameNotFound with default headers values
func NewPutRepositoriesGoGroupByRepositorynameNotFound() *PutRepositoriesGoGroupByRepositorynameNotFound {
	return &PutRepositoriesGoGroupByRepositorynameNotFound{}
}

/*
PutRepositoriesGoGroupByRepositorynameNotFound describes a response with status code 404, with default header values.

Repository not found
*/
type PutRepositoriesGoGroupByRepositorynameNotFound struct {
}

// IsSuccess returns true when this put repositories go group by repositoryname not found response has a 2xx status code
func (o *PutRepositoriesGoGroupByRepositorynameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories go group by repositoryname not found response has a 3xx status code
func (o *PutRepositoriesGoGroupByRepositorynameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories go group by repositoryname not found response has a 4xx status code
func (o *PutRepositoriesGoGroupByRepositorynameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories go group by repositoryname not found response has a 5xx status code
func (o *PutRepositoriesGoGroupByRepositorynameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories go group by repositoryname not found response a status code equal to that given
func (o *PutRepositoriesGoGroupByRepositorynameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put repositories go group by repositoryname not found response
func (o *PutRepositoriesGoGroupByRepositorynameNotFound) Code() int {
	return 404
}

func (o *PutRepositoriesGoGroupByRepositorynameNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] putRepositoriesGoGroupByRepositorynameNotFound", 404)
}

func (o *PutRepositoriesGoGroupByRepositorynameNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/group/{repositoryName}][%d] putRepositoriesGoGroupByRepositorynameNotFound", 404)
}

func (o *PutRepositoriesGoGroupByRepositorynameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
