// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesRProxyByRepositoryNameReader is a Reader for the PutRepositoriesRProxyByRepositoryName structure.
type PutRepositoriesRProxyByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesRProxyByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesRProxyByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesRProxyByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesRProxyByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesRProxyByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRepositoriesRProxyByRepositoryNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/r/proxy/{repositoryName}] PutRepositoriesRProxyByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesRProxyByRepositoryNameNoContent creates a PutRepositoriesRProxyByRepositoryNameNoContent with default headers values
func NewPutRepositoriesRProxyByRepositoryNameNoContent() *PutRepositoriesRProxyByRepositoryNameNoContent {
	return &PutRepositoriesRProxyByRepositoryNameNoContent{}
}

/*
PutRepositoriesRProxyByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesRProxyByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories r proxy by repository name no content response has a 2xx status code
func (o *PutRepositoriesRProxyByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories r proxy by repository name no content response has a 3xx status code
func (o *PutRepositoriesRProxyByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories r proxy by repository name no content response has a 4xx status code
func (o *PutRepositoriesRProxyByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories r proxy by repository name no content response has a 5xx status code
func (o *PutRepositoriesRProxyByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories r proxy by repository name no content response a status code equal to that given
func (o *PutRepositoriesRProxyByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories r proxy by repository name no content response
func (o *PutRepositoriesRProxyByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesRProxyByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/proxy/{repositoryName}][%d] putRepositoriesRProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesRProxyByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/proxy/{repositoryName}][%d] putRepositoriesRProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesRProxyByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRProxyByRepositoryNameBadRequest creates a PutRepositoriesRProxyByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesRProxyByRepositoryNameBadRequest() *PutRepositoriesRProxyByRepositoryNameBadRequest {
	return &PutRepositoriesRProxyByRepositoryNameBadRequest{}
}

/*
PutRepositoriesRProxyByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesRProxyByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories r proxy by repository name bad request response has a 2xx status code
func (o *PutRepositoriesRProxyByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories r proxy by repository name bad request response has a 3xx status code
func (o *PutRepositoriesRProxyByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories r proxy by repository name bad request response has a 4xx status code
func (o *PutRepositoriesRProxyByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories r proxy by repository name bad request response has a 5xx status code
func (o *PutRepositoriesRProxyByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories r proxy by repository name bad request response a status code equal to that given
func (o *PutRepositoriesRProxyByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories r proxy by repository name bad request response
func (o *PutRepositoriesRProxyByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesRProxyByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/proxy/{repositoryName}][%d] putRepositoriesRProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesRProxyByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/proxy/{repositoryName}][%d] putRepositoriesRProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesRProxyByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRProxyByRepositoryNameUnauthorized creates a PutRepositoriesRProxyByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesRProxyByRepositoryNameUnauthorized() *PutRepositoriesRProxyByRepositoryNameUnauthorized {
	return &PutRepositoriesRProxyByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesRProxyByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesRProxyByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories r proxy by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesRProxyByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories r proxy by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesRProxyByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories r proxy by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesRProxyByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories r proxy by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesRProxyByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories r proxy by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesRProxyByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories r proxy by repository name unauthorized response
func (o *PutRepositoriesRProxyByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesRProxyByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/proxy/{repositoryName}][%d] putRepositoriesRProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesRProxyByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/proxy/{repositoryName}][%d] putRepositoriesRProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesRProxyByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRProxyByRepositoryNameForbidden creates a PutRepositoriesRProxyByRepositoryNameForbidden with default headers values
func NewPutRepositoriesRProxyByRepositoryNameForbidden() *PutRepositoriesRProxyByRepositoryNameForbidden {
	return &PutRepositoriesRProxyByRepositoryNameForbidden{}
}

/*
PutRepositoriesRProxyByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesRProxyByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories r proxy by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesRProxyByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories r proxy by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesRProxyByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories r proxy by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesRProxyByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories r proxy by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesRProxyByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories r proxy by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesRProxyByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories r proxy by repository name forbidden response
func (o *PutRepositoriesRProxyByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesRProxyByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/proxy/{repositoryName}][%d] putRepositoriesRProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesRProxyByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/proxy/{repositoryName}][%d] putRepositoriesRProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesRProxyByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRProxyByRepositoryNameNotFound creates a PutRepositoriesRProxyByRepositoryNameNotFound with default headers values
func NewPutRepositoriesRProxyByRepositoryNameNotFound() *PutRepositoriesRProxyByRepositoryNameNotFound {
	return &PutRepositoriesRProxyByRepositoryNameNotFound{}
}

/*
PutRepositoriesRProxyByRepositoryNameNotFound describes a response with status code 404, with default header values.

Repository not found
*/
type PutRepositoriesRProxyByRepositoryNameNotFound struct {
}

// IsSuccess returns true when this put repositories r proxy by repository name not found response has a 2xx status code
func (o *PutRepositoriesRProxyByRepositoryNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories r proxy by repository name not found response has a 3xx status code
func (o *PutRepositoriesRProxyByRepositoryNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories r proxy by repository name not found response has a 4xx status code
func (o *PutRepositoriesRProxyByRepositoryNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories r proxy by repository name not found response has a 5xx status code
func (o *PutRepositoriesRProxyByRepositoryNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories r proxy by repository name not found response a status code equal to that given
func (o *PutRepositoriesRProxyByRepositoryNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put repositories r proxy by repository name not found response
func (o *PutRepositoriesRProxyByRepositoryNameNotFound) Code() int {
	return 404
}

func (o *PutRepositoriesRProxyByRepositoryNameNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/proxy/{repositoryName}][%d] putRepositoriesRProxyByRepositoryNameNotFound", 404)
}

func (o *PutRepositoriesRProxyByRepositoryNameNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/proxy/{repositoryName}][%d] putRepositoriesRProxyByRepositoryNameNotFound", 404)
}

func (o *PutRepositoriesRProxyByRepositoryNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
