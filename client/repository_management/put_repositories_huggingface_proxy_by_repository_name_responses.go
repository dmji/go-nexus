// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesHuggingfaceProxyByRepositoryNameReader is a Reader for the PutRepositoriesHuggingfaceProxyByRepositoryName structure.
type PutRepositoriesHuggingfaceProxyByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesHuggingfaceProxyByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesHuggingfaceProxyByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesHuggingfaceProxyByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesHuggingfaceProxyByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/huggingface/proxy/{repositoryName}] PutRepositoriesHuggingfaceProxyByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesHuggingfaceProxyByRepositoryNameNoContent creates a PutRepositoriesHuggingfaceProxyByRepositoryNameNoContent with default headers values
func NewPutRepositoriesHuggingfaceProxyByRepositoryNameNoContent() *PutRepositoriesHuggingfaceProxyByRepositoryNameNoContent {
	return &PutRepositoriesHuggingfaceProxyByRepositoryNameNoContent{}
}

/*
PutRepositoriesHuggingfaceProxyByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesHuggingfaceProxyByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories huggingface proxy by repository name no content response has a 2xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories huggingface proxy by repository name no content response has a 3xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories huggingface proxy by repository name no content response has a 4xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories huggingface proxy by repository name no content response has a 5xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories huggingface proxy by repository name no content response a status code equal to that given
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories huggingface proxy by repository name no content response
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/huggingface/proxy/{repositoryName}][%d] putRepositoriesHuggingfaceProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/huggingface/proxy/{repositoryName}][%d] putRepositoriesHuggingfaceProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesHuggingfaceProxyByRepositoryNameBadRequest creates a PutRepositoriesHuggingfaceProxyByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesHuggingfaceProxyByRepositoryNameBadRequest() *PutRepositoriesHuggingfaceProxyByRepositoryNameBadRequest {
	return &PutRepositoriesHuggingfaceProxyByRepositoryNameBadRequest{}
}

/*
PutRepositoriesHuggingfaceProxyByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesHuggingfaceProxyByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories huggingface proxy by repository name bad request response has a 2xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories huggingface proxy by repository name bad request response has a 3xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories huggingface proxy by repository name bad request response has a 4xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories huggingface proxy by repository name bad request response has a 5xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories huggingface proxy by repository name bad request response a status code equal to that given
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories huggingface proxy by repository name bad request response
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/huggingface/proxy/{repositoryName}][%d] putRepositoriesHuggingfaceProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/huggingface/proxy/{repositoryName}][%d] putRepositoriesHuggingfaceProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesHuggingfaceProxyByRepositoryNameUnauthorized creates a PutRepositoriesHuggingfaceProxyByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesHuggingfaceProxyByRepositoryNameUnauthorized() *PutRepositoriesHuggingfaceProxyByRepositoryNameUnauthorized {
	return &PutRepositoriesHuggingfaceProxyByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesHuggingfaceProxyByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesHuggingfaceProxyByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories huggingface proxy by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories huggingface proxy by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories huggingface proxy by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories huggingface proxy by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories huggingface proxy by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories huggingface proxy by repository name unauthorized response
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/huggingface/proxy/{repositoryName}][%d] putRepositoriesHuggingfaceProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/huggingface/proxy/{repositoryName}][%d] putRepositoriesHuggingfaceProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesHuggingfaceProxyByRepositoryNameForbidden creates a PutRepositoriesHuggingfaceProxyByRepositoryNameForbidden with default headers values
func NewPutRepositoriesHuggingfaceProxyByRepositoryNameForbidden() *PutRepositoriesHuggingfaceProxyByRepositoryNameForbidden {
	return &PutRepositoriesHuggingfaceProxyByRepositoryNameForbidden{}
}

/*
PutRepositoriesHuggingfaceProxyByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesHuggingfaceProxyByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories huggingface proxy by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories huggingface proxy by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories huggingface proxy by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories huggingface proxy by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories huggingface proxy by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories huggingface proxy by repository name forbidden response
func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/huggingface/proxy/{repositoryName}][%d] putRepositoriesHuggingfaceProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/huggingface/proxy/{repositoryName}][%d] putRepositoriesHuggingfaceProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesHuggingfaceProxyByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
