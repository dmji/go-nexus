// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dmji/go-nexus/models"
)

// GetRepositoriesByRepositorynameReader is a Reader for the GetRepositoriesByRepositoryname structure.
type GetRepositoriesByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesByRepositorynameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRepositoriesByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRepositoriesByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoriesByRepositorynameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/repositories/{repositoryName}] GetRepositoriesByRepositoryname", response, response.Code())
	}
}

// NewGetRepositoriesByRepositorynameOK creates a GetRepositoriesByRepositorynameOK with default headers values
func NewGetRepositoriesByRepositorynameOK() *GetRepositoriesByRepositorynameOK {
	return &GetRepositoriesByRepositorynameOK{}
}

/*
GetRepositoriesByRepositorynameOK describes a response with status code 200, with default header values.

successful operation
*/
type GetRepositoriesByRepositorynameOK struct {
	Payload *models.RepositoryXO
}

// IsSuccess returns true when this get repositories by repositoryname o k response has a 2xx status code
func (o *GetRepositoriesByRepositorynameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get repositories by repositoryname o k response has a 3xx status code
func (o *GetRepositoriesByRepositorynameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get repositories by repositoryname o k response has a 4xx status code
func (o *GetRepositoriesByRepositorynameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get repositories by repositoryname o k response has a 5xx status code
func (o *GetRepositoriesByRepositorynameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get repositories by repositoryname o k response a status code equal to that given
func (o *GetRepositoriesByRepositorynameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get repositories by repositoryname o k response
func (o *GetRepositoriesByRepositorynameOK) Code() int {
	return 200
}

func (o *GetRepositoriesByRepositorynameOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/repositories/{repositoryName}][%d] getRepositoriesByRepositorynameOK %s", 200, payload)
}

func (o *GetRepositoriesByRepositorynameOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/repositories/{repositoryName}][%d] getRepositoriesByRepositorynameOK %s", 200, payload)
}

func (o *GetRepositoriesByRepositorynameOK) GetPayload() *models.RepositoryXO {
	return o.Payload
}

func (o *GetRepositoriesByRepositorynameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RepositoryXO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesByRepositorynameUnauthorized creates a GetRepositoriesByRepositorynameUnauthorized with default headers values
func NewGetRepositoriesByRepositorynameUnauthorized() *GetRepositoriesByRepositorynameUnauthorized {
	return &GetRepositoriesByRepositorynameUnauthorized{}
}

/*
GetRepositoriesByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type GetRepositoriesByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this get repositories by repositoryname unauthorized response has a 2xx status code
func (o *GetRepositoriesByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get repositories by repositoryname unauthorized response has a 3xx status code
func (o *GetRepositoriesByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get repositories by repositoryname unauthorized response has a 4xx status code
func (o *GetRepositoriesByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get repositories by repositoryname unauthorized response has a 5xx status code
func (o *GetRepositoriesByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get repositories by repositoryname unauthorized response a status code equal to that given
func (o *GetRepositoriesByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get repositories by repositoryname unauthorized response
func (o *GetRepositoriesByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *GetRepositoriesByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/repositories/{repositoryName}][%d] getRepositoriesByRepositorynameUnauthorized", 401)
}

func (o *GetRepositoriesByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/repositories/{repositoryName}][%d] getRepositoriesByRepositorynameUnauthorized", 401)
}

func (o *GetRepositoriesByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRepositoriesByRepositorynameForbidden creates a GetRepositoriesByRepositorynameForbidden with default headers values
func NewGetRepositoriesByRepositorynameForbidden() *GetRepositoriesByRepositorynameForbidden {
	return &GetRepositoriesByRepositorynameForbidden{}
}

/*
GetRepositoriesByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type GetRepositoriesByRepositorynameForbidden struct {
}

// IsSuccess returns true when this get repositories by repositoryname forbidden response has a 2xx status code
func (o *GetRepositoriesByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get repositories by repositoryname forbidden response has a 3xx status code
func (o *GetRepositoriesByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get repositories by repositoryname forbidden response has a 4xx status code
func (o *GetRepositoriesByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get repositories by repositoryname forbidden response has a 5xx status code
func (o *GetRepositoriesByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get repositories by repositoryname forbidden response a status code equal to that given
func (o *GetRepositoriesByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get repositories by repositoryname forbidden response
func (o *GetRepositoriesByRepositorynameForbidden) Code() int {
	return 403
}

func (o *GetRepositoriesByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/repositories/{repositoryName}][%d] getRepositoriesByRepositorynameForbidden", 403)
}

func (o *GetRepositoriesByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[GET /v1/repositories/{repositoryName}][%d] getRepositoriesByRepositorynameForbidden", 403)
}

func (o *GetRepositoriesByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRepositoriesByRepositorynameNotFound creates a GetRepositoriesByRepositorynameNotFound with default headers values
func NewGetRepositoriesByRepositorynameNotFound() *GetRepositoriesByRepositorynameNotFound {
	return &GetRepositoriesByRepositorynameNotFound{}
}

/*
GetRepositoriesByRepositorynameNotFound describes a response with status code 404, with default header values.

Repository not found
*/
type GetRepositoriesByRepositorynameNotFound struct {
}

// IsSuccess returns true when this get repositories by repositoryname not found response has a 2xx status code
func (o *GetRepositoriesByRepositorynameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get repositories by repositoryname not found response has a 3xx status code
func (o *GetRepositoriesByRepositorynameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get repositories by repositoryname not found response has a 4xx status code
func (o *GetRepositoriesByRepositorynameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get repositories by repositoryname not found response has a 5xx status code
func (o *GetRepositoriesByRepositorynameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get repositories by repositoryname not found response a status code equal to that given
func (o *GetRepositoriesByRepositorynameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get repositories by repositoryname not found response
func (o *GetRepositoriesByRepositorynameNotFound) Code() int {
	return 404
}

func (o *GetRepositoriesByRepositorynameNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/repositories/{repositoryName}][%d] getRepositoriesByRepositorynameNotFound", 404)
}

func (o *GetRepositoriesByRepositorynameNotFound) String() string {
	return fmt.Sprintf("[GET /v1/repositories/{repositoryName}][%d] getRepositoriesByRepositorynameNotFound", 404)
}

func (o *GetRepositoriesByRepositorynameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
