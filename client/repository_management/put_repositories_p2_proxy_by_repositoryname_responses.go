// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesP2ProxyByRepositorynameReader is a Reader for the PutRepositoriesP2ProxyByRepositoryname structure.
type PutRepositoriesP2ProxyByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesP2ProxyByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesP2ProxyByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesP2ProxyByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesP2ProxyByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesP2ProxyByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/p2/proxy/{repositoryName}] PutRepositoriesP2ProxyByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesP2ProxyByRepositorynameNoContent creates a PutRepositoriesP2ProxyByRepositorynameNoContent with default headers values
func NewPutRepositoriesP2ProxyByRepositorynameNoContent() *PutRepositoriesP2ProxyByRepositorynameNoContent {
	return &PutRepositoriesP2ProxyByRepositorynameNoContent{}
}

/*
PutRepositoriesP2ProxyByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesP2ProxyByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories p2 proxy by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesP2ProxyByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories p2 proxy by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesP2ProxyByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories p2 proxy by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesP2ProxyByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories p2 proxy by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesP2ProxyByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories p2 proxy by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesP2ProxyByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories p2 proxy by repositoryname no content response
func (o *PutRepositoriesP2ProxyByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesP2ProxyByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] putRepositoriesP2ProxyByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesP2ProxyByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] putRepositoriesP2ProxyByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesP2ProxyByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesP2ProxyByRepositorynameBadRequest creates a PutRepositoriesP2ProxyByRepositorynameBadRequest with default headers values
func NewPutRepositoriesP2ProxyByRepositorynameBadRequest() *PutRepositoriesP2ProxyByRepositorynameBadRequest {
	return &PutRepositoriesP2ProxyByRepositorynameBadRequest{}
}

/*
PutRepositoriesP2ProxyByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesP2ProxyByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories p2 proxy by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesP2ProxyByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories p2 proxy by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesP2ProxyByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories p2 proxy by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesP2ProxyByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories p2 proxy by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesP2ProxyByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories p2 proxy by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesP2ProxyByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories p2 proxy by repositoryname bad request response
func (o *PutRepositoriesP2ProxyByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesP2ProxyByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] putRepositoriesP2ProxyByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesP2ProxyByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] putRepositoriesP2ProxyByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesP2ProxyByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesP2ProxyByRepositorynameUnauthorized creates a PutRepositoriesP2ProxyByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesP2ProxyByRepositorynameUnauthorized() *PutRepositoriesP2ProxyByRepositorynameUnauthorized {
	return &PutRepositoriesP2ProxyByRepositorynameUnauthorized{}
}

/*
PutRepositoriesP2ProxyByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesP2ProxyByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories p2 proxy by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesP2ProxyByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories p2 proxy by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesP2ProxyByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories p2 proxy by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesP2ProxyByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories p2 proxy by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesP2ProxyByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories p2 proxy by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesP2ProxyByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories p2 proxy by repositoryname unauthorized response
func (o *PutRepositoriesP2ProxyByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesP2ProxyByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] putRepositoriesP2ProxyByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesP2ProxyByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] putRepositoriesP2ProxyByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesP2ProxyByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesP2ProxyByRepositorynameForbidden creates a PutRepositoriesP2ProxyByRepositorynameForbidden with default headers values
func NewPutRepositoriesP2ProxyByRepositorynameForbidden() *PutRepositoriesP2ProxyByRepositorynameForbidden {
	return &PutRepositoriesP2ProxyByRepositorynameForbidden{}
}

/*
PutRepositoriesP2ProxyByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesP2ProxyByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories p2 proxy by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesP2ProxyByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories p2 proxy by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesP2ProxyByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories p2 proxy by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesP2ProxyByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories p2 proxy by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesP2ProxyByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories p2 proxy by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesP2ProxyByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories p2 proxy by repositoryname forbidden response
func (o *PutRepositoriesP2ProxyByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesP2ProxyByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] putRepositoriesP2ProxyByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesP2ProxyByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] putRepositoriesP2ProxyByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesP2ProxyByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
