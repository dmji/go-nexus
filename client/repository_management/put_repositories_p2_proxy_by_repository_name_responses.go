// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesP2ProxyByRepositoryNameReader is a Reader for the PutRepositoriesP2ProxyByRepositoryName structure.
type PutRepositoriesP2ProxyByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesP2ProxyByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesP2ProxyByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesP2ProxyByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesP2ProxyByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesP2ProxyByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/p2/proxy/{repositoryName}] PutRepositoriesP2ProxyByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesP2ProxyByRepositoryNameNoContent creates a PutRepositoriesP2ProxyByRepositoryNameNoContent with default headers values
func NewPutRepositoriesP2ProxyByRepositoryNameNoContent() *PutRepositoriesP2ProxyByRepositoryNameNoContent {
	return &PutRepositoriesP2ProxyByRepositoryNameNoContent{}
}

/*
PutRepositoriesP2ProxyByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesP2ProxyByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories p2 proxy by repository name no content response has a 2xx status code
func (o *PutRepositoriesP2ProxyByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories p2 proxy by repository name no content response has a 3xx status code
func (o *PutRepositoriesP2ProxyByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories p2 proxy by repository name no content response has a 4xx status code
func (o *PutRepositoriesP2ProxyByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories p2 proxy by repository name no content response has a 5xx status code
func (o *PutRepositoriesP2ProxyByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories p2 proxy by repository name no content response a status code equal to that given
func (o *PutRepositoriesP2ProxyByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories p2 proxy by repository name no content response
func (o *PutRepositoriesP2ProxyByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesP2ProxyByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] putRepositoriesP2ProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesP2ProxyByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] putRepositoriesP2ProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesP2ProxyByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesP2ProxyByRepositoryNameBadRequest creates a PutRepositoriesP2ProxyByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesP2ProxyByRepositoryNameBadRequest() *PutRepositoriesP2ProxyByRepositoryNameBadRequest {
	return &PutRepositoriesP2ProxyByRepositoryNameBadRequest{}
}

/*
PutRepositoriesP2ProxyByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesP2ProxyByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories p2 proxy by repository name bad request response has a 2xx status code
func (o *PutRepositoriesP2ProxyByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories p2 proxy by repository name bad request response has a 3xx status code
func (o *PutRepositoriesP2ProxyByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories p2 proxy by repository name bad request response has a 4xx status code
func (o *PutRepositoriesP2ProxyByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories p2 proxy by repository name bad request response has a 5xx status code
func (o *PutRepositoriesP2ProxyByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories p2 proxy by repository name bad request response a status code equal to that given
func (o *PutRepositoriesP2ProxyByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories p2 proxy by repository name bad request response
func (o *PutRepositoriesP2ProxyByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesP2ProxyByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] putRepositoriesP2ProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesP2ProxyByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] putRepositoriesP2ProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesP2ProxyByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesP2ProxyByRepositoryNameUnauthorized creates a PutRepositoriesP2ProxyByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesP2ProxyByRepositoryNameUnauthorized() *PutRepositoriesP2ProxyByRepositoryNameUnauthorized {
	return &PutRepositoriesP2ProxyByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesP2ProxyByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesP2ProxyByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories p2 proxy by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesP2ProxyByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories p2 proxy by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesP2ProxyByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories p2 proxy by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesP2ProxyByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories p2 proxy by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesP2ProxyByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories p2 proxy by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesP2ProxyByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories p2 proxy by repository name unauthorized response
func (o *PutRepositoriesP2ProxyByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesP2ProxyByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] putRepositoriesP2ProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesP2ProxyByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] putRepositoriesP2ProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesP2ProxyByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesP2ProxyByRepositoryNameForbidden creates a PutRepositoriesP2ProxyByRepositoryNameForbidden with default headers values
func NewPutRepositoriesP2ProxyByRepositoryNameForbidden() *PutRepositoriesP2ProxyByRepositoryNameForbidden {
	return &PutRepositoriesP2ProxyByRepositoryNameForbidden{}
}

/*
PutRepositoriesP2ProxyByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesP2ProxyByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories p2 proxy by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesP2ProxyByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories p2 proxy by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesP2ProxyByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories p2 proxy by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesP2ProxyByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories p2 proxy by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesP2ProxyByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories p2 proxy by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesP2ProxyByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories p2 proxy by repository name forbidden response
func (o *PutRepositoriesP2ProxyByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesP2ProxyByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] putRepositoriesP2ProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesP2ProxyByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/p2/proxy/{repositoryName}][%d] putRepositoriesP2ProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesP2ProxyByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
