// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateRepository15Reader is a Reader for the UpdateRepository15 structure.
type UpdateRepository15Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRepository15Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateRepository15NoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRepository15BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRepository15Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRepository15Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateRepository15NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/conan/proxy/{repositoryName}] updateRepository_15", response, response.Code())
	}
}

// NewUpdateRepository15NoContent creates a UpdateRepository15NoContent with default headers values
func NewUpdateRepository15NoContent() *UpdateRepository15NoContent {
	return &UpdateRepository15NoContent{}
}

/*
UpdateRepository15NoContent describes a response with status code 204, with default header values.

Repository updated
*/
type UpdateRepository15NoContent struct {
}

// IsSuccess returns true when this update repository15 no content response has a 2xx status code
func (o *UpdateRepository15NoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update repository15 no content response has a 3xx status code
func (o *UpdateRepository15NoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository15 no content response has a 4xx status code
func (o *UpdateRepository15NoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update repository15 no content response has a 5xx status code
func (o *UpdateRepository15NoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository15 no content response a status code equal to that given
func (o *UpdateRepository15NoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update repository15 no content response
func (o *UpdateRepository15NoContent) Code() int {
	return 204
}

func (o *UpdateRepository15NoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/proxy/{repositoryName}][%d] updateRepository15NoContent", 204)
}

func (o *UpdateRepository15NoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/proxy/{repositoryName}][%d] updateRepository15NoContent", 204)
}

func (o *UpdateRepository15NoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository15BadRequest creates a UpdateRepository15BadRequest with default headers values
func NewUpdateRepository15BadRequest() *UpdateRepository15BadRequest {
	return &UpdateRepository15BadRequest{}
}

/*
UpdateRepository15BadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateRepository15BadRequest struct {
}

// IsSuccess returns true when this update repository15 bad request response has a 2xx status code
func (o *UpdateRepository15BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository15 bad request response has a 3xx status code
func (o *UpdateRepository15BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository15 bad request response has a 4xx status code
func (o *UpdateRepository15BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository15 bad request response has a 5xx status code
func (o *UpdateRepository15BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository15 bad request response a status code equal to that given
func (o *UpdateRepository15BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update repository15 bad request response
func (o *UpdateRepository15BadRequest) Code() int {
	return 400
}

func (o *UpdateRepository15BadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/proxy/{repositoryName}][%d] updateRepository15BadRequest", 400)
}

func (o *UpdateRepository15BadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/proxy/{repositoryName}][%d] updateRepository15BadRequest", 400)
}

func (o *UpdateRepository15BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository15Unauthorized creates a UpdateRepository15Unauthorized with default headers values
func NewUpdateRepository15Unauthorized() *UpdateRepository15Unauthorized {
	return &UpdateRepository15Unauthorized{}
}

/*
UpdateRepository15Unauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type UpdateRepository15Unauthorized struct {
}

// IsSuccess returns true when this update repository15 unauthorized response has a 2xx status code
func (o *UpdateRepository15Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository15 unauthorized response has a 3xx status code
func (o *UpdateRepository15Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository15 unauthorized response has a 4xx status code
func (o *UpdateRepository15Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository15 unauthorized response has a 5xx status code
func (o *UpdateRepository15Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository15 unauthorized response a status code equal to that given
func (o *UpdateRepository15Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update repository15 unauthorized response
func (o *UpdateRepository15Unauthorized) Code() int {
	return 401
}

func (o *UpdateRepository15Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/proxy/{repositoryName}][%d] updateRepository15Unauthorized", 401)
}

func (o *UpdateRepository15Unauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/proxy/{repositoryName}][%d] updateRepository15Unauthorized", 401)
}

func (o *UpdateRepository15Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository15Forbidden creates a UpdateRepository15Forbidden with default headers values
func NewUpdateRepository15Forbidden() *UpdateRepository15Forbidden {
	return &UpdateRepository15Forbidden{}
}

/*
UpdateRepository15Forbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type UpdateRepository15Forbidden struct {
}

// IsSuccess returns true when this update repository15 forbidden response has a 2xx status code
func (o *UpdateRepository15Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository15 forbidden response has a 3xx status code
func (o *UpdateRepository15Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository15 forbidden response has a 4xx status code
func (o *UpdateRepository15Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository15 forbidden response has a 5xx status code
func (o *UpdateRepository15Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository15 forbidden response a status code equal to that given
func (o *UpdateRepository15Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update repository15 forbidden response
func (o *UpdateRepository15Forbidden) Code() int {
	return 403
}

func (o *UpdateRepository15Forbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/proxy/{repositoryName}][%d] updateRepository15Forbidden", 403)
}

func (o *UpdateRepository15Forbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/proxy/{repositoryName}][%d] updateRepository15Forbidden", 403)
}

func (o *UpdateRepository15Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository15NotFound creates a UpdateRepository15NotFound with default headers values
func NewUpdateRepository15NotFound() *UpdateRepository15NotFound {
	return &UpdateRepository15NotFound{}
}

/*
UpdateRepository15NotFound describes a response with status code 404, with default header values.

Repository not found
*/
type UpdateRepository15NotFound struct {
}

// IsSuccess returns true when this update repository15 not found response has a 2xx status code
func (o *UpdateRepository15NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository15 not found response has a 3xx status code
func (o *UpdateRepository15NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository15 not found response has a 4xx status code
func (o *UpdateRepository15NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository15 not found response has a 5xx status code
func (o *UpdateRepository15NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository15 not found response a status code equal to that given
func (o *UpdateRepository15NotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update repository15 not found response
func (o *UpdateRepository15NotFound) Code() int {
	return 404
}

func (o *UpdateRepository15NotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/proxy/{repositoryName}][%d] updateRepository15NotFound", 404)
}

func (o *UpdateRepository15NotFound) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/proxy/{repositoryName}][%d] updateRepository15NotFound", 404)
}

func (o *UpdateRepository15NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
