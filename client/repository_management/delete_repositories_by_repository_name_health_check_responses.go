// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteRepositoriesByRepositoryNameHealthCheckReader is a Reader for the DeleteRepositoriesByRepositoryNameHealthCheck structure.
type DeleteRepositoriesByRepositoryNameHealthCheckReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRepositoriesByRepositoryNameHealthCheckReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteRepositoriesByRepositoryNameHealthCheckNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteRepositoriesByRepositoryNameHealthCheckUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteRepositoriesByRepositoryNameHealthCheckForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRepositoriesByRepositoryNameHealthCheckNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/repositories/{repositoryName}/health-check] DeleteRepositoriesByRepositoryNameHealthCheck", response, response.Code())
	}
}

// NewDeleteRepositoriesByRepositoryNameHealthCheckNoContent creates a DeleteRepositoriesByRepositoryNameHealthCheckNoContent with default headers values
func NewDeleteRepositoriesByRepositoryNameHealthCheckNoContent() *DeleteRepositoriesByRepositoryNameHealthCheckNoContent {
	return &DeleteRepositoriesByRepositoryNameHealthCheckNoContent{}
}

/*
DeleteRepositoriesByRepositoryNameHealthCheckNoContent describes a response with status code 204, with default header values.

Repository Health Check disabled
*/
type DeleteRepositoriesByRepositoryNameHealthCheckNoContent struct {
}

// IsSuccess returns true when this delete repositories by repository name health check no content response has a 2xx status code
func (o *DeleteRepositoriesByRepositoryNameHealthCheckNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete repositories by repository name health check no content response has a 3xx status code
func (o *DeleteRepositoriesByRepositoryNameHealthCheckNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete repositories by repository name health check no content response has a 4xx status code
func (o *DeleteRepositoriesByRepositoryNameHealthCheckNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete repositories by repository name health check no content response has a 5xx status code
func (o *DeleteRepositoriesByRepositoryNameHealthCheckNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete repositories by repository name health check no content response a status code equal to that given
func (o *DeleteRepositoriesByRepositoryNameHealthCheckNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete repositories by repository name health check no content response
func (o *DeleteRepositoriesByRepositoryNameHealthCheckNoContent) Code() int {
	return 204
}

func (o *DeleteRepositoriesByRepositoryNameHealthCheckNoContent) Error() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}/health-check][%d] deleteRepositoriesByRepositoryNameHealthCheckNoContent", 204)
}

func (o *DeleteRepositoriesByRepositoryNameHealthCheckNoContent) String() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}/health-check][%d] deleteRepositoriesByRepositoryNameHealthCheckNoContent", 204)
}

func (o *DeleteRepositoriesByRepositoryNameHealthCheckNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRepositoriesByRepositoryNameHealthCheckUnauthorized creates a DeleteRepositoriesByRepositoryNameHealthCheckUnauthorized with default headers values
func NewDeleteRepositoriesByRepositoryNameHealthCheckUnauthorized() *DeleteRepositoriesByRepositoryNameHealthCheckUnauthorized {
	return &DeleteRepositoriesByRepositoryNameHealthCheckUnauthorized{}
}

/*
DeleteRepositoriesByRepositoryNameHealthCheckUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type DeleteRepositoriesByRepositoryNameHealthCheckUnauthorized struct {
}

// IsSuccess returns true when this delete repositories by repository name health check unauthorized response has a 2xx status code
func (o *DeleteRepositoriesByRepositoryNameHealthCheckUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete repositories by repository name health check unauthorized response has a 3xx status code
func (o *DeleteRepositoriesByRepositoryNameHealthCheckUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete repositories by repository name health check unauthorized response has a 4xx status code
func (o *DeleteRepositoriesByRepositoryNameHealthCheckUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete repositories by repository name health check unauthorized response has a 5xx status code
func (o *DeleteRepositoriesByRepositoryNameHealthCheckUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete repositories by repository name health check unauthorized response a status code equal to that given
func (o *DeleteRepositoriesByRepositoryNameHealthCheckUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete repositories by repository name health check unauthorized response
func (o *DeleteRepositoriesByRepositoryNameHealthCheckUnauthorized) Code() int {
	return 401
}

func (o *DeleteRepositoriesByRepositoryNameHealthCheckUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}/health-check][%d] deleteRepositoriesByRepositoryNameHealthCheckUnauthorized", 401)
}

func (o *DeleteRepositoriesByRepositoryNameHealthCheckUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}/health-check][%d] deleteRepositoriesByRepositoryNameHealthCheckUnauthorized", 401)
}

func (o *DeleteRepositoriesByRepositoryNameHealthCheckUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRepositoriesByRepositoryNameHealthCheckForbidden creates a DeleteRepositoriesByRepositoryNameHealthCheckForbidden with default headers values
func NewDeleteRepositoriesByRepositoryNameHealthCheckForbidden() *DeleteRepositoriesByRepositoryNameHealthCheckForbidden {
	return &DeleteRepositoriesByRepositoryNameHealthCheckForbidden{}
}

/*
DeleteRepositoriesByRepositoryNameHealthCheckForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type DeleteRepositoriesByRepositoryNameHealthCheckForbidden struct {
}

// IsSuccess returns true when this delete repositories by repository name health check forbidden response has a 2xx status code
func (o *DeleteRepositoriesByRepositoryNameHealthCheckForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete repositories by repository name health check forbidden response has a 3xx status code
func (o *DeleteRepositoriesByRepositoryNameHealthCheckForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete repositories by repository name health check forbidden response has a 4xx status code
func (o *DeleteRepositoriesByRepositoryNameHealthCheckForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete repositories by repository name health check forbidden response has a 5xx status code
func (o *DeleteRepositoriesByRepositoryNameHealthCheckForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete repositories by repository name health check forbidden response a status code equal to that given
func (o *DeleteRepositoriesByRepositoryNameHealthCheckForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete repositories by repository name health check forbidden response
func (o *DeleteRepositoriesByRepositoryNameHealthCheckForbidden) Code() int {
	return 403
}

func (o *DeleteRepositoriesByRepositoryNameHealthCheckForbidden) Error() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}/health-check][%d] deleteRepositoriesByRepositoryNameHealthCheckForbidden", 403)
}

func (o *DeleteRepositoriesByRepositoryNameHealthCheckForbidden) String() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}/health-check][%d] deleteRepositoriesByRepositoryNameHealthCheckForbidden", 403)
}

func (o *DeleteRepositoriesByRepositoryNameHealthCheckForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRepositoriesByRepositoryNameHealthCheckNotFound creates a DeleteRepositoriesByRepositoryNameHealthCheckNotFound with default headers values
func NewDeleteRepositoriesByRepositoryNameHealthCheckNotFound() *DeleteRepositoriesByRepositoryNameHealthCheckNotFound {
	return &DeleteRepositoriesByRepositoryNameHealthCheckNotFound{}
}

/*
DeleteRepositoriesByRepositoryNameHealthCheckNotFound describes a response with status code 404, with default header values.

Repository not found
*/
type DeleteRepositoriesByRepositoryNameHealthCheckNotFound struct {
}

// IsSuccess returns true when this delete repositories by repository name health check not found response has a 2xx status code
func (o *DeleteRepositoriesByRepositoryNameHealthCheckNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete repositories by repository name health check not found response has a 3xx status code
func (o *DeleteRepositoriesByRepositoryNameHealthCheckNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete repositories by repository name health check not found response has a 4xx status code
func (o *DeleteRepositoriesByRepositoryNameHealthCheckNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete repositories by repository name health check not found response has a 5xx status code
func (o *DeleteRepositoriesByRepositoryNameHealthCheckNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete repositories by repository name health check not found response a status code equal to that given
func (o *DeleteRepositoriesByRepositoryNameHealthCheckNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete repositories by repository name health check not found response
func (o *DeleteRepositoriesByRepositoryNameHealthCheckNotFound) Code() int {
	return 404
}

func (o *DeleteRepositoriesByRepositoryNameHealthCheckNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}/health-check][%d] deleteRepositoriesByRepositoryNameHealthCheckNotFound", 404)
}

func (o *DeleteRepositoriesByRepositoryNameHealthCheckNotFound) String() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}/health-check][%d] deleteRepositoriesByRepositoryNameHealthCheckNotFound", 404)
}

func (o *DeleteRepositoriesByRepositoryNameHealthCheckNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
