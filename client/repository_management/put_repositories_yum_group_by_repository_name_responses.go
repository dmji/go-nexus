// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesYumGroupByRepositoryNameReader is a Reader for the PutRepositoriesYumGroupByRepositoryName structure.
type PutRepositoriesYumGroupByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesYumGroupByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesYumGroupByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesYumGroupByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesYumGroupByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesYumGroupByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/yum/group/{repositoryName}] PutRepositoriesYumGroupByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesYumGroupByRepositoryNameNoContent creates a PutRepositoriesYumGroupByRepositoryNameNoContent with default headers values
func NewPutRepositoriesYumGroupByRepositoryNameNoContent() *PutRepositoriesYumGroupByRepositoryNameNoContent {
	return &PutRepositoriesYumGroupByRepositoryNameNoContent{}
}

/*
PutRepositoriesYumGroupByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesYumGroupByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories yum group by repository name no content response has a 2xx status code
func (o *PutRepositoriesYumGroupByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories yum group by repository name no content response has a 3xx status code
func (o *PutRepositoriesYumGroupByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories yum group by repository name no content response has a 4xx status code
func (o *PutRepositoriesYumGroupByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories yum group by repository name no content response has a 5xx status code
func (o *PutRepositoriesYumGroupByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories yum group by repository name no content response a status code equal to that given
func (o *PutRepositoriesYumGroupByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories yum group by repository name no content response
func (o *PutRepositoriesYumGroupByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesYumGroupByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/group/{repositoryName}][%d] putRepositoriesYumGroupByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesYumGroupByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/group/{repositoryName}][%d] putRepositoriesYumGroupByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesYumGroupByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesYumGroupByRepositoryNameBadRequest creates a PutRepositoriesYumGroupByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesYumGroupByRepositoryNameBadRequest() *PutRepositoriesYumGroupByRepositoryNameBadRequest {
	return &PutRepositoriesYumGroupByRepositoryNameBadRequest{}
}

/*
PutRepositoriesYumGroupByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesYumGroupByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories yum group by repository name bad request response has a 2xx status code
func (o *PutRepositoriesYumGroupByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories yum group by repository name bad request response has a 3xx status code
func (o *PutRepositoriesYumGroupByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories yum group by repository name bad request response has a 4xx status code
func (o *PutRepositoriesYumGroupByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories yum group by repository name bad request response has a 5xx status code
func (o *PutRepositoriesYumGroupByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories yum group by repository name bad request response a status code equal to that given
func (o *PutRepositoriesYumGroupByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories yum group by repository name bad request response
func (o *PutRepositoriesYumGroupByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesYumGroupByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/group/{repositoryName}][%d] putRepositoriesYumGroupByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesYumGroupByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/group/{repositoryName}][%d] putRepositoriesYumGroupByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesYumGroupByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesYumGroupByRepositoryNameUnauthorized creates a PutRepositoriesYumGroupByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesYumGroupByRepositoryNameUnauthorized() *PutRepositoriesYumGroupByRepositoryNameUnauthorized {
	return &PutRepositoriesYumGroupByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesYumGroupByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesYumGroupByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories yum group by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesYumGroupByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories yum group by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesYumGroupByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories yum group by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesYumGroupByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories yum group by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesYumGroupByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories yum group by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesYumGroupByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories yum group by repository name unauthorized response
func (o *PutRepositoriesYumGroupByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesYumGroupByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/group/{repositoryName}][%d] putRepositoriesYumGroupByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesYumGroupByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/group/{repositoryName}][%d] putRepositoriesYumGroupByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesYumGroupByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesYumGroupByRepositoryNameForbidden creates a PutRepositoriesYumGroupByRepositoryNameForbidden with default headers values
func NewPutRepositoriesYumGroupByRepositoryNameForbidden() *PutRepositoriesYumGroupByRepositoryNameForbidden {
	return &PutRepositoriesYumGroupByRepositoryNameForbidden{}
}

/*
PutRepositoriesYumGroupByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesYumGroupByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories yum group by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesYumGroupByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories yum group by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesYumGroupByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories yum group by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesYumGroupByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories yum group by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesYumGroupByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories yum group by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesYumGroupByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories yum group by repository name forbidden response
func (o *PutRepositoriesYumGroupByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesYumGroupByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/group/{repositoryName}][%d] putRepositoriesYumGroupByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesYumGroupByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/group/{repositoryName}][%d] putRepositoriesYumGroupByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesYumGroupByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
