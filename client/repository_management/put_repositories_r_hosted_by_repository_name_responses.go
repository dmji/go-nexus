// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesRHostedByRepositoryNameReader is a Reader for the PutRepositoriesRHostedByRepositoryName structure.
type PutRepositoriesRHostedByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesRHostedByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesRHostedByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesRHostedByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesRHostedByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesRHostedByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/r/hosted/{repositoryName}] PutRepositoriesRHostedByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesRHostedByRepositoryNameNoContent creates a PutRepositoriesRHostedByRepositoryNameNoContent with default headers values
func NewPutRepositoriesRHostedByRepositoryNameNoContent() *PutRepositoriesRHostedByRepositoryNameNoContent {
	return &PutRepositoriesRHostedByRepositoryNameNoContent{}
}

/*
PutRepositoriesRHostedByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesRHostedByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories r hosted by repository name no content response has a 2xx status code
func (o *PutRepositoriesRHostedByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories r hosted by repository name no content response has a 3xx status code
func (o *PutRepositoriesRHostedByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories r hosted by repository name no content response has a 4xx status code
func (o *PutRepositoriesRHostedByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories r hosted by repository name no content response has a 5xx status code
func (o *PutRepositoriesRHostedByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories r hosted by repository name no content response a status code equal to that given
func (o *PutRepositoriesRHostedByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories r hosted by repository name no content response
func (o *PutRepositoriesRHostedByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesRHostedByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] putRepositoriesRHostedByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesRHostedByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] putRepositoriesRHostedByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesRHostedByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRHostedByRepositoryNameBadRequest creates a PutRepositoriesRHostedByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesRHostedByRepositoryNameBadRequest() *PutRepositoriesRHostedByRepositoryNameBadRequest {
	return &PutRepositoriesRHostedByRepositoryNameBadRequest{}
}

/*
PutRepositoriesRHostedByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesRHostedByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories r hosted by repository name bad request response has a 2xx status code
func (o *PutRepositoriesRHostedByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories r hosted by repository name bad request response has a 3xx status code
func (o *PutRepositoriesRHostedByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories r hosted by repository name bad request response has a 4xx status code
func (o *PutRepositoriesRHostedByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories r hosted by repository name bad request response has a 5xx status code
func (o *PutRepositoriesRHostedByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories r hosted by repository name bad request response a status code equal to that given
func (o *PutRepositoriesRHostedByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories r hosted by repository name bad request response
func (o *PutRepositoriesRHostedByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesRHostedByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] putRepositoriesRHostedByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesRHostedByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] putRepositoriesRHostedByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesRHostedByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRHostedByRepositoryNameUnauthorized creates a PutRepositoriesRHostedByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesRHostedByRepositoryNameUnauthorized() *PutRepositoriesRHostedByRepositoryNameUnauthorized {
	return &PutRepositoriesRHostedByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesRHostedByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesRHostedByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories r hosted by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesRHostedByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories r hosted by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesRHostedByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories r hosted by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesRHostedByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories r hosted by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesRHostedByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories r hosted by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesRHostedByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories r hosted by repository name unauthorized response
func (o *PutRepositoriesRHostedByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesRHostedByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] putRepositoriesRHostedByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesRHostedByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] putRepositoriesRHostedByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesRHostedByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRHostedByRepositoryNameForbidden creates a PutRepositoriesRHostedByRepositoryNameForbidden with default headers values
func NewPutRepositoriesRHostedByRepositoryNameForbidden() *PutRepositoriesRHostedByRepositoryNameForbidden {
	return &PutRepositoriesRHostedByRepositoryNameForbidden{}
}

/*
PutRepositoriesRHostedByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesRHostedByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories r hosted by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesRHostedByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories r hosted by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesRHostedByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories r hosted by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesRHostedByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories r hosted by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesRHostedByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories r hosted by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesRHostedByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories r hosted by repository name forbidden response
func (o *PutRepositoriesRHostedByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesRHostedByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] putRepositoriesRHostedByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesRHostedByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] putRepositoriesRHostedByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesRHostedByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
