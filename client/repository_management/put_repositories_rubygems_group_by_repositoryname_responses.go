// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesRubygemsGroupByRepositorynameReader is a Reader for the PutRepositoriesRubygemsGroupByRepositoryname structure.
type PutRepositoriesRubygemsGroupByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesRubygemsGroupByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesRubygemsGroupByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesRubygemsGroupByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesRubygemsGroupByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesRubygemsGroupByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/rubygems/group/{repositoryName}] PutRepositoriesRubygemsGroupByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesRubygemsGroupByRepositorynameNoContent creates a PutRepositoriesRubygemsGroupByRepositorynameNoContent with default headers values
func NewPutRepositoriesRubygemsGroupByRepositorynameNoContent() *PutRepositoriesRubygemsGroupByRepositorynameNoContent {
	return &PutRepositoriesRubygemsGroupByRepositorynameNoContent{}
}

/*
PutRepositoriesRubygemsGroupByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesRubygemsGroupByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories rubygems group by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesRubygemsGroupByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories rubygems group by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesRubygemsGroupByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories rubygems group by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesRubygemsGroupByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories rubygems group by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesRubygemsGroupByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories rubygems group by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesRubygemsGroupByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories rubygems group by repositoryname no content response
func (o *PutRepositoriesRubygemsGroupByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesRubygemsGroupByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/rubygems/group/{repositoryName}][%d] putRepositoriesRubygemsGroupByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesRubygemsGroupByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/rubygems/group/{repositoryName}][%d] putRepositoriesRubygemsGroupByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesRubygemsGroupByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRubygemsGroupByRepositorynameBadRequest creates a PutRepositoriesRubygemsGroupByRepositorynameBadRequest with default headers values
func NewPutRepositoriesRubygemsGroupByRepositorynameBadRequest() *PutRepositoriesRubygemsGroupByRepositorynameBadRequest {
	return &PutRepositoriesRubygemsGroupByRepositorynameBadRequest{}
}

/*
PutRepositoriesRubygemsGroupByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesRubygemsGroupByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories rubygems group by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesRubygemsGroupByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories rubygems group by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesRubygemsGroupByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories rubygems group by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesRubygemsGroupByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories rubygems group by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesRubygemsGroupByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories rubygems group by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesRubygemsGroupByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories rubygems group by repositoryname bad request response
func (o *PutRepositoriesRubygemsGroupByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesRubygemsGroupByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/rubygems/group/{repositoryName}][%d] putRepositoriesRubygemsGroupByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesRubygemsGroupByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/rubygems/group/{repositoryName}][%d] putRepositoriesRubygemsGroupByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesRubygemsGroupByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRubygemsGroupByRepositorynameUnauthorized creates a PutRepositoriesRubygemsGroupByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesRubygemsGroupByRepositorynameUnauthorized() *PutRepositoriesRubygemsGroupByRepositorynameUnauthorized {
	return &PutRepositoriesRubygemsGroupByRepositorynameUnauthorized{}
}

/*
PutRepositoriesRubygemsGroupByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesRubygemsGroupByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories rubygems group by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesRubygemsGroupByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories rubygems group by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesRubygemsGroupByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories rubygems group by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesRubygemsGroupByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories rubygems group by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesRubygemsGroupByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories rubygems group by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesRubygemsGroupByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories rubygems group by repositoryname unauthorized response
func (o *PutRepositoriesRubygemsGroupByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesRubygemsGroupByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/rubygems/group/{repositoryName}][%d] putRepositoriesRubygemsGroupByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesRubygemsGroupByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/rubygems/group/{repositoryName}][%d] putRepositoriesRubygemsGroupByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesRubygemsGroupByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRubygemsGroupByRepositorynameForbidden creates a PutRepositoriesRubygemsGroupByRepositorynameForbidden with default headers values
func NewPutRepositoriesRubygemsGroupByRepositorynameForbidden() *PutRepositoriesRubygemsGroupByRepositorynameForbidden {
	return &PutRepositoriesRubygemsGroupByRepositorynameForbidden{}
}

/*
PutRepositoriesRubygemsGroupByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesRubygemsGroupByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories rubygems group by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesRubygemsGroupByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories rubygems group by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesRubygemsGroupByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories rubygems group by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesRubygemsGroupByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories rubygems group by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesRubygemsGroupByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories rubygems group by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesRubygemsGroupByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories rubygems group by repositoryname forbidden response
func (o *PutRepositoriesRubygemsGroupByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesRubygemsGroupByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/rubygems/group/{repositoryName}][%d] putRepositoriesRubygemsGroupByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesRubygemsGroupByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/rubygems/group/{repositoryName}][%d] putRepositoriesRubygemsGroupByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesRubygemsGroupByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
