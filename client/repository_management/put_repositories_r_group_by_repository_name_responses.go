// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesRGroupByRepositoryNameReader is a Reader for the PutRepositoriesRGroupByRepositoryName structure.
type PutRepositoriesRGroupByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesRGroupByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesRGroupByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesRGroupByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesRGroupByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesRGroupByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/r/group/{repositoryName}] PutRepositoriesRGroupByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesRGroupByRepositoryNameNoContent creates a PutRepositoriesRGroupByRepositoryNameNoContent with default headers values
func NewPutRepositoriesRGroupByRepositoryNameNoContent() *PutRepositoriesRGroupByRepositoryNameNoContent {
	return &PutRepositoriesRGroupByRepositoryNameNoContent{}
}

/*
PutRepositoriesRGroupByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesRGroupByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories r group by repository name no content response has a 2xx status code
func (o *PutRepositoriesRGroupByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories r group by repository name no content response has a 3xx status code
func (o *PutRepositoriesRGroupByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories r group by repository name no content response has a 4xx status code
func (o *PutRepositoriesRGroupByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories r group by repository name no content response has a 5xx status code
func (o *PutRepositoriesRGroupByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories r group by repository name no content response a status code equal to that given
func (o *PutRepositoriesRGroupByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories r group by repository name no content response
func (o *PutRepositoriesRGroupByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesRGroupByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] putRepositoriesRGroupByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesRGroupByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] putRepositoriesRGroupByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesRGroupByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRGroupByRepositoryNameBadRequest creates a PutRepositoriesRGroupByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesRGroupByRepositoryNameBadRequest() *PutRepositoriesRGroupByRepositoryNameBadRequest {
	return &PutRepositoriesRGroupByRepositoryNameBadRequest{}
}

/*
PutRepositoriesRGroupByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesRGroupByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories r group by repository name bad request response has a 2xx status code
func (o *PutRepositoriesRGroupByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories r group by repository name bad request response has a 3xx status code
func (o *PutRepositoriesRGroupByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories r group by repository name bad request response has a 4xx status code
func (o *PutRepositoriesRGroupByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories r group by repository name bad request response has a 5xx status code
func (o *PutRepositoriesRGroupByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories r group by repository name bad request response a status code equal to that given
func (o *PutRepositoriesRGroupByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories r group by repository name bad request response
func (o *PutRepositoriesRGroupByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesRGroupByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] putRepositoriesRGroupByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesRGroupByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] putRepositoriesRGroupByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesRGroupByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRGroupByRepositoryNameUnauthorized creates a PutRepositoriesRGroupByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesRGroupByRepositoryNameUnauthorized() *PutRepositoriesRGroupByRepositoryNameUnauthorized {
	return &PutRepositoriesRGroupByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesRGroupByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesRGroupByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories r group by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesRGroupByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories r group by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesRGroupByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories r group by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesRGroupByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories r group by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesRGroupByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories r group by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesRGroupByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories r group by repository name unauthorized response
func (o *PutRepositoriesRGroupByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesRGroupByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] putRepositoriesRGroupByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesRGroupByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] putRepositoriesRGroupByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesRGroupByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRGroupByRepositoryNameForbidden creates a PutRepositoriesRGroupByRepositoryNameForbidden with default headers values
func NewPutRepositoriesRGroupByRepositoryNameForbidden() *PutRepositoriesRGroupByRepositoryNameForbidden {
	return &PutRepositoriesRGroupByRepositoryNameForbidden{}
}

/*
PutRepositoriesRGroupByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesRGroupByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories r group by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesRGroupByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories r group by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesRGroupByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories r group by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesRGroupByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories r group by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesRGroupByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories r group by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesRGroupByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories r group by repository name forbidden response
func (o *PutRepositoriesRGroupByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesRGroupByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] putRepositoriesRGroupByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesRGroupByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] putRepositoriesRGroupByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesRGroupByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
