// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesRawGroupByRepositoryNameReader is a Reader for the PutRepositoriesRawGroupByRepositoryName structure.
type PutRepositoriesRawGroupByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesRawGroupByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesRawGroupByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesRawGroupByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesRawGroupByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesRawGroupByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/raw/group/{repositoryName}] PutRepositoriesRawGroupByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesRawGroupByRepositoryNameNoContent creates a PutRepositoriesRawGroupByRepositoryNameNoContent with default headers values
func NewPutRepositoriesRawGroupByRepositoryNameNoContent() *PutRepositoriesRawGroupByRepositoryNameNoContent {
	return &PutRepositoriesRawGroupByRepositoryNameNoContent{}
}

/*
PutRepositoriesRawGroupByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesRawGroupByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories raw group by repository name no content response has a 2xx status code
func (o *PutRepositoriesRawGroupByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories raw group by repository name no content response has a 3xx status code
func (o *PutRepositoriesRawGroupByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories raw group by repository name no content response has a 4xx status code
func (o *PutRepositoriesRawGroupByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories raw group by repository name no content response has a 5xx status code
func (o *PutRepositoriesRawGroupByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories raw group by repository name no content response a status code equal to that given
func (o *PutRepositoriesRawGroupByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories raw group by repository name no content response
func (o *PutRepositoriesRawGroupByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesRawGroupByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/group/{repositoryName}][%d] putRepositoriesRawGroupByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesRawGroupByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/group/{repositoryName}][%d] putRepositoriesRawGroupByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesRawGroupByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRawGroupByRepositoryNameBadRequest creates a PutRepositoriesRawGroupByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesRawGroupByRepositoryNameBadRequest() *PutRepositoriesRawGroupByRepositoryNameBadRequest {
	return &PutRepositoriesRawGroupByRepositoryNameBadRequest{}
}

/*
PutRepositoriesRawGroupByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesRawGroupByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories raw group by repository name bad request response has a 2xx status code
func (o *PutRepositoriesRawGroupByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories raw group by repository name bad request response has a 3xx status code
func (o *PutRepositoriesRawGroupByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories raw group by repository name bad request response has a 4xx status code
func (o *PutRepositoriesRawGroupByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories raw group by repository name bad request response has a 5xx status code
func (o *PutRepositoriesRawGroupByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories raw group by repository name bad request response a status code equal to that given
func (o *PutRepositoriesRawGroupByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories raw group by repository name bad request response
func (o *PutRepositoriesRawGroupByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesRawGroupByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/group/{repositoryName}][%d] putRepositoriesRawGroupByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesRawGroupByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/group/{repositoryName}][%d] putRepositoriesRawGroupByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesRawGroupByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRawGroupByRepositoryNameUnauthorized creates a PutRepositoriesRawGroupByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesRawGroupByRepositoryNameUnauthorized() *PutRepositoriesRawGroupByRepositoryNameUnauthorized {
	return &PutRepositoriesRawGroupByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesRawGroupByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesRawGroupByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories raw group by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesRawGroupByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories raw group by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesRawGroupByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories raw group by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesRawGroupByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories raw group by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesRawGroupByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories raw group by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesRawGroupByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories raw group by repository name unauthorized response
func (o *PutRepositoriesRawGroupByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesRawGroupByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/group/{repositoryName}][%d] putRepositoriesRawGroupByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesRawGroupByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/group/{repositoryName}][%d] putRepositoriesRawGroupByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesRawGroupByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRawGroupByRepositoryNameForbidden creates a PutRepositoriesRawGroupByRepositoryNameForbidden with default headers values
func NewPutRepositoriesRawGroupByRepositoryNameForbidden() *PutRepositoriesRawGroupByRepositoryNameForbidden {
	return &PutRepositoriesRawGroupByRepositoryNameForbidden{}
}

/*
PutRepositoriesRawGroupByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesRawGroupByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories raw group by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesRawGroupByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories raw group by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesRawGroupByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories raw group by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesRawGroupByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories raw group by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesRawGroupByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories raw group by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesRawGroupByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories raw group by repository name forbidden response
func (o *PutRepositoriesRawGroupByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesRawGroupByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/group/{repositoryName}][%d] putRepositoriesRawGroupByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesRawGroupByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/group/{repositoryName}][%d] putRepositoriesRawGroupByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesRawGroupByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
