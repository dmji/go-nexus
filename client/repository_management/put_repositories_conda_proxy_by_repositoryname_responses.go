// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesCondaProxyByRepositorynameReader is a Reader for the PutRepositoriesCondaProxyByRepositoryname structure.
type PutRepositoriesCondaProxyByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesCondaProxyByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesCondaProxyByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesCondaProxyByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesCondaProxyByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesCondaProxyByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/conda/proxy/{repositoryName}] PutRepositoriesCondaProxyByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesCondaProxyByRepositorynameNoContent creates a PutRepositoriesCondaProxyByRepositorynameNoContent with default headers values
func NewPutRepositoriesCondaProxyByRepositorynameNoContent() *PutRepositoriesCondaProxyByRepositorynameNoContent {
	return &PutRepositoriesCondaProxyByRepositorynameNoContent{}
}

/*
PutRepositoriesCondaProxyByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesCondaProxyByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories conda proxy by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesCondaProxyByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories conda proxy by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesCondaProxyByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories conda proxy by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesCondaProxyByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories conda proxy by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesCondaProxyByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories conda proxy by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesCondaProxyByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories conda proxy by repositoryname no content response
func (o *PutRepositoriesCondaProxyByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesCondaProxyByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conda/proxy/{repositoryName}][%d] putRepositoriesCondaProxyByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesCondaProxyByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conda/proxy/{repositoryName}][%d] putRepositoriesCondaProxyByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesCondaProxyByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesCondaProxyByRepositorynameBadRequest creates a PutRepositoriesCondaProxyByRepositorynameBadRequest with default headers values
func NewPutRepositoriesCondaProxyByRepositorynameBadRequest() *PutRepositoriesCondaProxyByRepositorynameBadRequest {
	return &PutRepositoriesCondaProxyByRepositorynameBadRequest{}
}

/*
PutRepositoriesCondaProxyByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesCondaProxyByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories conda proxy by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesCondaProxyByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories conda proxy by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesCondaProxyByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories conda proxy by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesCondaProxyByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories conda proxy by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesCondaProxyByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories conda proxy by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesCondaProxyByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories conda proxy by repositoryname bad request response
func (o *PutRepositoriesCondaProxyByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesCondaProxyByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conda/proxy/{repositoryName}][%d] putRepositoriesCondaProxyByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesCondaProxyByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conda/proxy/{repositoryName}][%d] putRepositoriesCondaProxyByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesCondaProxyByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesCondaProxyByRepositorynameUnauthorized creates a PutRepositoriesCondaProxyByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesCondaProxyByRepositorynameUnauthorized() *PutRepositoriesCondaProxyByRepositorynameUnauthorized {
	return &PutRepositoriesCondaProxyByRepositorynameUnauthorized{}
}

/*
PutRepositoriesCondaProxyByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesCondaProxyByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories conda proxy by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesCondaProxyByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories conda proxy by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesCondaProxyByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories conda proxy by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesCondaProxyByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories conda proxy by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesCondaProxyByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories conda proxy by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesCondaProxyByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories conda proxy by repositoryname unauthorized response
func (o *PutRepositoriesCondaProxyByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesCondaProxyByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conda/proxy/{repositoryName}][%d] putRepositoriesCondaProxyByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesCondaProxyByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conda/proxy/{repositoryName}][%d] putRepositoriesCondaProxyByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesCondaProxyByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesCondaProxyByRepositorynameForbidden creates a PutRepositoriesCondaProxyByRepositorynameForbidden with default headers values
func NewPutRepositoriesCondaProxyByRepositorynameForbidden() *PutRepositoriesCondaProxyByRepositorynameForbidden {
	return &PutRepositoriesCondaProxyByRepositorynameForbidden{}
}

/*
PutRepositoriesCondaProxyByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesCondaProxyByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories conda proxy by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesCondaProxyByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories conda proxy by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesCondaProxyByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories conda proxy by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesCondaProxyByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories conda proxy by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesCondaProxyByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories conda proxy by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesCondaProxyByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories conda proxy by repositoryname forbidden response
func (o *PutRepositoriesCondaProxyByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesCondaProxyByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conda/proxy/{repositoryName}][%d] putRepositoriesCondaProxyByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesCondaProxyByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conda/proxy/{repositoryName}][%d] putRepositoriesCondaProxyByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesCondaProxyByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
