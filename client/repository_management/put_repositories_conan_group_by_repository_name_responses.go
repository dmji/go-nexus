// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesConanGroupByRepositoryNameReader is a Reader for the PutRepositoriesConanGroupByRepositoryName structure.
type PutRepositoriesConanGroupByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesConanGroupByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesConanGroupByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesConanGroupByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesConanGroupByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesConanGroupByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/conan/group/{repositoryName}] PutRepositoriesConanGroupByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesConanGroupByRepositoryNameNoContent creates a PutRepositoriesConanGroupByRepositoryNameNoContent with default headers values
func NewPutRepositoriesConanGroupByRepositoryNameNoContent() *PutRepositoriesConanGroupByRepositoryNameNoContent {
	return &PutRepositoriesConanGroupByRepositoryNameNoContent{}
}

/*
PutRepositoriesConanGroupByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesConanGroupByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories conan group by repository name no content response has a 2xx status code
func (o *PutRepositoriesConanGroupByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories conan group by repository name no content response has a 3xx status code
func (o *PutRepositoriesConanGroupByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories conan group by repository name no content response has a 4xx status code
func (o *PutRepositoriesConanGroupByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories conan group by repository name no content response has a 5xx status code
func (o *PutRepositoriesConanGroupByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories conan group by repository name no content response a status code equal to that given
func (o *PutRepositoriesConanGroupByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories conan group by repository name no content response
func (o *PutRepositoriesConanGroupByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesConanGroupByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] putRepositoriesConanGroupByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesConanGroupByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] putRepositoriesConanGroupByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesConanGroupByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesConanGroupByRepositoryNameBadRequest creates a PutRepositoriesConanGroupByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesConanGroupByRepositoryNameBadRequest() *PutRepositoriesConanGroupByRepositoryNameBadRequest {
	return &PutRepositoriesConanGroupByRepositoryNameBadRequest{}
}

/*
PutRepositoriesConanGroupByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesConanGroupByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories conan group by repository name bad request response has a 2xx status code
func (o *PutRepositoriesConanGroupByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories conan group by repository name bad request response has a 3xx status code
func (o *PutRepositoriesConanGroupByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories conan group by repository name bad request response has a 4xx status code
func (o *PutRepositoriesConanGroupByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories conan group by repository name bad request response has a 5xx status code
func (o *PutRepositoriesConanGroupByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories conan group by repository name bad request response a status code equal to that given
func (o *PutRepositoriesConanGroupByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories conan group by repository name bad request response
func (o *PutRepositoriesConanGroupByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesConanGroupByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] putRepositoriesConanGroupByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesConanGroupByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] putRepositoriesConanGroupByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesConanGroupByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesConanGroupByRepositoryNameUnauthorized creates a PutRepositoriesConanGroupByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesConanGroupByRepositoryNameUnauthorized() *PutRepositoriesConanGroupByRepositoryNameUnauthorized {
	return &PutRepositoriesConanGroupByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesConanGroupByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesConanGroupByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories conan group by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesConanGroupByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories conan group by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesConanGroupByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories conan group by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesConanGroupByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories conan group by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesConanGroupByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories conan group by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesConanGroupByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories conan group by repository name unauthorized response
func (o *PutRepositoriesConanGroupByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesConanGroupByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] putRepositoriesConanGroupByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesConanGroupByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] putRepositoriesConanGroupByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesConanGroupByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesConanGroupByRepositoryNameForbidden creates a PutRepositoriesConanGroupByRepositoryNameForbidden with default headers values
func NewPutRepositoriesConanGroupByRepositoryNameForbidden() *PutRepositoriesConanGroupByRepositoryNameForbidden {
	return &PutRepositoriesConanGroupByRepositoryNameForbidden{}
}

/*
PutRepositoriesConanGroupByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesConanGroupByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories conan group by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesConanGroupByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories conan group by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesConanGroupByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories conan group by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesConanGroupByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories conan group by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesConanGroupByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories conan group by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesConanGroupByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories conan group by repository name forbidden response
func (o *PutRepositoriesConanGroupByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesConanGroupByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] putRepositoriesConanGroupByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesConanGroupByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] putRepositoriesConanGroupByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesConanGroupByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
