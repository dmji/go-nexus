// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesHelmProxyByRepositorynameReader is a Reader for the PutRepositoriesHelmProxyByRepositoryname structure.
type PutRepositoriesHelmProxyByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesHelmProxyByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesHelmProxyByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesHelmProxyByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesHelmProxyByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesHelmProxyByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/helm/proxy/{repositoryName}] PutRepositoriesHelmProxyByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesHelmProxyByRepositorynameNoContent creates a PutRepositoriesHelmProxyByRepositorynameNoContent with default headers values
func NewPutRepositoriesHelmProxyByRepositorynameNoContent() *PutRepositoriesHelmProxyByRepositorynameNoContent {
	return &PutRepositoriesHelmProxyByRepositorynameNoContent{}
}

/*
PutRepositoriesHelmProxyByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesHelmProxyByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories helm proxy by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesHelmProxyByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories helm proxy by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesHelmProxyByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories helm proxy by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesHelmProxyByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories helm proxy by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesHelmProxyByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories helm proxy by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesHelmProxyByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories helm proxy by repositoryname no content response
func (o *PutRepositoriesHelmProxyByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesHelmProxyByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/proxy/{repositoryName}][%d] putRepositoriesHelmProxyByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesHelmProxyByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/proxy/{repositoryName}][%d] putRepositoriesHelmProxyByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesHelmProxyByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesHelmProxyByRepositorynameBadRequest creates a PutRepositoriesHelmProxyByRepositorynameBadRequest with default headers values
func NewPutRepositoriesHelmProxyByRepositorynameBadRequest() *PutRepositoriesHelmProxyByRepositorynameBadRequest {
	return &PutRepositoriesHelmProxyByRepositorynameBadRequest{}
}

/*
PutRepositoriesHelmProxyByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesHelmProxyByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories helm proxy by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesHelmProxyByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories helm proxy by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesHelmProxyByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories helm proxy by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesHelmProxyByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories helm proxy by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesHelmProxyByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories helm proxy by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesHelmProxyByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories helm proxy by repositoryname bad request response
func (o *PutRepositoriesHelmProxyByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesHelmProxyByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/proxy/{repositoryName}][%d] putRepositoriesHelmProxyByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesHelmProxyByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/proxy/{repositoryName}][%d] putRepositoriesHelmProxyByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesHelmProxyByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesHelmProxyByRepositorynameUnauthorized creates a PutRepositoriesHelmProxyByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesHelmProxyByRepositorynameUnauthorized() *PutRepositoriesHelmProxyByRepositorynameUnauthorized {
	return &PutRepositoriesHelmProxyByRepositorynameUnauthorized{}
}

/*
PutRepositoriesHelmProxyByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesHelmProxyByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories helm proxy by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesHelmProxyByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories helm proxy by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesHelmProxyByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories helm proxy by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesHelmProxyByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories helm proxy by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesHelmProxyByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories helm proxy by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesHelmProxyByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories helm proxy by repositoryname unauthorized response
func (o *PutRepositoriesHelmProxyByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesHelmProxyByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/proxy/{repositoryName}][%d] putRepositoriesHelmProxyByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesHelmProxyByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/proxy/{repositoryName}][%d] putRepositoriesHelmProxyByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesHelmProxyByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesHelmProxyByRepositorynameForbidden creates a PutRepositoriesHelmProxyByRepositorynameForbidden with default headers values
func NewPutRepositoriesHelmProxyByRepositorynameForbidden() *PutRepositoriesHelmProxyByRepositorynameForbidden {
	return &PutRepositoriesHelmProxyByRepositorynameForbidden{}
}

/*
PutRepositoriesHelmProxyByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesHelmProxyByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories helm proxy by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesHelmProxyByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories helm proxy by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesHelmProxyByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories helm proxy by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesHelmProxyByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories helm proxy by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesHelmProxyByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories helm proxy by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesHelmProxyByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories helm proxy by repositoryname forbidden response
func (o *PutRepositoriesHelmProxyByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesHelmProxyByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/proxy/{repositoryName}][%d] putRepositoriesHelmProxyByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesHelmProxyByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/proxy/{repositoryName}][%d] putRepositoriesHelmProxyByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesHelmProxyByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
