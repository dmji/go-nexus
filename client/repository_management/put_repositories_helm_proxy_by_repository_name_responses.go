// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesHelmProxyByRepositoryNameReader is a Reader for the PutRepositoriesHelmProxyByRepositoryName structure.
type PutRepositoriesHelmProxyByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesHelmProxyByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesHelmProxyByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesHelmProxyByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesHelmProxyByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesHelmProxyByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/helm/proxy/{repositoryName}] PutRepositoriesHelmProxyByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesHelmProxyByRepositoryNameNoContent creates a PutRepositoriesHelmProxyByRepositoryNameNoContent with default headers values
func NewPutRepositoriesHelmProxyByRepositoryNameNoContent() *PutRepositoriesHelmProxyByRepositoryNameNoContent {
	return &PutRepositoriesHelmProxyByRepositoryNameNoContent{}
}

/*
PutRepositoriesHelmProxyByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesHelmProxyByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories helm proxy by repository name no content response has a 2xx status code
func (o *PutRepositoriesHelmProxyByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories helm proxy by repository name no content response has a 3xx status code
func (o *PutRepositoriesHelmProxyByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories helm proxy by repository name no content response has a 4xx status code
func (o *PutRepositoriesHelmProxyByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories helm proxy by repository name no content response has a 5xx status code
func (o *PutRepositoriesHelmProxyByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories helm proxy by repository name no content response a status code equal to that given
func (o *PutRepositoriesHelmProxyByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories helm proxy by repository name no content response
func (o *PutRepositoriesHelmProxyByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesHelmProxyByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/proxy/{repositoryName}][%d] putRepositoriesHelmProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesHelmProxyByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/proxy/{repositoryName}][%d] putRepositoriesHelmProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesHelmProxyByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesHelmProxyByRepositoryNameBadRequest creates a PutRepositoriesHelmProxyByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesHelmProxyByRepositoryNameBadRequest() *PutRepositoriesHelmProxyByRepositoryNameBadRequest {
	return &PutRepositoriesHelmProxyByRepositoryNameBadRequest{}
}

/*
PutRepositoriesHelmProxyByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesHelmProxyByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories helm proxy by repository name bad request response has a 2xx status code
func (o *PutRepositoriesHelmProxyByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories helm proxy by repository name bad request response has a 3xx status code
func (o *PutRepositoriesHelmProxyByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories helm proxy by repository name bad request response has a 4xx status code
func (o *PutRepositoriesHelmProxyByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories helm proxy by repository name bad request response has a 5xx status code
func (o *PutRepositoriesHelmProxyByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories helm proxy by repository name bad request response a status code equal to that given
func (o *PutRepositoriesHelmProxyByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories helm proxy by repository name bad request response
func (o *PutRepositoriesHelmProxyByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesHelmProxyByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/proxy/{repositoryName}][%d] putRepositoriesHelmProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesHelmProxyByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/proxy/{repositoryName}][%d] putRepositoriesHelmProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesHelmProxyByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesHelmProxyByRepositoryNameUnauthorized creates a PutRepositoriesHelmProxyByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesHelmProxyByRepositoryNameUnauthorized() *PutRepositoriesHelmProxyByRepositoryNameUnauthorized {
	return &PutRepositoriesHelmProxyByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesHelmProxyByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesHelmProxyByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories helm proxy by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesHelmProxyByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories helm proxy by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesHelmProxyByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories helm proxy by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesHelmProxyByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories helm proxy by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesHelmProxyByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories helm proxy by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesHelmProxyByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories helm proxy by repository name unauthorized response
func (o *PutRepositoriesHelmProxyByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesHelmProxyByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/proxy/{repositoryName}][%d] putRepositoriesHelmProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesHelmProxyByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/proxy/{repositoryName}][%d] putRepositoriesHelmProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesHelmProxyByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesHelmProxyByRepositoryNameForbidden creates a PutRepositoriesHelmProxyByRepositoryNameForbidden with default headers values
func NewPutRepositoriesHelmProxyByRepositoryNameForbidden() *PutRepositoriesHelmProxyByRepositoryNameForbidden {
	return &PutRepositoriesHelmProxyByRepositoryNameForbidden{}
}

/*
PutRepositoriesHelmProxyByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesHelmProxyByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories helm proxy by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesHelmProxyByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories helm proxy by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesHelmProxyByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories helm proxy by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesHelmProxyByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories helm proxy by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesHelmProxyByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories helm proxy by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesHelmProxyByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories helm proxy by repository name forbidden response
func (o *PutRepositoriesHelmProxyByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesHelmProxyByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/proxy/{repositoryName}][%d] putRepositoriesHelmProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesHelmProxyByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/proxy/{repositoryName}][%d] putRepositoriesHelmProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesHelmProxyByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
