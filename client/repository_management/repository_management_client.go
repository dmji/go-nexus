// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new repository management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new repository management API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new repository management API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for repository management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteRepositoriesByRepositoryName(params *DeleteRepositoriesByRepositoryNameParams, opts ...ClientOption) (*DeleteRepositoriesByRepositoryNameNoContent, error)

	DeleteRepositoriesByRepositoryNameHealthCheck(params *DeleteRepositoriesByRepositoryNameHealthCheckParams, opts ...ClientOption) (*DeleteRepositoriesByRepositoryNameHealthCheckNoContent, error)

	GetRepositories(params *GetRepositoriesParams, opts ...ClientOption) (*GetRepositoriesOK, error)

	GetRepositoriesAptHostedByRepositoryName(params *GetRepositoriesAptHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesAptHostedByRepositoryNameOK, error)

	GetRepositoriesAptProxyByRepositoryName(params *GetRepositoriesAptProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesAptProxyByRepositoryNameOK, error)

	GetRepositoriesByRepositoryName(params *GetRepositoriesByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesByRepositoryNameOK, error)

	GetRepositoriesCargoGroupByRepositoryName(params *GetRepositoriesCargoGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesCargoGroupByRepositoryNameOK, error)

	GetRepositoriesCargoHostedByRepositoryName(params *GetRepositoriesCargoHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesCargoHostedByRepositoryNameOK, error)

	GetRepositoriesCargoProxyByRepositoryName(params *GetRepositoriesCargoProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesCargoProxyByRepositoryNameOK, error)

	GetRepositoriesCocoapodsProxyByRepositoryName(params *GetRepositoriesCocoapodsProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesCocoapodsProxyByRepositoryNameOK, error)

	GetRepositoriesComposerProxyByRepositoryName(params *GetRepositoriesComposerProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesComposerProxyByRepositoryNameOK, error)

	GetRepositoriesConanGroupByRepositoryName(params *GetRepositoriesConanGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesConanGroupByRepositoryNameOK, error)

	GetRepositoriesConanHostedByRepositoryName(params *GetRepositoriesConanHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesConanHostedByRepositoryNameOK, error)

	GetRepositoriesConanProxyByRepositoryName(params *GetRepositoriesConanProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesConanProxyByRepositoryNameOK, error)

	GetRepositoriesCondaProxyByRepositoryName(params *GetRepositoriesCondaProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesCondaProxyByRepositoryNameOK, error)

	GetRepositoriesDockerGroupByRepositoryName(params *GetRepositoriesDockerGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesDockerGroupByRepositoryNameOK, error)

	GetRepositoriesDockerHostedByRepositoryName(params *GetRepositoriesDockerHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesDockerHostedByRepositoryNameOK, error)

	GetRepositoriesDockerProxyByRepositoryName(params *GetRepositoriesDockerProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesDockerProxyByRepositoryNameOK, error)

	GetRepositoriesGitlfsHostedByRepositoryName(params *GetRepositoriesGitlfsHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesGitlfsHostedByRepositoryNameOK, error)

	GetRepositoriesGoGroupByRepositoryName(params *GetRepositoriesGoGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesGoGroupByRepositoryNameOK, error)

	GetRepositoriesGoProxyByRepositoryName(params *GetRepositoriesGoProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesGoProxyByRepositoryNameOK, error)

	GetRepositoriesHelmHostedByRepositoryName(params *GetRepositoriesHelmHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesHelmHostedByRepositoryNameOK, error)

	GetRepositoriesHelmProxyByRepositoryName(params *GetRepositoriesHelmProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesHelmProxyByRepositoryNameOK, error)

	GetRepositoriesHuggingfaceProxyByRepositoryName(params *GetRepositoriesHuggingfaceProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesHuggingfaceProxyByRepositoryNameOK, error)

	GetRepositoriesMavenGroupByRepositoryName(params *GetRepositoriesMavenGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesMavenGroupByRepositoryNameOK, error)

	GetRepositoriesMavenHostedByRepositoryName(params *GetRepositoriesMavenHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesMavenHostedByRepositoryNameOK, error)

	GetRepositoriesMavenProxyByRepositoryName(params *GetRepositoriesMavenProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesMavenProxyByRepositoryNameOK, error)

	GetRepositoriesNpmGroupByRepositoryName(params *GetRepositoriesNpmGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesNpmGroupByRepositoryNameOK, error)

	GetRepositoriesNpmHostedByRepositoryName(params *GetRepositoriesNpmHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesNpmHostedByRepositoryNameOK, error)

	GetRepositoriesNpmProxyByRepositoryName(params *GetRepositoriesNpmProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesNpmProxyByRepositoryNameOK, error)

	GetRepositoriesNugetGroupByRepositoryName(params *GetRepositoriesNugetGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesNugetGroupByRepositoryNameOK, error)

	GetRepositoriesNugetHostedByRepositoryName(params *GetRepositoriesNugetHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesNugetHostedByRepositoryNameOK, error)

	GetRepositoriesNugetProxyByRepositoryName(params *GetRepositoriesNugetProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesNugetProxyByRepositoryNameOK, error)

	GetRepositoriesP2ProxyByRepositoryName(params *GetRepositoriesP2ProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesP2ProxyByRepositoryNameOK, error)

	GetRepositoriesPypiGroupByRepositoryName(params *GetRepositoriesPypiGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesPypiGroupByRepositoryNameOK, error)

	GetRepositoriesPypiHostedByRepositoryName(params *GetRepositoriesPypiHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesPypiHostedByRepositoryNameOK, error)

	GetRepositoriesPypiProxyByRepositoryName(params *GetRepositoriesPypiProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesPypiProxyByRepositoryNameOK, error)

	GetRepositoriesRGroupByRepositoryName(params *GetRepositoriesRGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesRGroupByRepositoryNameOK, error)

	GetRepositoriesRHostedByRepositoryName(params *GetRepositoriesRHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesRHostedByRepositoryNameOK, error)

	GetRepositoriesRProxyByRepositoryName(params *GetRepositoriesRProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesRProxyByRepositoryNameOK, error)

	GetRepositoriesRawGroupByRepositoryName(params *GetRepositoriesRawGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesRawGroupByRepositoryNameOK, error)

	GetRepositoriesRawHostedByRepositoryName(params *GetRepositoriesRawHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesRawHostedByRepositoryNameOK, error)

	GetRepositoriesRawProxyByRepositoryName(params *GetRepositoriesRawProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesRawProxyByRepositoryNameOK, error)

	GetRepositoriesRubygemsGroupByRepositoryName(params *GetRepositoriesRubygemsGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesRubygemsGroupByRepositoryNameOK, error)

	GetRepositoriesRubygemsHostedByRepositoryName(params *GetRepositoriesRubygemsHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesRubygemsHostedByRepositoryNameOK, error)

	GetRepositoriesRubygemsProxyByRepositoryName(params *GetRepositoriesRubygemsProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesRubygemsProxyByRepositoryNameOK, error)

	GetRepositoriesYumGroupByRepositoryName(params *GetRepositoriesYumGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesYumGroupByRepositoryNameOK, error)

	GetRepositoriesYumHostedByRepositoryName(params *GetRepositoriesYumHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesYumHostedByRepositoryNameOK, error)

	GetRepositoriesYumProxyByRepositoryName(params *GetRepositoriesYumProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesYumProxyByRepositoryNameOK, error)

	GetRepositorysettings(params *GetRepositorysettingsParams, opts ...ClientOption) (*GetRepositorysettingsOK, error)

	PostRepositoriesAptHosted(params *PostRepositoriesAptHostedParams, opts ...ClientOption) (*PostRepositoriesAptHostedCreated, error)

	PostRepositoriesAptProxy(params *PostRepositoriesAptProxyParams, opts ...ClientOption) (*PostRepositoriesAptProxyCreated, error)

	PostRepositoriesByRepositoryNameHealthCheck(params *PostRepositoriesByRepositoryNameHealthCheckParams, opts ...ClientOption) (*PostRepositoriesByRepositoryNameHealthCheckNoContent, error)

	PostRepositoriesByRepositoryNameInvalidateCache(params *PostRepositoriesByRepositoryNameInvalidateCacheParams, opts ...ClientOption) (*PostRepositoriesByRepositoryNameInvalidateCacheNoContent, error)

	PostRepositoriesByRepositoryNameRebuildIndex(params *PostRepositoriesByRepositoryNameRebuildIndexParams, opts ...ClientOption) (*PostRepositoriesByRepositoryNameRebuildIndexNoContent, error)

	PostRepositoriesCargoGroup(params *PostRepositoriesCargoGroupParams, opts ...ClientOption) (*PostRepositoriesCargoGroupCreated, error)

	PostRepositoriesCargoHosted(params *PostRepositoriesCargoHostedParams, opts ...ClientOption) (*PostRepositoriesCargoHostedCreated, error)

	PostRepositoriesCargoProxy(params *PostRepositoriesCargoProxyParams, opts ...ClientOption) (*PostRepositoriesCargoProxyCreated, error)

	PostRepositoriesCocoapodsProxy(params *PostRepositoriesCocoapodsProxyParams, opts ...ClientOption) (*PostRepositoriesCocoapodsProxyCreated, error)

	PostRepositoriesComposerProxy(params *PostRepositoriesComposerProxyParams, opts ...ClientOption) (*PostRepositoriesComposerProxyCreated, error)

	PostRepositoriesConanGroup(params *PostRepositoriesConanGroupParams, opts ...ClientOption) (*PostRepositoriesConanGroupCreated, error)

	PostRepositoriesConanHosted(params *PostRepositoriesConanHostedParams, opts ...ClientOption) (*PostRepositoriesConanHostedCreated, error)

	PostRepositoriesConanProxy(params *PostRepositoriesConanProxyParams, opts ...ClientOption) (*PostRepositoriesConanProxyCreated, error)

	PostRepositoriesCondaProxy(params *PostRepositoriesCondaProxyParams, opts ...ClientOption) (*PostRepositoriesCondaProxyCreated, error)

	PostRepositoriesDockerGroup(params *PostRepositoriesDockerGroupParams, opts ...ClientOption) (*PostRepositoriesDockerGroupCreated, error)

	PostRepositoriesDockerHosted(params *PostRepositoriesDockerHostedParams, opts ...ClientOption) (*PostRepositoriesDockerHostedCreated, error)

	PostRepositoriesDockerProxy(params *PostRepositoriesDockerProxyParams, opts ...ClientOption) (*PostRepositoriesDockerProxyCreated, error)

	PostRepositoriesGitlfsHosted(params *PostRepositoriesGitlfsHostedParams, opts ...ClientOption) (*PostRepositoriesGitlfsHostedCreated, error)

	PostRepositoriesGoGroup(params *PostRepositoriesGoGroupParams, opts ...ClientOption) (*PostRepositoriesGoGroupCreated, error)

	PostRepositoriesGoProxy(params *PostRepositoriesGoProxyParams, opts ...ClientOption) (*PostRepositoriesGoProxyCreated, error)

	PostRepositoriesHelmHosted(params *PostRepositoriesHelmHostedParams, opts ...ClientOption) (*PostRepositoriesHelmHostedCreated, error)

	PostRepositoriesHelmProxy(params *PostRepositoriesHelmProxyParams, opts ...ClientOption) (*PostRepositoriesHelmProxyCreated, error)

	PostRepositoriesHuggingfaceProxy(params *PostRepositoriesHuggingfaceProxyParams, opts ...ClientOption) (*PostRepositoriesHuggingfaceProxyCreated, error)

	PostRepositoriesMavenGroup(params *PostRepositoriesMavenGroupParams, opts ...ClientOption) (*PostRepositoriesMavenGroupCreated, error)

	PostRepositoriesMavenHosted(params *PostRepositoriesMavenHostedParams, opts ...ClientOption) (*PostRepositoriesMavenHostedCreated, error)

	PostRepositoriesMavenProxy(params *PostRepositoriesMavenProxyParams, opts ...ClientOption) (*PostRepositoriesMavenProxyCreated, error)

	PostRepositoriesNpmGroup(params *PostRepositoriesNpmGroupParams, opts ...ClientOption) (*PostRepositoriesNpmGroupCreated, error)

	PostRepositoriesNpmHosted(params *PostRepositoriesNpmHostedParams, opts ...ClientOption) (*PostRepositoriesNpmHostedCreated, error)

	PostRepositoriesNpmProxy(params *PostRepositoriesNpmProxyParams, opts ...ClientOption) (*PostRepositoriesNpmProxyCreated, error)

	PostRepositoriesNugetGroup(params *PostRepositoriesNugetGroupParams, opts ...ClientOption) (*PostRepositoriesNugetGroupCreated, error)

	PostRepositoriesNugetHosted(params *PostRepositoriesNugetHostedParams, opts ...ClientOption) (*PostRepositoriesNugetHostedCreated, error)

	PostRepositoriesNugetProxy(params *PostRepositoriesNugetProxyParams, opts ...ClientOption) (*PostRepositoriesNugetProxyCreated, error)

	PostRepositoriesP2Proxy(params *PostRepositoriesP2ProxyParams, opts ...ClientOption) (*PostRepositoriesP2ProxyCreated, error)

	PostRepositoriesPypiGroup(params *PostRepositoriesPypiGroupParams, opts ...ClientOption) (*PostRepositoriesPypiGroupCreated, error)

	PostRepositoriesPypiHosted(params *PostRepositoriesPypiHostedParams, opts ...ClientOption) (*PostRepositoriesPypiHostedCreated, error)

	PostRepositoriesPypiProxy(params *PostRepositoriesPypiProxyParams, opts ...ClientOption) (*PostRepositoriesPypiProxyCreated, error)

	PostRepositoriesRGroup(params *PostRepositoriesRGroupParams, opts ...ClientOption) (*PostRepositoriesRGroupCreated, error)

	PostRepositoriesRHosted(params *PostRepositoriesRHostedParams, opts ...ClientOption) (*PostRepositoriesRHostedCreated, error)

	PostRepositoriesRProxy(params *PostRepositoriesRProxyParams, opts ...ClientOption) (*PostRepositoriesRProxyCreated, error)

	PostRepositoriesRawGroup(params *PostRepositoriesRawGroupParams, opts ...ClientOption) (*PostRepositoriesRawGroupCreated, error)

	PostRepositoriesRawHosted(params *PostRepositoriesRawHostedParams, opts ...ClientOption) (*PostRepositoriesRawHostedCreated, error)

	PostRepositoriesRawProxy(params *PostRepositoriesRawProxyParams, opts ...ClientOption) (*PostRepositoriesRawProxyCreated, error)

	PostRepositoriesRubygemsGroup(params *PostRepositoriesRubygemsGroupParams, opts ...ClientOption) (*PostRepositoriesRubygemsGroupCreated, error)

	PostRepositoriesRubygemsHosted(params *PostRepositoriesRubygemsHostedParams, opts ...ClientOption) (*PostRepositoriesRubygemsHostedCreated, error)

	PostRepositoriesRubygemsProxy(params *PostRepositoriesRubygemsProxyParams, opts ...ClientOption) (*PostRepositoriesRubygemsProxyCreated, error)

	PostRepositoriesYumGroup(params *PostRepositoriesYumGroupParams, opts ...ClientOption) (*PostRepositoriesYumGroupCreated, error)

	PostRepositoriesYumHosted(params *PostRepositoriesYumHostedParams, opts ...ClientOption) (*PostRepositoriesYumHostedCreated, error)

	PostRepositoriesYumProxy(params *PostRepositoriesYumProxyParams, opts ...ClientOption) (*PostRepositoriesYumProxyCreated, error)

	PutRepositoriesAptHostedByRepositoryName(params *PutRepositoriesAptHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesAptHostedByRepositoryNameNoContent, error)

	PutRepositoriesAptProxyByRepositoryName(params *PutRepositoriesAptProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesAptProxyByRepositoryNameNoContent, error)

	PutRepositoriesCargoGroupByRepositoryName(params *PutRepositoriesCargoGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesCargoGroupByRepositoryNameNoContent, error)

	PutRepositoriesCargoHostedByRepositoryName(params *PutRepositoriesCargoHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesCargoHostedByRepositoryNameNoContent, error)

	PutRepositoriesCargoProxyByRepositoryName(params *PutRepositoriesCargoProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesCargoProxyByRepositoryNameNoContent, error)

	PutRepositoriesCocoapodsProxyByRepositoryName(params *PutRepositoriesCocoapodsProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesCocoapodsProxyByRepositoryNameNoContent, error)

	PutRepositoriesComposerProxyByRepositoryName(params *PutRepositoriesComposerProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesComposerProxyByRepositoryNameNoContent, error)

	PutRepositoriesConanGroupByRepositoryName(params *PutRepositoriesConanGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesConanGroupByRepositoryNameNoContent, error)

	PutRepositoriesConanHostedByRepositoryName(params *PutRepositoriesConanHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesConanHostedByRepositoryNameNoContent, error)

	PutRepositoriesConanProxyByRepositoryName(params *PutRepositoriesConanProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesConanProxyByRepositoryNameNoContent, error)

	PutRepositoriesCondaProxyByRepositoryName(params *PutRepositoriesCondaProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesCondaProxyByRepositoryNameNoContent, error)

	PutRepositoriesDockerGroupByRepositoryName(params *PutRepositoriesDockerGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesDockerGroupByRepositoryNameNoContent, error)

	PutRepositoriesDockerHostedByRepositoryName(params *PutRepositoriesDockerHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesDockerHostedByRepositoryNameNoContent, error)

	PutRepositoriesDockerProxyByRepositoryName(params *PutRepositoriesDockerProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesDockerProxyByRepositoryNameNoContent, error)

	PutRepositoriesGitlfsHostedByRepositoryName(params *PutRepositoriesGitlfsHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesGitlfsHostedByRepositoryNameNoContent, error)

	PutRepositoriesGoGroupByRepositoryName(params *PutRepositoriesGoGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesGoGroupByRepositoryNameNoContent, error)

	PutRepositoriesGoProxyByRepositoryName(params *PutRepositoriesGoProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesGoProxyByRepositoryNameNoContent, error)

	PutRepositoriesHelmHostedByRepositoryName(params *PutRepositoriesHelmHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesHelmHostedByRepositoryNameNoContent, error)

	PutRepositoriesHelmProxyByRepositoryName(params *PutRepositoriesHelmProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesHelmProxyByRepositoryNameNoContent, error)

	PutRepositoriesHuggingfaceProxyByRepositoryName(params *PutRepositoriesHuggingfaceProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesHuggingfaceProxyByRepositoryNameNoContent, error)

	PutRepositoriesMavenGroupByRepositoryName(params *PutRepositoriesMavenGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesMavenGroupByRepositoryNameNoContent, error)

	PutRepositoriesMavenHostedByRepositoryName(params *PutRepositoriesMavenHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesMavenHostedByRepositoryNameNoContent, error)

	PutRepositoriesMavenProxyByRepositoryName(params *PutRepositoriesMavenProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesMavenProxyByRepositoryNameNoContent, error)

	PutRepositoriesNpmGroupByRepositoryName(params *PutRepositoriesNpmGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesNpmGroupByRepositoryNameNoContent, error)

	PutRepositoriesNpmHostedByRepositoryName(params *PutRepositoriesNpmHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesNpmHostedByRepositoryNameNoContent, error)

	PutRepositoriesNpmProxyByRepositoryName(params *PutRepositoriesNpmProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesNpmProxyByRepositoryNameNoContent, error)

	PutRepositoriesNugetGroupByRepositoryName(params *PutRepositoriesNugetGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesNugetGroupByRepositoryNameNoContent, error)

	PutRepositoriesNugetHostedByRepositoryName(params *PutRepositoriesNugetHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesNugetHostedByRepositoryNameNoContent, error)

	PutRepositoriesNugetProxyByRepositoryName(params *PutRepositoriesNugetProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesNugetProxyByRepositoryNameNoContent, error)

	PutRepositoriesP2ProxyByRepositoryName(params *PutRepositoriesP2ProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesP2ProxyByRepositoryNameNoContent, error)

	PutRepositoriesPypiGroupByRepositoryName(params *PutRepositoriesPypiGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesPypiGroupByRepositoryNameNoContent, error)

	PutRepositoriesPypiHostedByRepositoryName(params *PutRepositoriesPypiHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesPypiHostedByRepositoryNameNoContent, error)

	PutRepositoriesPypiProxyByRepositoryName(params *PutRepositoriesPypiProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesPypiProxyByRepositoryNameNoContent, error)

	PutRepositoriesRGroupByRepositoryName(params *PutRepositoriesRGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesRGroupByRepositoryNameNoContent, error)

	PutRepositoriesRHostedByRepositoryName(params *PutRepositoriesRHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesRHostedByRepositoryNameNoContent, error)

	PutRepositoriesRProxyByRepositoryName(params *PutRepositoriesRProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesRProxyByRepositoryNameNoContent, error)

	PutRepositoriesRawGroupByRepositoryName(params *PutRepositoriesRawGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesRawGroupByRepositoryNameNoContent, error)

	PutRepositoriesRawHostedByRepositoryName(params *PutRepositoriesRawHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesRawHostedByRepositoryNameNoContent, error)

	PutRepositoriesRawProxyByRepositoryName(params *PutRepositoriesRawProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesRawProxyByRepositoryNameNoContent, error)

	PutRepositoriesRubygemsGroupByRepositoryName(params *PutRepositoriesRubygemsGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesRubygemsGroupByRepositoryNameNoContent, error)

	PutRepositoriesRubygemsHostedByRepositoryName(params *PutRepositoriesRubygemsHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesRubygemsHostedByRepositoryNameNoContent, error)

	PutRepositoriesRubygemsProxyByRepositoryName(params *PutRepositoriesRubygemsProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesRubygemsProxyByRepositoryNameNoContent, error)

	PutRepositoriesYumGroupByRepositoryName(params *PutRepositoriesYumGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesYumGroupByRepositoryNameNoContent, error)

	PutRepositoriesYumHostedByRepositoryName(params *PutRepositoriesYumHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesYumHostedByRepositoryNameNoContent, error)

	PutRepositoriesYumProxyByRepositoryName(params *PutRepositoriesYumProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesYumProxyByRepositoryNameNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteRepositoriesByRepositoryName deletes repository of any format
*/
func (a *Client) DeleteRepositoriesByRepositoryName(params *DeleteRepositoriesByRepositoryNameParams, opts ...ClientOption) (*DeleteRepositoriesByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepositoriesByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRepositoriesByRepositoryName",
		Method:             "DELETE",
		PathPattern:        "/v1/repositories/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRepositoriesByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRepositoriesByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRepositoriesByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRepositoriesByRepositoryNameHealthCheck disables repository health check proxy repositories only
*/
func (a *Client) DeleteRepositoriesByRepositoryNameHealthCheck(params *DeleteRepositoriesByRepositoryNameHealthCheckParams, opts ...ClientOption) (*DeleteRepositoriesByRepositoryNameHealthCheckNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepositoriesByRepositoryNameHealthCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRepositoriesByRepositoryNameHealthCheck",
		Method:             "DELETE",
		PathPattern:        "/v1/repositories/{repositoryName}/health-check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRepositoriesByRepositoryNameHealthCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRepositoriesByRepositoryNameHealthCheckNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRepositoriesByRepositoryNameHealthCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositories lists repositories
*/
func (a *Client) GetRepositories(params *GetRepositoriesParams, opts ...ClientOption) (*GetRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositories",
		Method:             "GET",
		PathPattern:        "/v1/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesAptHostedByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesAptHostedByRepositoryName(params *GetRepositoriesAptHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesAptHostedByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesAptHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesAptHostedByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/apt/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesAptHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesAptHostedByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesAptHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesAptProxyByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesAptProxyByRepositoryName(params *GetRepositoriesAptProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesAptProxyByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesAptProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesAptProxyByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/apt/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesAptProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesAptProxyByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesAptProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesByRepositoryName gets repository details
*/
func (a *Client) GetRepositoriesByRepositoryName(params *GetRepositoriesByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesCargoGroupByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesCargoGroupByRepositoryName(params *GetRepositoriesCargoGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesCargoGroupByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesCargoGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesCargoGroupByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/cargo/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesCargoGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesCargoGroupByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesCargoGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesCargoHostedByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesCargoHostedByRepositoryName(params *GetRepositoriesCargoHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesCargoHostedByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesCargoHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesCargoHostedByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/cargo/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesCargoHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesCargoHostedByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesCargoHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesCargoProxyByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesCargoProxyByRepositoryName(params *GetRepositoriesCargoProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesCargoProxyByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesCargoProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesCargoProxyByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/cargo/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesCargoProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesCargoProxyByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesCargoProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesCocoapodsProxyByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesCocoapodsProxyByRepositoryName(params *GetRepositoriesCocoapodsProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesCocoapodsProxyByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesCocoapodsProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesCocoapodsProxyByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/cocoapods/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesCocoapodsProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesCocoapodsProxyByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesCocoapodsProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesComposerProxyByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesComposerProxyByRepositoryName(params *GetRepositoriesComposerProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesComposerProxyByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesComposerProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesComposerProxyByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/composer/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesComposerProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesComposerProxyByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesComposerProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesConanGroupByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesConanGroupByRepositoryName(params *GetRepositoriesConanGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesConanGroupByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesConanGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesConanGroupByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/conan/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesConanGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesConanGroupByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesConanGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesConanHostedByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesConanHostedByRepositoryName(params *GetRepositoriesConanHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesConanHostedByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesConanHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesConanHostedByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/conan/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesConanHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesConanHostedByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesConanHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesConanProxyByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesConanProxyByRepositoryName(params *GetRepositoriesConanProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesConanProxyByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesConanProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesConanProxyByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/conan/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesConanProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesConanProxyByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesConanProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesCondaProxyByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesCondaProxyByRepositoryName(params *GetRepositoriesCondaProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesCondaProxyByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesCondaProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesCondaProxyByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/conda/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesCondaProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesCondaProxyByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesCondaProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesDockerGroupByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesDockerGroupByRepositoryName(params *GetRepositoriesDockerGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesDockerGroupByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesDockerGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesDockerGroupByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/docker/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesDockerGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesDockerGroupByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesDockerGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesDockerHostedByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesDockerHostedByRepositoryName(params *GetRepositoriesDockerHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesDockerHostedByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesDockerHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesDockerHostedByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/docker/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesDockerHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesDockerHostedByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesDockerHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesDockerProxyByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesDockerProxyByRepositoryName(params *GetRepositoriesDockerProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesDockerProxyByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesDockerProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesDockerProxyByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/docker/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesDockerProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesDockerProxyByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesDockerProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesGitlfsHostedByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesGitlfsHostedByRepositoryName(params *GetRepositoriesGitlfsHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesGitlfsHostedByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesGitlfsHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesGitlfsHostedByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/gitlfs/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesGitlfsHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesGitlfsHostedByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesGitlfsHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesGoGroupByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesGoGroupByRepositoryName(params *GetRepositoriesGoGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesGoGroupByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesGoGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesGoGroupByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/go/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesGoGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesGoGroupByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesGoGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesGoProxyByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesGoProxyByRepositoryName(params *GetRepositoriesGoProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesGoProxyByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesGoProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesGoProxyByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/go/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesGoProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesGoProxyByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesGoProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesHelmHostedByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesHelmHostedByRepositoryName(params *GetRepositoriesHelmHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesHelmHostedByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesHelmHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesHelmHostedByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/helm/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesHelmHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesHelmHostedByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesHelmHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesHelmProxyByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesHelmProxyByRepositoryName(params *GetRepositoriesHelmProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesHelmProxyByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesHelmProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesHelmProxyByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/helm/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesHelmProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesHelmProxyByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesHelmProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesHuggingfaceProxyByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesHuggingfaceProxyByRepositoryName(params *GetRepositoriesHuggingfaceProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesHuggingfaceProxyByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesHuggingfaceProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesHuggingfaceProxyByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/huggingface/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesHuggingfaceProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesHuggingfaceProxyByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesHuggingfaceProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesMavenGroupByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesMavenGroupByRepositoryName(params *GetRepositoriesMavenGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesMavenGroupByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesMavenGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesMavenGroupByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/maven/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesMavenGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesMavenGroupByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesMavenGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesMavenHostedByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesMavenHostedByRepositoryName(params *GetRepositoriesMavenHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesMavenHostedByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesMavenHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesMavenHostedByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/maven/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesMavenHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesMavenHostedByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesMavenHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesMavenProxyByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesMavenProxyByRepositoryName(params *GetRepositoriesMavenProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesMavenProxyByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesMavenProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesMavenProxyByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/maven/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesMavenProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesMavenProxyByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesMavenProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesNpmGroupByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesNpmGroupByRepositoryName(params *GetRepositoriesNpmGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesNpmGroupByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesNpmGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesNpmGroupByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/npm/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesNpmGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesNpmGroupByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesNpmGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesNpmHostedByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesNpmHostedByRepositoryName(params *GetRepositoriesNpmHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesNpmHostedByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesNpmHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesNpmHostedByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/npm/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesNpmHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesNpmHostedByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesNpmHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesNpmProxyByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesNpmProxyByRepositoryName(params *GetRepositoriesNpmProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesNpmProxyByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesNpmProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesNpmProxyByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/npm/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesNpmProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesNpmProxyByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesNpmProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesNugetGroupByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesNugetGroupByRepositoryName(params *GetRepositoriesNugetGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesNugetGroupByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesNugetGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesNugetGroupByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/nuget/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesNugetGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesNugetGroupByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesNugetGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesNugetHostedByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesNugetHostedByRepositoryName(params *GetRepositoriesNugetHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesNugetHostedByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesNugetHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesNugetHostedByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/nuget/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesNugetHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesNugetHostedByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesNugetHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesNugetProxyByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesNugetProxyByRepositoryName(params *GetRepositoriesNugetProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesNugetProxyByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesNugetProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesNugetProxyByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/nuget/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesNugetProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesNugetProxyByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesNugetProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesP2ProxyByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesP2ProxyByRepositoryName(params *GetRepositoriesP2ProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesP2ProxyByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesP2ProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesP2ProxyByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/p2/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesP2ProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesP2ProxyByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesP2ProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesPypiGroupByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesPypiGroupByRepositoryName(params *GetRepositoriesPypiGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesPypiGroupByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesPypiGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesPypiGroupByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/pypi/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesPypiGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesPypiGroupByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesPypiGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesPypiHostedByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesPypiHostedByRepositoryName(params *GetRepositoriesPypiHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesPypiHostedByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesPypiHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesPypiHostedByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/pypi/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesPypiHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesPypiHostedByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesPypiHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesPypiProxyByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesPypiProxyByRepositoryName(params *GetRepositoriesPypiProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesPypiProxyByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesPypiProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesPypiProxyByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/pypi/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesPypiProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesPypiProxyByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesPypiProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesRGroupByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesRGroupByRepositoryName(params *GetRepositoriesRGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesRGroupByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesRGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesRGroupByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/r/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesRGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesRGroupByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesRGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesRHostedByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesRHostedByRepositoryName(params *GetRepositoriesRHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesRHostedByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesRHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesRHostedByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/r/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesRHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesRHostedByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesRHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesRProxyByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesRProxyByRepositoryName(params *GetRepositoriesRProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesRProxyByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesRProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesRProxyByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/r/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesRProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesRProxyByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesRProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesRawGroupByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesRawGroupByRepositoryName(params *GetRepositoriesRawGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesRawGroupByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesRawGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesRawGroupByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/raw/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesRawGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesRawGroupByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesRawGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesRawHostedByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesRawHostedByRepositoryName(params *GetRepositoriesRawHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesRawHostedByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesRawHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesRawHostedByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/raw/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesRawHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesRawHostedByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesRawHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesRawProxyByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesRawProxyByRepositoryName(params *GetRepositoriesRawProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesRawProxyByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesRawProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesRawProxyByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/raw/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesRawProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesRawProxyByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesRawProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesRubygemsGroupByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesRubygemsGroupByRepositoryName(params *GetRepositoriesRubygemsGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesRubygemsGroupByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesRubygemsGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesRubygemsGroupByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/rubygems/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesRubygemsGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesRubygemsGroupByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesRubygemsGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesRubygemsHostedByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesRubygemsHostedByRepositoryName(params *GetRepositoriesRubygemsHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesRubygemsHostedByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesRubygemsHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesRubygemsHostedByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/rubygems/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesRubygemsHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesRubygemsHostedByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesRubygemsHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesRubygemsProxyByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesRubygemsProxyByRepositoryName(params *GetRepositoriesRubygemsProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesRubygemsProxyByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesRubygemsProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesRubygemsProxyByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/rubygems/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesRubygemsProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesRubygemsProxyByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesRubygemsProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesYumGroupByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesYumGroupByRepositoryName(params *GetRepositoriesYumGroupByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesYumGroupByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesYumGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesYumGroupByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/yum/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesYumGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesYumGroupByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesYumGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesYumHostedByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesYumHostedByRepositoryName(params *GetRepositoriesYumHostedByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesYumHostedByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesYumHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesYumHostedByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/yum/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesYumHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesYumHostedByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesYumHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesYumProxyByRepositoryName gets repository
*/
func (a *Client) GetRepositoriesYumProxyByRepositoryName(params *GetRepositoriesYumProxyByRepositoryNameParams, opts ...ClientOption) (*GetRepositoriesYumProxyByRepositoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesYumProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesYumProxyByRepositoryName",
		Method:             "GET",
		PathPattern:        "/v1/repositories/yum/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesYumProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesYumProxyByRepositoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesYumProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositorysettings lists repository settins
*/
func (a *Client) GetRepositorysettings(params *GetRepositorysettingsParams, opts ...ClientOption) (*GetRepositorysettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositorysettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositorysettings",
		Method:             "GET",
		PathPattern:        "/v1/repositorySettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositorysettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositorysettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositorysettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesAptHosted creates a p t hosted repository
*/
func (a *Client) PostRepositoriesAptHosted(params *PostRepositoriesAptHostedParams, opts ...ClientOption) (*PostRepositoriesAptHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesAptHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesAptHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/apt/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesAptHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesAptHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesAptHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesAptProxy creates a p t proxy repository
*/
func (a *Client) PostRepositoriesAptProxy(params *PostRepositoriesAptProxyParams, opts ...ClientOption) (*PostRepositoriesAptProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesAptProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesAptProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/apt/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesAptProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesAptProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesAptProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesByRepositoryNameHealthCheck enables repository health check proxy repositories only
*/
func (a *Client) PostRepositoriesByRepositoryNameHealthCheck(params *PostRepositoriesByRepositoryNameHealthCheckParams, opts ...ClientOption) (*PostRepositoriesByRepositoryNameHealthCheckNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesByRepositoryNameHealthCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesByRepositoryNameHealthCheck",
		Method:             "POST",
		PathPattern:        "/v1/repositories/{repositoryName}/health-check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesByRepositoryNameHealthCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesByRepositoryNameHealthCheckNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesByRepositoryNameHealthCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesByRepositoryNameInvalidateCache invalidates repository cache proxy or group repositories only
*/
func (a *Client) PostRepositoriesByRepositoryNameInvalidateCache(params *PostRepositoriesByRepositoryNameInvalidateCacheParams, opts ...ClientOption) (*PostRepositoriesByRepositoryNameInvalidateCacheNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesByRepositoryNameInvalidateCacheParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesByRepositoryNameInvalidateCache",
		Method:             "POST",
		PathPattern:        "/v1/repositories/{repositoryName}/invalidate-cache",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesByRepositoryNameInvalidateCacheReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesByRepositoryNameInvalidateCacheNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesByRepositoryNameInvalidateCache: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesByRepositoryNameRebuildIndex schedules a repair rebuild repository search task hosted or proxy repositories only
*/
func (a *Client) PostRepositoriesByRepositoryNameRebuildIndex(params *PostRepositoriesByRepositoryNameRebuildIndexParams, opts ...ClientOption) (*PostRepositoriesByRepositoryNameRebuildIndexNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesByRepositoryNameRebuildIndexParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesByRepositoryNameRebuildIndex",
		Method:             "POST",
		PathPattern:        "/v1/repositories/{repositoryName}/rebuild-index",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesByRepositoryNameRebuildIndexReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesByRepositoryNameRebuildIndexNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesByRepositoryNameRebuildIndex: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesCargoGroup creates cargo group repository
*/
func (a *Client) PostRepositoriesCargoGroup(params *PostRepositoriesCargoGroupParams, opts ...ClientOption) (*PostRepositoriesCargoGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesCargoGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesCargoGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/cargo/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesCargoGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesCargoGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesCargoGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesCargoHosted creates cargo hosted repository
*/
func (a *Client) PostRepositoriesCargoHosted(params *PostRepositoriesCargoHostedParams, opts ...ClientOption) (*PostRepositoriesCargoHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesCargoHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesCargoHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/cargo/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesCargoHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesCargoHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesCargoHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesCargoProxy creates cargo proxy repository
*/
func (a *Client) PostRepositoriesCargoProxy(params *PostRepositoriesCargoProxyParams, opts ...ClientOption) (*PostRepositoriesCargoProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesCargoProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesCargoProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/cargo/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesCargoProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesCargoProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesCargoProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesCocoapodsProxy creates cocoapods proxy repository
*/
func (a *Client) PostRepositoriesCocoapodsProxy(params *PostRepositoriesCocoapodsProxyParams, opts ...ClientOption) (*PostRepositoriesCocoapodsProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesCocoapodsProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesCocoapodsProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/cocoapods/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesCocoapodsProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesCocoapodsProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesCocoapodsProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesComposerProxy creates composer proxy repository
*/
func (a *Client) PostRepositoriesComposerProxy(params *PostRepositoriesComposerProxyParams, opts ...ClientOption) (*PostRepositoriesComposerProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesComposerProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesComposerProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/composer/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesComposerProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesComposerProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesComposerProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesConanGroup creates conan group repository
*/
func (a *Client) PostRepositoriesConanGroup(params *PostRepositoriesConanGroupParams, opts ...ClientOption) (*PostRepositoriesConanGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesConanGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesConanGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/conan/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesConanGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesConanGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesConanGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesConanHosted creates conan hosted repository
*/
func (a *Client) PostRepositoriesConanHosted(params *PostRepositoriesConanHostedParams, opts ...ClientOption) (*PostRepositoriesConanHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesConanHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesConanHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/conan/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesConanHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesConanHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesConanHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesConanProxy creates conan proxy repository
*/
func (a *Client) PostRepositoriesConanProxy(params *PostRepositoriesConanProxyParams, opts ...ClientOption) (*PostRepositoriesConanProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesConanProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesConanProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/conan/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesConanProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesConanProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesConanProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesCondaProxy creates conda proxy repository
*/
func (a *Client) PostRepositoriesCondaProxy(params *PostRepositoriesCondaProxyParams, opts ...ClientOption) (*PostRepositoriesCondaProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesCondaProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesCondaProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/conda/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesCondaProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesCondaProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesCondaProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesDockerGroup creates docker group repository
*/
func (a *Client) PostRepositoriesDockerGroup(params *PostRepositoriesDockerGroupParams, opts ...ClientOption) (*PostRepositoriesDockerGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesDockerGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesDockerGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/docker/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesDockerGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesDockerGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesDockerGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesDockerHosted creates docker hosted repository
*/
func (a *Client) PostRepositoriesDockerHosted(params *PostRepositoriesDockerHostedParams, opts ...ClientOption) (*PostRepositoriesDockerHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesDockerHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesDockerHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/docker/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesDockerHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesDockerHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesDockerHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesDockerProxy creates docker proxy repository
*/
func (a *Client) PostRepositoriesDockerProxy(params *PostRepositoriesDockerProxyParams, opts ...ClientOption) (*PostRepositoriesDockerProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesDockerProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesDockerProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/docker/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesDockerProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesDockerProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesDockerProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesGitlfsHosted creates git l f s hosted repository
*/
func (a *Client) PostRepositoriesGitlfsHosted(params *PostRepositoriesGitlfsHostedParams, opts ...ClientOption) (*PostRepositoriesGitlfsHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesGitlfsHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesGitlfsHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/gitlfs/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesGitlfsHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesGitlfsHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesGitlfsHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesGoGroup creates a go group repository
*/
func (a *Client) PostRepositoriesGoGroup(params *PostRepositoriesGoGroupParams, opts ...ClientOption) (*PostRepositoriesGoGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesGoGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesGoGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/go/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesGoGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesGoGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesGoGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesGoProxy creates a go proxy repository
*/
func (a *Client) PostRepositoriesGoProxy(params *PostRepositoriesGoProxyParams, opts ...ClientOption) (*PostRepositoriesGoProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesGoProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesGoProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/go/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesGoProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesGoProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesGoProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesHelmHosted creates helm hosted repository
*/
func (a *Client) PostRepositoriesHelmHosted(params *PostRepositoriesHelmHostedParams, opts ...ClientOption) (*PostRepositoriesHelmHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesHelmHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesHelmHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/helm/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesHelmHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesHelmHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesHelmHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesHelmProxy creates helm proxy repository
*/
func (a *Client) PostRepositoriesHelmProxy(params *PostRepositoriesHelmProxyParams, opts ...ClientOption) (*PostRepositoriesHelmProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesHelmProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesHelmProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/helm/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesHelmProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesHelmProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesHelmProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesHuggingfaceProxy creates huggingface proxy repository
*/
func (a *Client) PostRepositoriesHuggingfaceProxy(params *PostRepositoriesHuggingfaceProxyParams, opts ...ClientOption) (*PostRepositoriesHuggingfaceProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesHuggingfaceProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesHuggingfaceProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/huggingface/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesHuggingfaceProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesHuggingfaceProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesHuggingfaceProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesMavenGroup creates maven group repository
*/
func (a *Client) PostRepositoriesMavenGroup(params *PostRepositoriesMavenGroupParams, opts ...ClientOption) (*PostRepositoriesMavenGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesMavenGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesMavenGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/maven/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesMavenGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesMavenGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesMavenGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesMavenHosted creates maven hosted repository
*/
func (a *Client) PostRepositoriesMavenHosted(params *PostRepositoriesMavenHostedParams, opts ...ClientOption) (*PostRepositoriesMavenHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesMavenHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesMavenHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/maven/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesMavenHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesMavenHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesMavenHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesMavenProxy creates maven proxy repository
*/
func (a *Client) PostRepositoriesMavenProxy(params *PostRepositoriesMavenProxyParams, opts ...ClientOption) (*PostRepositoriesMavenProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesMavenProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesMavenProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/maven/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesMavenProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesMavenProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesMavenProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesNpmGroup creates npm group repository
*/
func (a *Client) PostRepositoriesNpmGroup(params *PostRepositoriesNpmGroupParams, opts ...ClientOption) (*PostRepositoriesNpmGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesNpmGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesNpmGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/npm/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesNpmGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesNpmGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesNpmGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesNpmHosted creates npm hosted repository
*/
func (a *Client) PostRepositoriesNpmHosted(params *PostRepositoriesNpmHostedParams, opts ...ClientOption) (*PostRepositoriesNpmHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesNpmHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesNpmHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/npm/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesNpmHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesNpmHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesNpmHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesNpmProxy creates npm proxy repository
*/
func (a *Client) PostRepositoriesNpmProxy(params *PostRepositoriesNpmProxyParams, opts ...ClientOption) (*PostRepositoriesNpmProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesNpmProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesNpmProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/npm/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesNpmProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesNpmProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesNpmProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesNugetGroup creates nu get group repository
*/
func (a *Client) PostRepositoriesNugetGroup(params *PostRepositoriesNugetGroupParams, opts ...ClientOption) (*PostRepositoriesNugetGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesNugetGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesNugetGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/nuget/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesNugetGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesNugetGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesNugetGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesNugetHosted creates nu get hosted repository
*/
func (a *Client) PostRepositoriesNugetHosted(params *PostRepositoriesNugetHostedParams, opts ...ClientOption) (*PostRepositoriesNugetHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesNugetHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesNugetHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/nuget/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesNugetHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesNugetHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesNugetHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesNugetProxy creates nu get proxy repository
*/
func (a *Client) PostRepositoriesNugetProxy(params *PostRepositoriesNugetProxyParams, opts ...ClientOption) (*PostRepositoriesNugetProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesNugetProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesNugetProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/nuget/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesNugetProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesNugetProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesNugetProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesP2Proxy creates p2 proxy repository
*/
func (a *Client) PostRepositoriesP2Proxy(params *PostRepositoriesP2ProxyParams, opts ...ClientOption) (*PostRepositoriesP2ProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesP2ProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesP2Proxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/p2/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesP2ProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesP2ProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesP2Proxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesPypiGroup creates py p i group repository
*/
func (a *Client) PostRepositoriesPypiGroup(params *PostRepositoriesPypiGroupParams, opts ...ClientOption) (*PostRepositoriesPypiGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesPypiGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesPypiGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/pypi/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesPypiGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesPypiGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesPypiGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesPypiHosted creates py p i hosted repository
*/
func (a *Client) PostRepositoriesPypiHosted(params *PostRepositoriesPypiHostedParams, opts ...ClientOption) (*PostRepositoriesPypiHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesPypiHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesPypiHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/pypi/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesPypiHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesPypiHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesPypiHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesPypiProxy creates py p i proxy repository
*/
func (a *Client) PostRepositoriesPypiProxy(params *PostRepositoriesPypiProxyParams, opts ...ClientOption) (*PostRepositoriesPypiProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesPypiProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesPypiProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/pypi/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesPypiProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesPypiProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesPypiProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesRGroup creates r group repository
*/
func (a *Client) PostRepositoriesRGroup(params *PostRepositoriesRGroupParams, opts ...ClientOption) (*PostRepositoriesRGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesRGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesRGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/r/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesRGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesRGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesRGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesRHosted creates r hosted repository
*/
func (a *Client) PostRepositoriesRHosted(params *PostRepositoriesRHostedParams, opts ...ClientOption) (*PostRepositoriesRHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesRHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesRHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/r/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesRHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesRHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesRHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesRProxy creates r proxy repository
*/
func (a *Client) PostRepositoriesRProxy(params *PostRepositoriesRProxyParams, opts ...ClientOption) (*PostRepositoriesRProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesRProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesRProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/r/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesRProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesRProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesRProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesRawGroup creates raw group repository
*/
func (a *Client) PostRepositoriesRawGroup(params *PostRepositoriesRawGroupParams, opts ...ClientOption) (*PostRepositoriesRawGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesRawGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesRawGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/raw/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesRawGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesRawGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesRawGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesRawHosted creates raw hosted repository
*/
func (a *Client) PostRepositoriesRawHosted(params *PostRepositoriesRawHostedParams, opts ...ClientOption) (*PostRepositoriesRawHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesRawHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesRawHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/raw/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesRawHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesRawHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesRawHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesRawProxy creates raw proxy repository
*/
func (a *Client) PostRepositoriesRawProxy(params *PostRepositoriesRawProxyParams, opts ...ClientOption) (*PostRepositoriesRawProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesRawProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesRawProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/raw/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesRawProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesRawProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesRawProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesRubygemsGroup creates ruby gems group repository
*/
func (a *Client) PostRepositoriesRubygemsGroup(params *PostRepositoriesRubygemsGroupParams, opts ...ClientOption) (*PostRepositoriesRubygemsGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesRubygemsGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesRubygemsGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/rubygems/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesRubygemsGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesRubygemsGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesRubygemsGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesRubygemsHosted creates ruby gems hosted repository
*/
func (a *Client) PostRepositoriesRubygemsHosted(params *PostRepositoriesRubygemsHostedParams, opts ...ClientOption) (*PostRepositoriesRubygemsHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesRubygemsHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesRubygemsHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/rubygems/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesRubygemsHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesRubygemsHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesRubygemsHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesRubygemsProxy creates ruby gems proxy repository
*/
func (a *Client) PostRepositoriesRubygemsProxy(params *PostRepositoriesRubygemsProxyParams, opts ...ClientOption) (*PostRepositoriesRubygemsProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesRubygemsProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesRubygemsProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/rubygems/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesRubygemsProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesRubygemsProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesRubygemsProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesYumGroup creates yum group repository
*/
func (a *Client) PostRepositoriesYumGroup(params *PostRepositoriesYumGroupParams, opts ...ClientOption) (*PostRepositoriesYumGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesYumGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesYumGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/yum/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesYumGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesYumGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesYumGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesYumHosted creates yum hosted repository
*/
func (a *Client) PostRepositoriesYumHosted(params *PostRepositoriesYumHostedParams, opts ...ClientOption) (*PostRepositoriesYumHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesYumHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesYumHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/yum/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesYumHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesYumHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesYumHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesYumProxy creates yum proxy repository
*/
func (a *Client) PostRepositoriesYumProxy(params *PostRepositoriesYumProxyParams, opts ...ClientOption) (*PostRepositoriesYumProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesYumProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesYumProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/yum/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesYumProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesYumProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesYumProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesAptHostedByRepositoryName updates a p t hosted repository
*/
func (a *Client) PutRepositoriesAptHostedByRepositoryName(params *PutRepositoriesAptHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesAptHostedByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesAptHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesAptHostedByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/apt/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesAptHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesAptHostedByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesAptHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesAptProxyByRepositoryName updates a p t proxy repository
*/
func (a *Client) PutRepositoriesAptProxyByRepositoryName(params *PutRepositoriesAptProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesAptProxyByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesAptProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesAptProxyByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/apt/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesAptProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesAptProxyByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesAptProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesCargoGroupByRepositoryName updates cargo group repository
*/
func (a *Client) PutRepositoriesCargoGroupByRepositoryName(params *PutRepositoriesCargoGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesCargoGroupByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesCargoGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesCargoGroupByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/cargo/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesCargoGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesCargoGroupByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesCargoGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesCargoHostedByRepositoryName updates cargo hosted repository
*/
func (a *Client) PutRepositoriesCargoHostedByRepositoryName(params *PutRepositoriesCargoHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesCargoHostedByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesCargoHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesCargoHostedByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/cargo/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesCargoHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesCargoHostedByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesCargoHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesCargoProxyByRepositoryName updates cargo proxy repository
*/
func (a *Client) PutRepositoriesCargoProxyByRepositoryName(params *PutRepositoriesCargoProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesCargoProxyByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesCargoProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesCargoProxyByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/cargo/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesCargoProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesCargoProxyByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesCargoProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesCocoapodsProxyByRepositoryName updates cocoapods proxy repository
*/
func (a *Client) PutRepositoriesCocoapodsProxyByRepositoryName(params *PutRepositoriesCocoapodsProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesCocoapodsProxyByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesCocoapodsProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesCocoapodsProxyByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/cocoapods/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesCocoapodsProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesCocoapodsProxyByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesCocoapodsProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesComposerProxyByRepositoryName updates composer proxy repository
*/
func (a *Client) PutRepositoriesComposerProxyByRepositoryName(params *PutRepositoriesComposerProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesComposerProxyByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesComposerProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesComposerProxyByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/composer/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesComposerProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesComposerProxyByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesComposerProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesConanGroupByRepositoryName updates conan group repository
*/
func (a *Client) PutRepositoriesConanGroupByRepositoryName(params *PutRepositoriesConanGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesConanGroupByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesConanGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesConanGroupByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/conan/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesConanGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesConanGroupByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesConanGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesConanHostedByRepositoryName updates conan hosted repository
*/
func (a *Client) PutRepositoriesConanHostedByRepositoryName(params *PutRepositoriesConanHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesConanHostedByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesConanHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesConanHostedByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/conan/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesConanHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesConanHostedByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesConanHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesConanProxyByRepositoryName updates conan proxy repository
*/
func (a *Client) PutRepositoriesConanProxyByRepositoryName(params *PutRepositoriesConanProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesConanProxyByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesConanProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesConanProxyByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/conan/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesConanProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesConanProxyByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesConanProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesCondaProxyByRepositoryName updates conda proxy repository
*/
func (a *Client) PutRepositoriesCondaProxyByRepositoryName(params *PutRepositoriesCondaProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesCondaProxyByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesCondaProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesCondaProxyByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/conda/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesCondaProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesCondaProxyByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesCondaProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesDockerGroupByRepositoryName updates docker group repository
*/
func (a *Client) PutRepositoriesDockerGroupByRepositoryName(params *PutRepositoriesDockerGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesDockerGroupByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesDockerGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesDockerGroupByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/docker/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesDockerGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesDockerGroupByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesDockerGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesDockerHostedByRepositoryName updates docker hosted repository
*/
func (a *Client) PutRepositoriesDockerHostedByRepositoryName(params *PutRepositoriesDockerHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesDockerHostedByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesDockerHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesDockerHostedByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/docker/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesDockerHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesDockerHostedByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesDockerHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesDockerProxyByRepositoryName updates docker proxy repository
*/
func (a *Client) PutRepositoriesDockerProxyByRepositoryName(params *PutRepositoriesDockerProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesDockerProxyByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesDockerProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesDockerProxyByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/docker/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesDockerProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesDockerProxyByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesDockerProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesGitlfsHostedByRepositoryName updates git l f s hosted repository
*/
func (a *Client) PutRepositoriesGitlfsHostedByRepositoryName(params *PutRepositoriesGitlfsHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesGitlfsHostedByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesGitlfsHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesGitlfsHostedByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/gitlfs/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesGitlfsHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesGitlfsHostedByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesGitlfsHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesGoGroupByRepositoryName updates a go group repository
*/
func (a *Client) PutRepositoriesGoGroupByRepositoryName(params *PutRepositoriesGoGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesGoGroupByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesGoGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesGoGroupByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/go/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesGoGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesGoGroupByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesGoGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesGoProxyByRepositoryName updates a go proxy repository
*/
func (a *Client) PutRepositoriesGoProxyByRepositoryName(params *PutRepositoriesGoProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesGoProxyByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesGoProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesGoProxyByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/go/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesGoProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesGoProxyByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesGoProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesHelmHostedByRepositoryName updates helm hosted repository
*/
func (a *Client) PutRepositoriesHelmHostedByRepositoryName(params *PutRepositoriesHelmHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesHelmHostedByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesHelmHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesHelmHostedByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/helm/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesHelmHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesHelmHostedByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesHelmHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesHelmProxyByRepositoryName updates helm proxy repository
*/
func (a *Client) PutRepositoriesHelmProxyByRepositoryName(params *PutRepositoriesHelmProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesHelmProxyByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesHelmProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesHelmProxyByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/helm/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesHelmProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesHelmProxyByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesHelmProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesHuggingfaceProxyByRepositoryName updates huggingface proxy repository
*/
func (a *Client) PutRepositoriesHuggingfaceProxyByRepositoryName(params *PutRepositoriesHuggingfaceProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesHuggingfaceProxyByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesHuggingfaceProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesHuggingfaceProxyByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/huggingface/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesHuggingfaceProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesHuggingfaceProxyByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesHuggingfaceProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesMavenGroupByRepositoryName updates maven group repository
*/
func (a *Client) PutRepositoriesMavenGroupByRepositoryName(params *PutRepositoriesMavenGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesMavenGroupByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesMavenGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesMavenGroupByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/maven/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesMavenGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesMavenGroupByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesMavenGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesMavenHostedByRepositoryName updates maven hosted repository
*/
func (a *Client) PutRepositoriesMavenHostedByRepositoryName(params *PutRepositoriesMavenHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesMavenHostedByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesMavenHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesMavenHostedByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/maven/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesMavenHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesMavenHostedByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesMavenHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesMavenProxyByRepositoryName updates maven proxy repository
*/
func (a *Client) PutRepositoriesMavenProxyByRepositoryName(params *PutRepositoriesMavenProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesMavenProxyByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesMavenProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesMavenProxyByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/maven/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesMavenProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesMavenProxyByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesMavenProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesNpmGroupByRepositoryName updates npm group repository
*/
func (a *Client) PutRepositoriesNpmGroupByRepositoryName(params *PutRepositoriesNpmGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesNpmGroupByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesNpmGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesNpmGroupByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/npm/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesNpmGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesNpmGroupByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesNpmGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesNpmHostedByRepositoryName updates npm hosted repository
*/
func (a *Client) PutRepositoriesNpmHostedByRepositoryName(params *PutRepositoriesNpmHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesNpmHostedByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesNpmHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesNpmHostedByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/npm/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesNpmHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesNpmHostedByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesNpmHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesNpmProxyByRepositoryName updates npm proxy repository
*/
func (a *Client) PutRepositoriesNpmProxyByRepositoryName(params *PutRepositoriesNpmProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesNpmProxyByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesNpmProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesNpmProxyByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/npm/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesNpmProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesNpmProxyByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesNpmProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesNugetGroupByRepositoryName updates nu get group repository
*/
func (a *Client) PutRepositoriesNugetGroupByRepositoryName(params *PutRepositoriesNugetGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesNugetGroupByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesNugetGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesNugetGroupByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/nuget/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesNugetGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesNugetGroupByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesNugetGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesNugetHostedByRepositoryName updates nu get hosted repository
*/
func (a *Client) PutRepositoriesNugetHostedByRepositoryName(params *PutRepositoriesNugetHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesNugetHostedByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesNugetHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesNugetHostedByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/nuget/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesNugetHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesNugetHostedByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesNugetHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesNugetProxyByRepositoryName updates nu get proxy repository
*/
func (a *Client) PutRepositoriesNugetProxyByRepositoryName(params *PutRepositoriesNugetProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesNugetProxyByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesNugetProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesNugetProxyByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/nuget/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesNugetProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesNugetProxyByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesNugetProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesP2ProxyByRepositoryName updates p2 proxy repository
*/
func (a *Client) PutRepositoriesP2ProxyByRepositoryName(params *PutRepositoriesP2ProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesP2ProxyByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesP2ProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesP2ProxyByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/p2/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesP2ProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesP2ProxyByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesP2ProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesPypiGroupByRepositoryName updates py p i group repository
*/
func (a *Client) PutRepositoriesPypiGroupByRepositoryName(params *PutRepositoriesPypiGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesPypiGroupByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesPypiGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesPypiGroupByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/pypi/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesPypiGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesPypiGroupByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesPypiGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesPypiHostedByRepositoryName updates py p i hosted repository
*/
func (a *Client) PutRepositoriesPypiHostedByRepositoryName(params *PutRepositoriesPypiHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesPypiHostedByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesPypiHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesPypiHostedByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/pypi/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesPypiHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesPypiHostedByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesPypiHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesPypiProxyByRepositoryName updates py p i proxy repository
*/
func (a *Client) PutRepositoriesPypiProxyByRepositoryName(params *PutRepositoriesPypiProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesPypiProxyByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesPypiProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesPypiProxyByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/pypi/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesPypiProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesPypiProxyByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesPypiProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesRGroupByRepositoryName updates r group repository
*/
func (a *Client) PutRepositoriesRGroupByRepositoryName(params *PutRepositoriesRGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesRGroupByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesRGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesRGroupByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/r/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesRGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesRGroupByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesRGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesRHostedByRepositoryName updates r hosted repository
*/
func (a *Client) PutRepositoriesRHostedByRepositoryName(params *PutRepositoriesRHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesRHostedByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesRHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesRHostedByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/r/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesRHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesRHostedByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesRHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesRProxyByRepositoryName updates r proxy repository
*/
func (a *Client) PutRepositoriesRProxyByRepositoryName(params *PutRepositoriesRProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesRProxyByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesRProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesRProxyByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/r/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesRProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesRProxyByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesRProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesRawGroupByRepositoryName updates raw group repository
*/
func (a *Client) PutRepositoriesRawGroupByRepositoryName(params *PutRepositoriesRawGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesRawGroupByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesRawGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesRawGroupByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/raw/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesRawGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesRawGroupByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesRawGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesRawHostedByRepositoryName updates raw hosted repository
*/
func (a *Client) PutRepositoriesRawHostedByRepositoryName(params *PutRepositoriesRawHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesRawHostedByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesRawHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesRawHostedByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/raw/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesRawHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesRawHostedByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesRawHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesRawProxyByRepositoryName updates raw proxy repository
*/
func (a *Client) PutRepositoriesRawProxyByRepositoryName(params *PutRepositoriesRawProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesRawProxyByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesRawProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesRawProxyByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/raw/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesRawProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesRawProxyByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesRawProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesRubygemsGroupByRepositoryName updates ruby gems group repository
*/
func (a *Client) PutRepositoriesRubygemsGroupByRepositoryName(params *PutRepositoriesRubygemsGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesRubygemsGroupByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesRubygemsGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesRubygemsGroupByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/rubygems/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesRubygemsGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesRubygemsGroupByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesRubygemsGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesRubygemsHostedByRepositoryName updates ruby gems hosted repository
*/
func (a *Client) PutRepositoriesRubygemsHostedByRepositoryName(params *PutRepositoriesRubygemsHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesRubygemsHostedByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesRubygemsHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesRubygemsHostedByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/rubygems/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesRubygemsHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesRubygemsHostedByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesRubygemsHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesRubygemsProxyByRepositoryName updates ruby gems proxy repository
*/
func (a *Client) PutRepositoriesRubygemsProxyByRepositoryName(params *PutRepositoriesRubygemsProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesRubygemsProxyByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesRubygemsProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesRubygemsProxyByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/rubygems/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesRubygemsProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesRubygemsProxyByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesRubygemsProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesYumGroupByRepositoryName updates yum group repository
*/
func (a *Client) PutRepositoriesYumGroupByRepositoryName(params *PutRepositoriesYumGroupByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesYumGroupByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesYumGroupByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesYumGroupByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/yum/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesYumGroupByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesYumGroupByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesYumGroupByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesYumHostedByRepositoryName updates yum hosted repository
*/
func (a *Client) PutRepositoriesYumHostedByRepositoryName(params *PutRepositoriesYumHostedByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesYumHostedByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesYumHostedByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesYumHostedByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/yum/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesYumHostedByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesYumHostedByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesYumHostedByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesYumProxyByRepositoryName updates yum proxy repository
*/
func (a *Client) PutRepositoriesYumProxyByRepositoryName(params *PutRepositoriesYumProxyByRepositoryNameParams, opts ...ClientOption) (*PutRepositoriesYumProxyByRepositoryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesYumProxyByRepositoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesYumProxyByRepositoryName",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/yum/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesYumProxyByRepositoryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesYumProxyByRepositoryNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesYumProxyByRepositoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
