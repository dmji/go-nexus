// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new repository management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new repository management API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new repository management API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for repository management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteRepositoriesByRepositoryname(params *DeleteRepositoriesByRepositorynameParams, opts ...ClientOption) (*DeleteRepositoriesByRepositorynameNoContent, error)

	DeleteRepositoriesByRepositorynameHealthCheck(params *DeleteRepositoriesByRepositorynameHealthCheckParams, opts ...ClientOption) (*DeleteRepositoriesByRepositorynameHealthCheckNoContent, error)

	GetRepositories(params *GetRepositoriesParams, opts ...ClientOption) (*GetRepositoriesOK, error)

	GetRepositoriesAptHostedByRepositoryname(params *GetRepositoriesAptHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesAptHostedByRepositorynameOK, error)

	GetRepositoriesAptProxyByRepositoryname(params *GetRepositoriesAptProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesAptProxyByRepositorynameOK, error)

	GetRepositoriesByRepositoryname(params *GetRepositoriesByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesByRepositorynameOK, error)

	GetRepositoriesCargoGroupByRepositoryname(params *GetRepositoriesCargoGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesCargoGroupByRepositorynameOK, error)

	GetRepositoriesCargoHostedByRepositoryname(params *GetRepositoriesCargoHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesCargoHostedByRepositorynameOK, error)

	GetRepositoriesCargoProxyByRepositoryname(params *GetRepositoriesCargoProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesCargoProxyByRepositorynameOK, error)

	GetRepositoriesCocoapodsProxyByRepositoryname(params *GetRepositoriesCocoapodsProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesCocoapodsProxyByRepositorynameOK, error)

	GetRepositoriesComposerProxyByRepositoryname(params *GetRepositoriesComposerProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesComposerProxyByRepositorynameOK, error)

	GetRepositoriesConanGroupByRepositoryname(params *GetRepositoriesConanGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesConanGroupByRepositorynameOK, error)

	GetRepositoriesConanHostedByRepositoryname(params *GetRepositoriesConanHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesConanHostedByRepositorynameOK, error)

	GetRepositoriesConanProxyByRepositoryname(params *GetRepositoriesConanProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesConanProxyByRepositorynameOK, error)

	GetRepositoriesCondaProxyByRepositoryname(params *GetRepositoriesCondaProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesCondaProxyByRepositorynameOK, error)

	GetRepositoriesDockerGroupByRepositoryname(params *GetRepositoriesDockerGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesDockerGroupByRepositorynameOK, error)

	GetRepositoriesDockerHostedByRepositoryname(params *GetRepositoriesDockerHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesDockerHostedByRepositorynameOK, error)

	GetRepositoriesDockerProxyByRepositoryname(params *GetRepositoriesDockerProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesDockerProxyByRepositorynameOK, error)

	GetRepositoriesGitlfsHostedByRepositoryname(params *GetRepositoriesGitlfsHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesGitlfsHostedByRepositorynameOK, error)

	GetRepositoriesGoGroupByRepositoryname(params *GetRepositoriesGoGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesGoGroupByRepositorynameOK, error)

	GetRepositoriesGoProxyByRepositoryname(params *GetRepositoriesGoProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesGoProxyByRepositorynameOK, error)

	GetRepositoriesHelmHostedByRepositoryname(params *GetRepositoriesHelmHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesHelmHostedByRepositorynameOK, error)

	GetRepositoriesHelmProxyByRepositoryname(params *GetRepositoriesHelmProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesHelmProxyByRepositorynameOK, error)

	GetRepositoriesHuggingfaceProxyByRepositoryname(params *GetRepositoriesHuggingfaceProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesHuggingfaceProxyByRepositorynameOK, error)

	GetRepositoriesMavenGroupByRepositoryname(params *GetRepositoriesMavenGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesMavenGroupByRepositorynameOK, error)

	GetRepositoriesMavenHostedByRepositoryname(params *GetRepositoriesMavenHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesMavenHostedByRepositorynameOK, error)

	GetRepositoriesMavenProxyByRepositoryname(params *GetRepositoriesMavenProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesMavenProxyByRepositorynameOK, error)

	GetRepositoriesNpmGroupByRepositoryname(params *GetRepositoriesNpmGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesNpmGroupByRepositorynameOK, error)

	GetRepositoriesNpmHostedByRepositoryname(params *GetRepositoriesNpmHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesNpmHostedByRepositorynameOK, error)

	GetRepositoriesNpmProxyByRepositoryname(params *GetRepositoriesNpmProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesNpmProxyByRepositorynameOK, error)

	GetRepositoriesNugetGroupByRepositoryname(params *GetRepositoriesNugetGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesNugetGroupByRepositorynameOK, error)

	GetRepositoriesNugetHostedByRepositoryname(params *GetRepositoriesNugetHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesNugetHostedByRepositorynameOK, error)

	GetRepositoriesNugetProxyByRepositoryname(params *GetRepositoriesNugetProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesNugetProxyByRepositorynameOK, error)

	GetRepositoriesP2ProxyByRepositoryname(params *GetRepositoriesP2ProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesP2ProxyByRepositorynameOK, error)

	GetRepositoriesPypiGroupByRepositoryname(params *GetRepositoriesPypiGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesPypiGroupByRepositorynameOK, error)

	GetRepositoriesPypiHostedByRepositoryname(params *GetRepositoriesPypiHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesPypiHostedByRepositorynameOK, error)

	GetRepositoriesPypiProxyByRepositoryname(params *GetRepositoriesPypiProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesPypiProxyByRepositorynameOK, error)

	GetRepositoriesRGroupByRepositoryname(params *GetRepositoriesRGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesRGroupByRepositorynameOK, error)

	GetRepositoriesRHostedByRepositoryname(params *GetRepositoriesRHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesRHostedByRepositorynameOK, error)

	GetRepositoriesRProxyByRepositoryname(params *GetRepositoriesRProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesRProxyByRepositorynameOK, error)

	GetRepositoriesRawGroupByRepositoryname(params *GetRepositoriesRawGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesRawGroupByRepositorynameOK, error)

	GetRepositoriesRawHostedByRepositoryname(params *GetRepositoriesRawHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesRawHostedByRepositorynameOK, error)

	GetRepositoriesRawProxyByRepositoryname(params *GetRepositoriesRawProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesRawProxyByRepositorynameOK, error)

	GetRepositoriesRubygemsGroupByRepositoryname(params *GetRepositoriesRubygemsGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesRubygemsGroupByRepositorynameOK, error)

	GetRepositoriesRubygemsHostedByRepositoryname(params *GetRepositoriesRubygemsHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesRubygemsHostedByRepositorynameOK, error)

	GetRepositoriesRubygemsProxyByRepositoryname(params *GetRepositoriesRubygemsProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesRubygemsProxyByRepositorynameOK, error)

	GetRepositoriesYumGroupByRepositoryname(params *GetRepositoriesYumGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesYumGroupByRepositorynameOK, error)

	GetRepositoriesYumHostedByRepositoryname(params *GetRepositoriesYumHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesYumHostedByRepositorynameOK, error)

	GetRepositoriesYumProxyByRepositoryname(params *GetRepositoriesYumProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesYumProxyByRepositorynameOK, error)

	GetRepositorysettings(params *GetRepositorysettingsParams, opts ...ClientOption) (*GetRepositorysettingsOK, error)

	PostRepositoriesAptHosted(params *PostRepositoriesAptHostedParams, opts ...ClientOption) (*PostRepositoriesAptHostedCreated, error)

	PostRepositoriesAptProxy(params *PostRepositoriesAptProxyParams, opts ...ClientOption) (*PostRepositoriesAptProxyCreated, error)

	PostRepositoriesByRepositorynameHealthCheck(params *PostRepositoriesByRepositorynameHealthCheckParams, opts ...ClientOption) (*PostRepositoriesByRepositorynameHealthCheckNoContent, error)

	PostRepositoriesByRepositorynameInvalidateCache(params *PostRepositoriesByRepositorynameInvalidateCacheParams, opts ...ClientOption) (*PostRepositoriesByRepositorynameInvalidateCacheNoContent, error)

	PostRepositoriesByRepositorynameRebuildIndex(params *PostRepositoriesByRepositorynameRebuildIndexParams, opts ...ClientOption) (*PostRepositoriesByRepositorynameRebuildIndexNoContent, error)

	PostRepositoriesCargoGroup(params *PostRepositoriesCargoGroupParams, opts ...ClientOption) (*PostRepositoriesCargoGroupCreated, error)

	PostRepositoriesCargoHosted(params *PostRepositoriesCargoHostedParams, opts ...ClientOption) (*PostRepositoriesCargoHostedCreated, error)

	PostRepositoriesCargoProxy(params *PostRepositoriesCargoProxyParams, opts ...ClientOption) (*PostRepositoriesCargoProxyCreated, error)

	PostRepositoriesCocoapodsProxy(params *PostRepositoriesCocoapodsProxyParams, opts ...ClientOption) (*PostRepositoriesCocoapodsProxyCreated, error)

	PostRepositoriesComposerProxy(params *PostRepositoriesComposerProxyParams, opts ...ClientOption) (*PostRepositoriesComposerProxyCreated, error)

	PostRepositoriesConanGroup(params *PostRepositoriesConanGroupParams, opts ...ClientOption) (*PostRepositoriesConanGroupCreated, error)

	PostRepositoriesConanHosted(params *PostRepositoriesConanHostedParams, opts ...ClientOption) (*PostRepositoriesConanHostedCreated, error)

	PostRepositoriesConanProxy(params *PostRepositoriesConanProxyParams, opts ...ClientOption) (*PostRepositoriesConanProxyCreated, error)

	PostRepositoriesCondaProxy(params *PostRepositoriesCondaProxyParams, opts ...ClientOption) (*PostRepositoriesCondaProxyCreated, error)

	PostRepositoriesDockerGroup(params *PostRepositoriesDockerGroupParams, opts ...ClientOption) (*PostRepositoriesDockerGroupCreated, error)

	PostRepositoriesDockerHosted(params *PostRepositoriesDockerHostedParams, opts ...ClientOption) (*PostRepositoriesDockerHostedCreated, error)

	PostRepositoriesDockerProxy(params *PostRepositoriesDockerProxyParams, opts ...ClientOption) (*PostRepositoriesDockerProxyCreated, error)

	PostRepositoriesGitlfsHosted(params *PostRepositoriesGitlfsHostedParams, opts ...ClientOption) (*PostRepositoriesGitlfsHostedCreated, error)

	PostRepositoriesGoGroup(params *PostRepositoriesGoGroupParams, opts ...ClientOption) (*PostRepositoriesGoGroupCreated, error)

	PostRepositoriesGoProxy(params *PostRepositoriesGoProxyParams, opts ...ClientOption) (*PostRepositoriesGoProxyCreated, error)

	PostRepositoriesHelmHosted(params *PostRepositoriesHelmHostedParams, opts ...ClientOption) (*PostRepositoriesHelmHostedCreated, error)

	PostRepositoriesHelmProxy(params *PostRepositoriesHelmProxyParams, opts ...ClientOption) (*PostRepositoriesHelmProxyCreated, error)

	PostRepositoriesHuggingfaceProxy(params *PostRepositoriesHuggingfaceProxyParams, opts ...ClientOption) (*PostRepositoriesHuggingfaceProxyCreated, error)

	PostRepositoriesMavenGroup(params *PostRepositoriesMavenGroupParams, opts ...ClientOption) (*PostRepositoriesMavenGroupCreated, error)

	PostRepositoriesMavenHosted(params *PostRepositoriesMavenHostedParams, opts ...ClientOption) (*PostRepositoriesMavenHostedCreated, error)

	PostRepositoriesMavenProxy(params *PostRepositoriesMavenProxyParams, opts ...ClientOption) (*PostRepositoriesMavenProxyCreated, error)

	PostRepositoriesNpmGroup(params *PostRepositoriesNpmGroupParams, opts ...ClientOption) (*PostRepositoriesNpmGroupCreated, error)

	PostRepositoriesNpmHosted(params *PostRepositoriesNpmHostedParams, opts ...ClientOption) (*PostRepositoriesNpmHostedCreated, error)

	PostRepositoriesNpmProxy(params *PostRepositoriesNpmProxyParams, opts ...ClientOption) (*PostRepositoriesNpmProxyCreated, error)

	PostRepositoriesNugetGroup(params *PostRepositoriesNugetGroupParams, opts ...ClientOption) (*PostRepositoriesNugetGroupCreated, error)

	PostRepositoriesNugetHosted(params *PostRepositoriesNugetHostedParams, opts ...ClientOption) (*PostRepositoriesNugetHostedCreated, error)

	PostRepositoriesNugetProxy(params *PostRepositoriesNugetProxyParams, opts ...ClientOption) (*PostRepositoriesNugetProxyCreated, error)

	PostRepositoriesP2Proxy(params *PostRepositoriesP2ProxyParams, opts ...ClientOption) (*PostRepositoriesP2ProxyCreated, error)

	PostRepositoriesPypiGroup(params *PostRepositoriesPypiGroupParams, opts ...ClientOption) (*PostRepositoriesPypiGroupCreated, error)

	PostRepositoriesPypiHosted(params *PostRepositoriesPypiHostedParams, opts ...ClientOption) (*PostRepositoriesPypiHostedCreated, error)

	PostRepositoriesPypiProxy(params *PostRepositoriesPypiProxyParams, opts ...ClientOption) (*PostRepositoriesPypiProxyCreated, error)

	PostRepositoriesRGroup(params *PostRepositoriesRGroupParams, opts ...ClientOption) (*PostRepositoriesRGroupCreated, error)

	PostRepositoriesRHosted(params *PostRepositoriesRHostedParams, opts ...ClientOption) (*PostRepositoriesRHostedCreated, error)

	PostRepositoriesRProxy(params *PostRepositoriesRProxyParams, opts ...ClientOption) (*PostRepositoriesRProxyCreated, error)

	PostRepositoriesRawGroup(params *PostRepositoriesRawGroupParams, opts ...ClientOption) (*PostRepositoriesRawGroupCreated, error)

	PostRepositoriesRawHosted(params *PostRepositoriesRawHostedParams, opts ...ClientOption) (*PostRepositoriesRawHostedCreated, error)

	PostRepositoriesRawProxy(params *PostRepositoriesRawProxyParams, opts ...ClientOption) (*PostRepositoriesRawProxyCreated, error)

	PostRepositoriesRubygemsGroup(params *PostRepositoriesRubygemsGroupParams, opts ...ClientOption) (*PostRepositoriesRubygemsGroupCreated, error)

	PostRepositoriesRubygemsHosted(params *PostRepositoriesRubygemsHostedParams, opts ...ClientOption) (*PostRepositoriesRubygemsHostedCreated, error)

	PostRepositoriesRubygemsProxy(params *PostRepositoriesRubygemsProxyParams, opts ...ClientOption) (*PostRepositoriesRubygemsProxyCreated, error)

	PostRepositoriesYumGroup(params *PostRepositoriesYumGroupParams, opts ...ClientOption) (*PostRepositoriesYumGroupCreated, error)

	PostRepositoriesYumHosted(params *PostRepositoriesYumHostedParams, opts ...ClientOption) (*PostRepositoriesYumHostedCreated, error)

	PostRepositoriesYumProxy(params *PostRepositoriesYumProxyParams, opts ...ClientOption) (*PostRepositoriesYumProxyCreated, error)

	PutRepositoriesAptHostedByRepositoryname(params *PutRepositoriesAptHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesAptHostedByRepositorynameNoContent, error)

	PutRepositoriesAptProxyByRepositoryname(params *PutRepositoriesAptProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesAptProxyByRepositorynameNoContent, error)

	PutRepositoriesCargoGroupByRepositoryname(params *PutRepositoriesCargoGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesCargoGroupByRepositorynameNoContent, error)

	PutRepositoriesCargoHostedByRepositoryname(params *PutRepositoriesCargoHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesCargoHostedByRepositorynameNoContent, error)

	PutRepositoriesCargoProxyByRepositoryname(params *PutRepositoriesCargoProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesCargoProxyByRepositorynameNoContent, error)

	PutRepositoriesCocoapodsProxyByRepositoryname(params *PutRepositoriesCocoapodsProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesCocoapodsProxyByRepositorynameNoContent, error)

	PutRepositoriesComposerProxyByRepositoryname(params *PutRepositoriesComposerProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesComposerProxyByRepositorynameNoContent, error)

	PutRepositoriesConanGroupByRepositoryname(params *PutRepositoriesConanGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesConanGroupByRepositorynameNoContent, error)

	PutRepositoriesConanHostedByRepositoryname(params *PutRepositoriesConanHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesConanHostedByRepositorynameNoContent, error)

	PutRepositoriesConanProxyByRepositoryname(params *PutRepositoriesConanProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesConanProxyByRepositorynameNoContent, error)

	PutRepositoriesCondaProxyByRepositoryname(params *PutRepositoriesCondaProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesCondaProxyByRepositorynameNoContent, error)

	PutRepositoriesDockerGroupByRepositoryname(params *PutRepositoriesDockerGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesDockerGroupByRepositorynameNoContent, error)

	PutRepositoriesDockerHostedByRepositoryname(params *PutRepositoriesDockerHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesDockerHostedByRepositorynameNoContent, error)

	PutRepositoriesDockerProxyByRepositoryname(params *PutRepositoriesDockerProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesDockerProxyByRepositorynameNoContent, error)

	PutRepositoriesGitlfsHostedByRepositoryname(params *PutRepositoriesGitlfsHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesGitlfsHostedByRepositorynameNoContent, error)

	PutRepositoriesGoGroupByRepositoryname(params *PutRepositoriesGoGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesGoGroupByRepositorynameNoContent, error)

	PutRepositoriesGoProxyByRepositoryname(params *PutRepositoriesGoProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesGoProxyByRepositorynameNoContent, error)

	PutRepositoriesHelmHostedByRepositoryname(params *PutRepositoriesHelmHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesHelmHostedByRepositorynameNoContent, error)

	PutRepositoriesHelmProxyByRepositoryname(params *PutRepositoriesHelmProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesHelmProxyByRepositorynameNoContent, error)

	PutRepositoriesHuggingfaceProxyByRepositoryname(params *PutRepositoriesHuggingfaceProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesHuggingfaceProxyByRepositorynameNoContent, error)

	PutRepositoriesMavenGroupByRepositoryname(params *PutRepositoriesMavenGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesMavenGroupByRepositorynameNoContent, error)

	PutRepositoriesMavenHostedByRepositoryname(params *PutRepositoriesMavenHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesMavenHostedByRepositorynameNoContent, error)

	PutRepositoriesMavenProxyByRepositoryname(params *PutRepositoriesMavenProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesMavenProxyByRepositorynameNoContent, error)

	PutRepositoriesNpmGroupByRepositoryname(params *PutRepositoriesNpmGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesNpmGroupByRepositorynameNoContent, error)

	PutRepositoriesNpmHostedByRepositoryname(params *PutRepositoriesNpmHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesNpmHostedByRepositorynameNoContent, error)

	PutRepositoriesNpmProxyByRepositoryname(params *PutRepositoriesNpmProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesNpmProxyByRepositorynameNoContent, error)

	PutRepositoriesNugetGroupByRepositoryname(params *PutRepositoriesNugetGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesNugetGroupByRepositorynameNoContent, error)

	PutRepositoriesNugetHostedByRepositoryname(params *PutRepositoriesNugetHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesNugetHostedByRepositorynameNoContent, error)

	PutRepositoriesNugetProxyByRepositoryname(params *PutRepositoriesNugetProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesNugetProxyByRepositorynameNoContent, error)

	PutRepositoriesP2ProxyByRepositoryname(params *PutRepositoriesP2ProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesP2ProxyByRepositorynameNoContent, error)

	PutRepositoriesPypiGroupByRepositoryname(params *PutRepositoriesPypiGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesPypiGroupByRepositorynameNoContent, error)

	PutRepositoriesPypiHostedByRepositoryname(params *PutRepositoriesPypiHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesPypiHostedByRepositorynameNoContent, error)

	PutRepositoriesPypiProxyByRepositoryname(params *PutRepositoriesPypiProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesPypiProxyByRepositorynameNoContent, error)

	PutRepositoriesRGroupByRepositoryname(params *PutRepositoriesRGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesRGroupByRepositorynameNoContent, error)

	PutRepositoriesRHostedByRepositoryname(params *PutRepositoriesRHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesRHostedByRepositorynameNoContent, error)

	PutRepositoriesRProxyByRepositoryname(params *PutRepositoriesRProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesRProxyByRepositorynameNoContent, error)

	PutRepositoriesRawGroupByRepositoryname(params *PutRepositoriesRawGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesRawGroupByRepositorynameNoContent, error)

	PutRepositoriesRawHostedByRepositoryname(params *PutRepositoriesRawHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesRawHostedByRepositorynameNoContent, error)

	PutRepositoriesRawProxyByRepositoryname(params *PutRepositoriesRawProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesRawProxyByRepositorynameNoContent, error)

	PutRepositoriesRubygemsGroupByRepositoryname(params *PutRepositoriesRubygemsGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesRubygemsGroupByRepositorynameNoContent, error)

	PutRepositoriesRubygemsHostedByRepositoryname(params *PutRepositoriesRubygemsHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesRubygemsHostedByRepositorynameNoContent, error)

	PutRepositoriesRubygemsProxyByRepositoryname(params *PutRepositoriesRubygemsProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesRubygemsProxyByRepositorynameNoContent, error)

	PutRepositoriesYumGroupByRepositoryname(params *PutRepositoriesYumGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesYumGroupByRepositorynameNoContent, error)

	PutRepositoriesYumHostedByRepositoryname(params *PutRepositoriesYumHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesYumHostedByRepositorynameNoContent, error)

	PutRepositoriesYumProxyByRepositoryname(params *PutRepositoriesYumProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesYumProxyByRepositorynameNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteRepositoriesByRepositoryname deletes repository of any format
*/
func (a *Client) DeleteRepositoriesByRepositoryname(params *DeleteRepositoriesByRepositorynameParams, opts ...ClientOption) (*DeleteRepositoriesByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepositoriesByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRepositoriesByRepositoryname",
		Method:             "DELETE",
		PathPattern:        "/v1/repositories/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRepositoriesByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRepositoriesByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRepositoriesByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRepositoriesByRepositorynameHealthCheck disables repository health check proxy repositories only
*/
func (a *Client) DeleteRepositoriesByRepositorynameHealthCheck(params *DeleteRepositoriesByRepositorynameHealthCheckParams, opts ...ClientOption) (*DeleteRepositoriesByRepositorynameHealthCheckNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepositoriesByRepositorynameHealthCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRepositoriesByRepositorynameHealthCheck",
		Method:             "DELETE",
		PathPattern:        "/v1/repositories/{repositoryName}/health-check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRepositoriesByRepositorynameHealthCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRepositoriesByRepositorynameHealthCheckNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRepositoriesByRepositorynameHealthCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositories lists repositories
*/
func (a *Client) GetRepositories(params *GetRepositoriesParams, opts ...ClientOption) (*GetRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositories",
		Method:             "GET",
		PathPattern:        "/v1/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesAptHostedByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesAptHostedByRepositoryname(params *GetRepositoriesAptHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesAptHostedByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesAptHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesAptHostedByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/apt/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesAptHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesAptHostedByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesAptHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesAptProxyByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesAptProxyByRepositoryname(params *GetRepositoriesAptProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesAptProxyByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesAptProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesAptProxyByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/apt/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesAptProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesAptProxyByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesAptProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesByRepositoryname gets repository details
*/
func (a *Client) GetRepositoriesByRepositoryname(params *GetRepositoriesByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesCargoGroupByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesCargoGroupByRepositoryname(params *GetRepositoriesCargoGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesCargoGroupByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesCargoGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesCargoGroupByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/cargo/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesCargoGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesCargoGroupByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesCargoGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesCargoHostedByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesCargoHostedByRepositoryname(params *GetRepositoriesCargoHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesCargoHostedByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesCargoHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesCargoHostedByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/cargo/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesCargoHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesCargoHostedByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesCargoHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesCargoProxyByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesCargoProxyByRepositoryname(params *GetRepositoriesCargoProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesCargoProxyByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesCargoProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesCargoProxyByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/cargo/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesCargoProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesCargoProxyByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesCargoProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesCocoapodsProxyByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesCocoapodsProxyByRepositoryname(params *GetRepositoriesCocoapodsProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesCocoapodsProxyByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesCocoapodsProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesCocoapodsProxyByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/cocoapods/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesCocoapodsProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesCocoapodsProxyByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesCocoapodsProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesComposerProxyByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesComposerProxyByRepositoryname(params *GetRepositoriesComposerProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesComposerProxyByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesComposerProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesComposerProxyByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/composer/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesComposerProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesComposerProxyByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesComposerProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesConanGroupByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesConanGroupByRepositoryname(params *GetRepositoriesConanGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesConanGroupByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesConanGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesConanGroupByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/conan/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesConanGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesConanGroupByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesConanGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesConanHostedByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesConanHostedByRepositoryname(params *GetRepositoriesConanHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesConanHostedByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesConanHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesConanHostedByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/conan/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesConanHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesConanHostedByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesConanHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesConanProxyByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesConanProxyByRepositoryname(params *GetRepositoriesConanProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesConanProxyByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesConanProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesConanProxyByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/conan/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesConanProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesConanProxyByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesConanProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesCondaProxyByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesCondaProxyByRepositoryname(params *GetRepositoriesCondaProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesCondaProxyByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesCondaProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesCondaProxyByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/conda/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesCondaProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesCondaProxyByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesCondaProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesDockerGroupByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesDockerGroupByRepositoryname(params *GetRepositoriesDockerGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesDockerGroupByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesDockerGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesDockerGroupByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/docker/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesDockerGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesDockerGroupByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesDockerGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesDockerHostedByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesDockerHostedByRepositoryname(params *GetRepositoriesDockerHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesDockerHostedByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesDockerHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesDockerHostedByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/docker/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesDockerHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesDockerHostedByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesDockerHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesDockerProxyByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesDockerProxyByRepositoryname(params *GetRepositoriesDockerProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesDockerProxyByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesDockerProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesDockerProxyByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/docker/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesDockerProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesDockerProxyByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesDockerProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesGitlfsHostedByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesGitlfsHostedByRepositoryname(params *GetRepositoriesGitlfsHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesGitlfsHostedByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesGitlfsHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesGitlfsHostedByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/gitlfs/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesGitlfsHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesGitlfsHostedByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesGitlfsHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesGoGroupByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesGoGroupByRepositoryname(params *GetRepositoriesGoGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesGoGroupByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesGoGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesGoGroupByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/go/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesGoGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesGoGroupByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesGoGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesGoProxyByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesGoProxyByRepositoryname(params *GetRepositoriesGoProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesGoProxyByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesGoProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesGoProxyByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/go/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesGoProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesGoProxyByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesGoProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesHelmHostedByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesHelmHostedByRepositoryname(params *GetRepositoriesHelmHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesHelmHostedByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesHelmHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesHelmHostedByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/helm/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesHelmHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesHelmHostedByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesHelmHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesHelmProxyByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesHelmProxyByRepositoryname(params *GetRepositoriesHelmProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesHelmProxyByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesHelmProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesHelmProxyByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/helm/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesHelmProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesHelmProxyByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesHelmProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesHuggingfaceProxyByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesHuggingfaceProxyByRepositoryname(params *GetRepositoriesHuggingfaceProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesHuggingfaceProxyByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesHuggingfaceProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesHuggingfaceProxyByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/huggingface/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesHuggingfaceProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesHuggingfaceProxyByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesHuggingfaceProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesMavenGroupByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesMavenGroupByRepositoryname(params *GetRepositoriesMavenGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesMavenGroupByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesMavenGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesMavenGroupByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/maven/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesMavenGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesMavenGroupByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesMavenGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesMavenHostedByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesMavenHostedByRepositoryname(params *GetRepositoriesMavenHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesMavenHostedByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesMavenHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesMavenHostedByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/maven/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesMavenHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesMavenHostedByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesMavenHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesMavenProxyByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesMavenProxyByRepositoryname(params *GetRepositoriesMavenProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesMavenProxyByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesMavenProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesMavenProxyByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/maven/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesMavenProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesMavenProxyByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesMavenProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesNpmGroupByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesNpmGroupByRepositoryname(params *GetRepositoriesNpmGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesNpmGroupByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesNpmGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesNpmGroupByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/npm/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesNpmGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesNpmGroupByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesNpmGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesNpmHostedByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesNpmHostedByRepositoryname(params *GetRepositoriesNpmHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesNpmHostedByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesNpmHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesNpmHostedByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/npm/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesNpmHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesNpmHostedByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesNpmHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesNpmProxyByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesNpmProxyByRepositoryname(params *GetRepositoriesNpmProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesNpmProxyByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesNpmProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesNpmProxyByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/npm/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesNpmProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesNpmProxyByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesNpmProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesNugetGroupByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesNugetGroupByRepositoryname(params *GetRepositoriesNugetGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesNugetGroupByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesNugetGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesNugetGroupByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/nuget/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesNugetGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesNugetGroupByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesNugetGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesNugetHostedByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesNugetHostedByRepositoryname(params *GetRepositoriesNugetHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesNugetHostedByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesNugetHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesNugetHostedByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/nuget/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesNugetHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesNugetHostedByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesNugetHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesNugetProxyByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesNugetProxyByRepositoryname(params *GetRepositoriesNugetProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesNugetProxyByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesNugetProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesNugetProxyByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/nuget/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesNugetProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesNugetProxyByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesNugetProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesP2ProxyByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesP2ProxyByRepositoryname(params *GetRepositoriesP2ProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesP2ProxyByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesP2ProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesP2ProxyByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/p2/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesP2ProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesP2ProxyByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesP2ProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesPypiGroupByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesPypiGroupByRepositoryname(params *GetRepositoriesPypiGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesPypiGroupByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesPypiGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesPypiGroupByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/pypi/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesPypiGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesPypiGroupByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesPypiGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesPypiHostedByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesPypiHostedByRepositoryname(params *GetRepositoriesPypiHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesPypiHostedByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesPypiHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesPypiHostedByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/pypi/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesPypiHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesPypiHostedByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesPypiHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesPypiProxyByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesPypiProxyByRepositoryname(params *GetRepositoriesPypiProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesPypiProxyByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesPypiProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesPypiProxyByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/pypi/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesPypiProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesPypiProxyByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesPypiProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesRGroupByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesRGroupByRepositoryname(params *GetRepositoriesRGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesRGroupByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesRGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesRGroupByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/r/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesRGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesRGroupByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesRGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesRHostedByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesRHostedByRepositoryname(params *GetRepositoriesRHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesRHostedByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesRHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesRHostedByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/r/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesRHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesRHostedByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesRHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesRProxyByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesRProxyByRepositoryname(params *GetRepositoriesRProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesRProxyByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesRProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesRProxyByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/r/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesRProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesRProxyByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesRProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesRawGroupByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesRawGroupByRepositoryname(params *GetRepositoriesRawGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesRawGroupByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesRawGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesRawGroupByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/raw/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesRawGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesRawGroupByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesRawGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesRawHostedByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesRawHostedByRepositoryname(params *GetRepositoriesRawHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesRawHostedByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesRawHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesRawHostedByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/raw/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesRawHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesRawHostedByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesRawHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesRawProxyByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesRawProxyByRepositoryname(params *GetRepositoriesRawProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesRawProxyByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesRawProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesRawProxyByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/raw/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesRawProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesRawProxyByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesRawProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesRubygemsGroupByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesRubygemsGroupByRepositoryname(params *GetRepositoriesRubygemsGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesRubygemsGroupByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesRubygemsGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesRubygemsGroupByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/rubygems/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesRubygemsGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesRubygemsGroupByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesRubygemsGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesRubygemsHostedByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesRubygemsHostedByRepositoryname(params *GetRepositoriesRubygemsHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesRubygemsHostedByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesRubygemsHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesRubygemsHostedByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/rubygems/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesRubygemsHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesRubygemsHostedByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesRubygemsHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesRubygemsProxyByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesRubygemsProxyByRepositoryname(params *GetRepositoriesRubygemsProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesRubygemsProxyByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesRubygemsProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesRubygemsProxyByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/rubygems/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesRubygemsProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesRubygemsProxyByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesRubygemsProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesYumGroupByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesYumGroupByRepositoryname(params *GetRepositoriesYumGroupByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesYumGroupByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesYumGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesYumGroupByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/yum/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesYumGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesYumGroupByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesYumGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesYumHostedByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesYumHostedByRepositoryname(params *GetRepositoriesYumHostedByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesYumHostedByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesYumHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesYumHostedByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/yum/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesYumHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesYumHostedByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesYumHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesYumProxyByRepositoryname gets repository
*/
func (a *Client) GetRepositoriesYumProxyByRepositoryname(params *GetRepositoriesYumProxyByRepositorynameParams, opts ...ClientOption) (*GetRepositoriesYumProxyByRepositorynameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesYumProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositoriesYumProxyByRepositoryname",
		Method:             "GET",
		PathPattern:        "/v1/repositories/yum/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesYumProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesYumProxyByRepositorynameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesYumProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositorysettings lists repositories
*/
func (a *Client) GetRepositorysettings(params *GetRepositorysettingsParams, opts ...ClientOption) (*GetRepositorysettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositorysettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepositorysettings",
		Method:             "GET",
		PathPattern:        "/v1/repositorySettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositorysettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositorysettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositorysettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesAptHosted creates a p t hosted repository
*/
func (a *Client) PostRepositoriesAptHosted(params *PostRepositoriesAptHostedParams, opts ...ClientOption) (*PostRepositoriesAptHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesAptHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesAptHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/apt/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesAptHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesAptHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesAptHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesAptProxy creates a p t proxy repository
*/
func (a *Client) PostRepositoriesAptProxy(params *PostRepositoriesAptProxyParams, opts ...ClientOption) (*PostRepositoriesAptProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesAptProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesAptProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/apt/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesAptProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesAptProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesAptProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesByRepositorynameHealthCheck enables repository health check proxy repositories only
*/
func (a *Client) PostRepositoriesByRepositorynameHealthCheck(params *PostRepositoriesByRepositorynameHealthCheckParams, opts ...ClientOption) (*PostRepositoriesByRepositorynameHealthCheckNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesByRepositorynameHealthCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesByRepositorynameHealthCheck",
		Method:             "POST",
		PathPattern:        "/v1/repositories/{repositoryName}/health-check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesByRepositorynameHealthCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesByRepositorynameHealthCheckNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesByRepositorynameHealthCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesByRepositorynameInvalidateCache invalidates repository cache proxy or group repositories only
*/
func (a *Client) PostRepositoriesByRepositorynameInvalidateCache(params *PostRepositoriesByRepositorynameInvalidateCacheParams, opts ...ClientOption) (*PostRepositoriesByRepositorynameInvalidateCacheNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesByRepositorynameInvalidateCacheParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesByRepositorynameInvalidateCache",
		Method:             "POST",
		PathPattern:        "/v1/repositories/{repositoryName}/invalidate-cache",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesByRepositorynameInvalidateCacheReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesByRepositorynameInvalidateCacheNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesByRepositorynameInvalidateCache: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesByRepositorynameRebuildIndex schedules a repair rebuild repository search task hosted or proxy repositories only
*/
func (a *Client) PostRepositoriesByRepositorynameRebuildIndex(params *PostRepositoriesByRepositorynameRebuildIndexParams, opts ...ClientOption) (*PostRepositoriesByRepositorynameRebuildIndexNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesByRepositorynameRebuildIndexParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesByRepositorynameRebuildIndex",
		Method:             "POST",
		PathPattern:        "/v1/repositories/{repositoryName}/rebuild-index",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesByRepositorynameRebuildIndexReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesByRepositorynameRebuildIndexNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesByRepositorynameRebuildIndex: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesCargoGroup creates cargo group repository
*/
func (a *Client) PostRepositoriesCargoGroup(params *PostRepositoriesCargoGroupParams, opts ...ClientOption) (*PostRepositoriesCargoGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesCargoGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesCargoGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/cargo/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesCargoGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesCargoGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesCargoGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesCargoHosted creates cargo hosted repository
*/
func (a *Client) PostRepositoriesCargoHosted(params *PostRepositoriesCargoHostedParams, opts ...ClientOption) (*PostRepositoriesCargoHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesCargoHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesCargoHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/cargo/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesCargoHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesCargoHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesCargoHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesCargoProxy creates cargo proxy repository
*/
func (a *Client) PostRepositoriesCargoProxy(params *PostRepositoriesCargoProxyParams, opts ...ClientOption) (*PostRepositoriesCargoProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesCargoProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesCargoProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/cargo/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesCargoProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesCargoProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesCargoProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesCocoapodsProxy creates cocoapods proxy repository
*/
func (a *Client) PostRepositoriesCocoapodsProxy(params *PostRepositoriesCocoapodsProxyParams, opts ...ClientOption) (*PostRepositoriesCocoapodsProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesCocoapodsProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesCocoapodsProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/cocoapods/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesCocoapodsProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesCocoapodsProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesCocoapodsProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesComposerProxy creates composer proxy repository
*/
func (a *Client) PostRepositoriesComposerProxy(params *PostRepositoriesComposerProxyParams, opts ...ClientOption) (*PostRepositoriesComposerProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesComposerProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesComposerProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/composer/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesComposerProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesComposerProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesComposerProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesConanGroup creates conan group repository
*/
func (a *Client) PostRepositoriesConanGroup(params *PostRepositoriesConanGroupParams, opts ...ClientOption) (*PostRepositoriesConanGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesConanGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesConanGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/conan/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesConanGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesConanGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesConanGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesConanHosted creates conan hosted repository
*/
func (a *Client) PostRepositoriesConanHosted(params *PostRepositoriesConanHostedParams, opts ...ClientOption) (*PostRepositoriesConanHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesConanHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesConanHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/conan/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesConanHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesConanHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesConanHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesConanProxy creates conan proxy repository
*/
func (a *Client) PostRepositoriesConanProxy(params *PostRepositoriesConanProxyParams, opts ...ClientOption) (*PostRepositoriesConanProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesConanProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesConanProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/conan/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesConanProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesConanProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesConanProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesCondaProxy creates conda proxy repository
*/
func (a *Client) PostRepositoriesCondaProxy(params *PostRepositoriesCondaProxyParams, opts ...ClientOption) (*PostRepositoriesCondaProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesCondaProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesCondaProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/conda/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesCondaProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesCondaProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesCondaProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesDockerGroup creates docker group repository
*/
func (a *Client) PostRepositoriesDockerGroup(params *PostRepositoriesDockerGroupParams, opts ...ClientOption) (*PostRepositoriesDockerGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesDockerGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesDockerGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/docker/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesDockerGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesDockerGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesDockerGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesDockerHosted creates docker hosted repository
*/
func (a *Client) PostRepositoriesDockerHosted(params *PostRepositoriesDockerHostedParams, opts ...ClientOption) (*PostRepositoriesDockerHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesDockerHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesDockerHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/docker/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesDockerHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesDockerHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesDockerHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesDockerProxy creates docker proxy repository
*/
func (a *Client) PostRepositoriesDockerProxy(params *PostRepositoriesDockerProxyParams, opts ...ClientOption) (*PostRepositoriesDockerProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesDockerProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesDockerProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/docker/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesDockerProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesDockerProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesDockerProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesGitlfsHosted creates git l f s hosted repository
*/
func (a *Client) PostRepositoriesGitlfsHosted(params *PostRepositoriesGitlfsHostedParams, opts ...ClientOption) (*PostRepositoriesGitlfsHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesGitlfsHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesGitlfsHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/gitlfs/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesGitlfsHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesGitlfsHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesGitlfsHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesGoGroup creates a go group repository
*/
func (a *Client) PostRepositoriesGoGroup(params *PostRepositoriesGoGroupParams, opts ...ClientOption) (*PostRepositoriesGoGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesGoGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesGoGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/go/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesGoGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesGoGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesGoGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesGoProxy creates a go proxy repository
*/
func (a *Client) PostRepositoriesGoProxy(params *PostRepositoriesGoProxyParams, opts ...ClientOption) (*PostRepositoriesGoProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesGoProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesGoProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/go/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesGoProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesGoProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesGoProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesHelmHosted creates helm hosted repository
*/
func (a *Client) PostRepositoriesHelmHosted(params *PostRepositoriesHelmHostedParams, opts ...ClientOption) (*PostRepositoriesHelmHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesHelmHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesHelmHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/helm/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesHelmHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesHelmHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesHelmHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesHelmProxy creates helm proxy repository
*/
func (a *Client) PostRepositoriesHelmProxy(params *PostRepositoriesHelmProxyParams, opts ...ClientOption) (*PostRepositoriesHelmProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesHelmProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesHelmProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/helm/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesHelmProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesHelmProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesHelmProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesHuggingfaceProxy creates huggingface proxy repository
*/
func (a *Client) PostRepositoriesHuggingfaceProxy(params *PostRepositoriesHuggingfaceProxyParams, opts ...ClientOption) (*PostRepositoriesHuggingfaceProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesHuggingfaceProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesHuggingfaceProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/huggingface/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesHuggingfaceProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesHuggingfaceProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesHuggingfaceProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesMavenGroup creates maven group repository
*/
func (a *Client) PostRepositoriesMavenGroup(params *PostRepositoriesMavenGroupParams, opts ...ClientOption) (*PostRepositoriesMavenGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesMavenGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesMavenGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/maven/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesMavenGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesMavenGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesMavenGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesMavenHosted creates maven hosted repository
*/
func (a *Client) PostRepositoriesMavenHosted(params *PostRepositoriesMavenHostedParams, opts ...ClientOption) (*PostRepositoriesMavenHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesMavenHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesMavenHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/maven/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesMavenHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesMavenHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesMavenHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesMavenProxy creates maven proxy repository
*/
func (a *Client) PostRepositoriesMavenProxy(params *PostRepositoriesMavenProxyParams, opts ...ClientOption) (*PostRepositoriesMavenProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesMavenProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesMavenProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/maven/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesMavenProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesMavenProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesMavenProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesNpmGroup creates npm group repository
*/
func (a *Client) PostRepositoriesNpmGroup(params *PostRepositoriesNpmGroupParams, opts ...ClientOption) (*PostRepositoriesNpmGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesNpmGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesNpmGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/npm/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesNpmGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesNpmGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesNpmGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesNpmHosted creates npm hosted repository
*/
func (a *Client) PostRepositoriesNpmHosted(params *PostRepositoriesNpmHostedParams, opts ...ClientOption) (*PostRepositoriesNpmHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesNpmHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesNpmHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/npm/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesNpmHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesNpmHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesNpmHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesNpmProxy creates npm proxy repository
*/
func (a *Client) PostRepositoriesNpmProxy(params *PostRepositoriesNpmProxyParams, opts ...ClientOption) (*PostRepositoriesNpmProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesNpmProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesNpmProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/npm/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesNpmProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesNpmProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesNpmProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesNugetGroup creates nu get group repository
*/
func (a *Client) PostRepositoriesNugetGroup(params *PostRepositoriesNugetGroupParams, opts ...ClientOption) (*PostRepositoriesNugetGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesNugetGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesNugetGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/nuget/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesNugetGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesNugetGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesNugetGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesNugetHosted creates nu get hosted repository
*/
func (a *Client) PostRepositoriesNugetHosted(params *PostRepositoriesNugetHostedParams, opts ...ClientOption) (*PostRepositoriesNugetHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesNugetHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesNugetHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/nuget/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesNugetHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesNugetHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesNugetHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesNugetProxy creates nu get proxy repository
*/
func (a *Client) PostRepositoriesNugetProxy(params *PostRepositoriesNugetProxyParams, opts ...ClientOption) (*PostRepositoriesNugetProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesNugetProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesNugetProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/nuget/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesNugetProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesNugetProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesNugetProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesP2Proxy creates p2 proxy repository
*/
func (a *Client) PostRepositoriesP2Proxy(params *PostRepositoriesP2ProxyParams, opts ...ClientOption) (*PostRepositoriesP2ProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesP2ProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesP2Proxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/p2/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesP2ProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesP2ProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesP2Proxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesPypiGroup creates py p i group repository
*/
func (a *Client) PostRepositoriesPypiGroup(params *PostRepositoriesPypiGroupParams, opts ...ClientOption) (*PostRepositoriesPypiGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesPypiGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesPypiGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/pypi/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesPypiGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesPypiGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesPypiGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesPypiHosted creates py p i hosted repository
*/
func (a *Client) PostRepositoriesPypiHosted(params *PostRepositoriesPypiHostedParams, opts ...ClientOption) (*PostRepositoriesPypiHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesPypiHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesPypiHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/pypi/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesPypiHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesPypiHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesPypiHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesPypiProxy creates py p i proxy repository
*/
func (a *Client) PostRepositoriesPypiProxy(params *PostRepositoriesPypiProxyParams, opts ...ClientOption) (*PostRepositoriesPypiProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesPypiProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesPypiProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/pypi/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesPypiProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesPypiProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesPypiProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesRGroup creates r group repository
*/
func (a *Client) PostRepositoriesRGroup(params *PostRepositoriesRGroupParams, opts ...ClientOption) (*PostRepositoriesRGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesRGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesRGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/r/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesRGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesRGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesRGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesRHosted creates r hosted repository
*/
func (a *Client) PostRepositoriesRHosted(params *PostRepositoriesRHostedParams, opts ...ClientOption) (*PostRepositoriesRHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesRHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesRHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/r/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesRHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesRHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesRHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesRProxy creates r proxy repository
*/
func (a *Client) PostRepositoriesRProxy(params *PostRepositoriesRProxyParams, opts ...ClientOption) (*PostRepositoriesRProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesRProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesRProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/r/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesRProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesRProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesRProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesRawGroup creates raw group repository
*/
func (a *Client) PostRepositoriesRawGroup(params *PostRepositoriesRawGroupParams, opts ...ClientOption) (*PostRepositoriesRawGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesRawGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesRawGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/raw/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesRawGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesRawGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesRawGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesRawHosted creates raw hosted repository
*/
func (a *Client) PostRepositoriesRawHosted(params *PostRepositoriesRawHostedParams, opts ...ClientOption) (*PostRepositoriesRawHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesRawHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesRawHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/raw/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesRawHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesRawHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesRawHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesRawProxy creates raw proxy repository
*/
func (a *Client) PostRepositoriesRawProxy(params *PostRepositoriesRawProxyParams, opts ...ClientOption) (*PostRepositoriesRawProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesRawProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesRawProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/raw/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesRawProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesRawProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesRawProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesRubygemsGroup creates ruby gems group repository
*/
func (a *Client) PostRepositoriesRubygemsGroup(params *PostRepositoriesRubygemsGroupParams, opts ...ClientOption) (*PostRepositoriesRubygemsGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesRubygemsGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesRubygemsGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/rubygems/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesRubygemsGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesRubygemsGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesRubygemsGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesRubygemsHosted creates ruby gems hosted repository
*/
func (a *Client) PostRepositoriesRubygemsHosted(params *PostRepositoriesRubygemsHostedParams, opts ...ClientOption) (*PostRepositoriesRubygemsHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesRubygemsHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesRubygemsHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/rubygems/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesRubygemsHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesRubygemsHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesRubygemsHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesRubygemsProxy creates ruby gems proxy repository
*/
func (a *Client) PostRepositoriesRubygemsProxy(params *PostRepositoriesRubygemsProxyParams, opts ...ClientOption) (*PostRepositoriesRubygemsProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesRubygemsProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesRubygemsProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/rubygems/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesRubygemsProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesRubygemsProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesRubygemsProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesYumGroup creates yum group repository
*/
func (a *Client) PostRepositoriesYumGroup(params *PostRepositoriesYumGroupParams, opts ...ClientOption) (*PostRepositoriesYumGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesYumGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesYumGroup",
		Method:             "POST",
		PathPattern:        "/v1/repositories/yum/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesYumGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesYumGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesYumGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesYumHosted creates yum hosted repository
*/
func (a *Client) PostRepositoriesYumHosted(params *PostRepositoriesYumHostedParams, opts ...ClientOption) (*PostRepositoriesYumHostedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesYumHostedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesYumHosted",
		Method:             "POST",
		PathPattern:        "/v1/repositories/yum/hosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesYumHostedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesYumHostedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesYumHosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepositoriesYumProxy creates yum proxy repository
*/
func (a *Client) PostRepositoriesYumProxy(params *PostRepositoriesYumProxyParams, opts ...ClientOption) (*PostRepositoriesYumProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesYumProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepositoriesYumProxy",
		Method:             "POST",
		PathPattern:        "/v1/repositories/yum/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRepositoriesYumProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesYumProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesYumProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesAptHostedByRepositoryname updates a p t hosted repository
*/
func (a *Client) PutRepositoriesAptHostedByRepositoryname(params *PutRepositoriesAptHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesAptHostedByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesAptHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesAptHostedByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/apt/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesAptHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesAptHostedByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesAptHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesAptProxyByRepositoryname updates a p t proxy repository
*/
func (a *Client) PutRepositoriesAptProxyByRepositoryname(params *PutRepositoriesAptProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesAptProxyByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesAptProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesAptProxyByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/apt/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesAptProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesAptProxyByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesAptProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesCargoGroupByRepositoryname updates cargo group repository
*/
func (a *Client) PutRepositoriesCargoGroupByRepositoryname(params *PutRepositoriesCargoGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesCargoGroupByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesCargoGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesCargoGroupByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/cargo/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesCargoGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesCargoGroupByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesCargoGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesCargoHostedByRepositoryname updates cargo hosted repository
*/
func (a *Client) PutRepositoriesCargoHostedByRepositoryname(params *PutRepositoriesCargoHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesCargoHostedByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesCargoHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesCargoHostedByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/cargo/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesCargoHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesCargoHostedByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesCargoHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesCargoProxyByRepositoryname updates cargo proxy repository
*/
func (a *Client) PutRepositoriesCargoProxyByRepositoryname(params *PutRepositoriesCargoProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesCargoProxyByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesCargoProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesCargoProxyByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/cargo/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesCargoProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesCargoProxyByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesCargoProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesCocoapodsProxyByRepositoryname updates cocoapods proxy repository
*/
func (a *Client) PutRepositoriesCocoapodsProxyByRepositoryname(params *PutRepositoriesCocoapodsProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesCocoapodsProxyByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesCocoapodsProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesCocoapodsProxyByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/cocoapods/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesCocoapodsProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesCocoapodsProxyByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesCocoapodsProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesComposerProxyByRepositoryname updates composer proxy repository
*/
func (a *Client) PutRepositoriesComposerProxyByRepositoryname(params *PutRepositoriesComposerProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesComposerProxyByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesComposerProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesComposerProxyByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/composer/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesComposerProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesComposerProxyByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesComposerProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesConanGroupByRepositoryname updates conan group repository
*/
func (a *Client) PutRepositoriesConanGroupByRepositoryname(params *PutRepositoriesConanGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesConanGroupByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesConanGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesConanGroupByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/conan/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesConanGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesConanGroupByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesConanGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesConanHostedByRepositoryname updates conan hosted repository
*/
func (a *Client) PutRepositoriesConanHostedByRepositoryname(params *PutRepositoriesConanHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesConanHostedByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesConanHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesConanHostedByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/conan/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesConanHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesConanHostedByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesConanHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesConanProxyByRepositoryname updates conan proxy repository
*/
func (a *Client) PutRepositoriesConanProxyByRepositoryname(params *PutRepositoriesConanProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesConanProxyByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesConanProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesConanProxyByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/conan/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesConanProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesConanProxyByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesConanProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesCondaProxyByRepositoryname updates conda proxy repository
*/
func (a *Client) PutRepositoriesCondaProxyByRepositoryname(params *PutRepositoriesCondaProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesCondaProxyByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesCondaProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesCondaProxyByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/conda/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesCondaProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesCondaProxyByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesCondaProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesDockerGroupByRepositoryname updates docker group repository
*/
func (a *Client) PutRepositoriesDockerGroupByRepositoryname(params *PutRepositoriesDockerGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesDockerGroupByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesDockerGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesDockerGroupByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/docker/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesDockerGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesDockerGroupByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesDockerGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesDockerHostedByRepositoryname updates docker hosted repository
*/
func (a *Client) PutRepositoriesDockerHostedByRepositoryname(params *PutRepositoriesDockerHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesDockerHostedByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesDockerHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesDockerHostedByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/docker/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesDockerHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesDockerHostedByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesDockerHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesDockerProxyByRepositoryname updates docker proxy repository
*/
func (a *Client) PutRepositoriesDockerProxyByRepositoryname(params *PutRepositoriesDockerProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesDockerProxyByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesDockerProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesDockerProxyByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/docker/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesDockerProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesDockerProxyByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesDockerProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesGitlfsHostedByRepositoryname updates git l f s hosted repository
*/
func (a *Client) PutRepositoriesGitlfsHostedByRepositoryname(params *PutRepositoriesGitlfsHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesGitlfsHostedByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesGitlfsHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesGitlfsHostedByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/gitlfs/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesGitlfsHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesGitlfsHostedByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesGitlfsHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesGoGroupByRepositoryname updates a go group repository
*/
func (a *Client) PutRepositoriesGoGroupByRepositoryname(params *PutRepositoriesGoGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesGoGroupByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesGoGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesGoGroupByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/go/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesGoGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesGoGroupByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesGoGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesGoProxyByRepositoryname updates a go proxy repository
*/
func (a *Client) PutRepositoriesGoProxyByRepositoryname(params *PutRepositoriesGoProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesGoProxyByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesGoProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesGoProxyByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/go/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesGoProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesGoProxyByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesGoProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesHelmHostedByRepositoryname updates helm hosted repository
*/
func (a *Client) PutRepositoriesHelmHostedByRepositoryname(params *PutRepositoriesHelmHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesHelmHostedByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesHelmHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesHelmHostedByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/helm/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesHelmHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesHelmHostedByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesHelmHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesHelmProxyByRepositoryname updates helm proxy repository
*/
func (a *Client) PutRepositoriesHelmProxyByRepositoryname(params *PutRepositoriesHelmProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesHelmProxyByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesHelmProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesHelmProxyByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/helm/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesHelmProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesHelmProxyByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesHelmProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesHuggingfaceProxyByRepositoryname updates huggingface proxy repository
*/
func (a *Client) PutRepositoriesHuggingfaceProxyByRepositoryname(params *PutRepositoriesHuggingfaceProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesHuggingfaceProxyByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesHuggingfaceProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesHuggingfaceProxyByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/huggingface/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesHuggingfaceProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesHuggingfaceProxyByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesHuggingfaceProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesMavenGroupByRepositoryname updates maven group repository
*/
func (a *Client) PutRepositoriesMavenGroupByRepositoryname(params *PutRepositoriesMavenGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesMavenGroupByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesMavenGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesMavenGroupByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/maven/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesMavenGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesMavenGroupByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesMavenGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesMavenHostedByRepositoryname updates maven hosted repository
*/
func (a *Client) PutRepositoriesMavenHostedByRepositoryname(params *PutRepositoriesMavenHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesMavenHostedByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesMavenHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesMavenHostedByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/maven/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesMavenHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesMavenHostedByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesMavenHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesMavenProxyByRepositoryname updates maven proxy repository
*/
func (a *Client) PutRepositoriesMavenProxyByRepositoryname(params *PutRepositoriesMavenProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesMavenProxyByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesMavenProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesMavenProxyByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/maven/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesMavenProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesMavenProxyByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesMavenProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesNpmGroupByRepositoryname updates npm group repository
*/
func (a *Client) PutRepositoriesNpmGroupByRepositoryname(params *PutRepositoriesNpmGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesNpmGroupByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesNpmGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesNpmGroupByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/npm/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesNpmGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesNpmGroupByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesNpmGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesNpmHostedByRepositoryname updates npm hosted repository
*/
func (a *Client) PutRepositoriesNpmHostedByRepositoryname(params *PutRepositoriesNpmHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesNpmHostedByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesNpmHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesNpmHostedByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/npm/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesNpmHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesNpmHostedByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesNpmHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesNpmProxyByRepositoryname updates npm proxy repository
*/
func (a *Client) PutRepositoriesNpmProxyByRepositoryname(params *PutRepositoriesNpmProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesNpmProxyByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesNpmProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesNpmProxyByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/npm/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesNpmProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesNpmProxyByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesNpmProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesNugetGroupByRepositoryname updates nu get group repository
*/
func (a *Client) PutRepositoriesNugetGroupByRepositoryname(params *PutRepositoriesNugetGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesNugetGroupByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesNugetGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesNugetGroupByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/nuget/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesNugetGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesNugetGroupByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesNugetGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesNugetHostedByRepositoryname updates nu get hosted repository
*/
func (a *Client) PutRepositoriesNugetHostedByRepositoryname(params *PutRepositoriesNugetHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesNugetHostedByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesNugetHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesNugetHostedByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/nuget/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesNugetHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesNugetHostedByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesNugetHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesNugetProxyByRepositoryname updates nu get proxy repository
*/
func (a *Client) PutRepositoriesNugetProxyByRepositoryname(params *PutRepositoriesNugetProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesNugetProxyByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesNugetProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesNugetProxyByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/nuget/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesNugetProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesNugetProxyByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesNugetProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesP2ProxyByRepositoryname updates p2 proxy repository
*/
func (a *Client) PutRepositoriesP2ProxyByRepositoryname(params *PutRepositoriesP2ProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesP2ProxyByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesP2ProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesP2ProxyByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/p2/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesP2ProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesP2ProxyByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesP2ProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesPypiGroupByRepositoryname updates py p i group repository
*/
func (a *Client) PutRepositoriesPypiGroupByRepositoryname(params *PutRepositoriesPypiGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesPypiGroupByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesPypiGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesPypiGroupByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/pypi/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesPypiGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesPypiGroupByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesPypiGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesPypiHostedByRepositoryname updates py p i hosted repository
*/
func (a *Client) PutRepositoriesPypiHostedByRepositoryname(params *PutRepositoriesPypiHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesPypiHostedByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesPypiHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesPypiHostedByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/pypi/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesPypiHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesPypiHostedByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesPypiHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesPypiProxyByRepositoryname updates py p i proxy repository
*/
func (a *Client) PutRepositoriesPypiProxyByRepositoryname(params *PutRepositoriesPypiProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesPypiProxyByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesPypiProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesPypiProxyByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/pypi/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesPypiProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesPypiProxyByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesPypiProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesRGroupByRepositoryname updates r group repository
*/
func (a *Client) PutRepositoriesRGroupByRepositoryname(params *PutRepositoriesRGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesRGroupByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesRGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesRGroupByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/r/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesRGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesRGroupByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesRGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesRHostedByRepositoryname updates r hosted repository
*/
func (a *Client) PutRepositoriesRHostedByRepositoryname(params *PutRepositoriesRHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesRHostedByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesRHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesRHostedByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/r/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesRHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesRHostedByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesRHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesRProxyByRepositoryname updates r proxy repository
*/
func (a *Client) PutRepositoriesRProxyByRepositoryname(params *PutRepositoriesRProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesRProxyByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesRProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesRProxyByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/r/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesRProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesRProxyByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesRProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesRawGroupByRepositoryname updates raw group repository
*/
func (a *Client) PutRepositoriesRawGroupByRepositoryname(params *PutRepositoriesRawGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesRawGroupByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesRawGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesRawGroupByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/raw/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesRawGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesRawGroupByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesRawGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesRawHostedByRepositoryname updates raw hosted repository
*/
func (a *Client) PutRepositoriesRawHostedByRepositoryname(params *PutRepositoriesRawHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesRawHostedByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesRawHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesRawHostedByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/raw/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesRawHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesRawHostedByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesRawHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesRawProxyByRepositoryname updates raw proxy repository
*/
func (a *Client) PutRepositoriesRawProxyByRepositoryname(params *PutRepositoriesRawProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesRawProxyByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesRawProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesRawProxyByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/raw/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesRawProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesRawProxyByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesRawProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesRubygemsGroupByRepositoryname updates ruby gems group repository
*/
func (a *Client) PutRepositoriesRubygemsGroupByRepositoryname(params *PutRepositoriesRubygemsGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesRubygemsGroupByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesRubygemsGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesRubygemsGroupByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/rubygems/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesRubygemsGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesRubygemsGroupByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesRubygemsGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesRubygemsHostedByRepositoryname updates ruby gems hosted repository
*/
func (a *Client) PutRepositoriesRubygemsHostedByRepositoryname(params *PutRepositoriesRubygemsHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesRubygemsHostedByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesRubygemsHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesRubygemsHostedByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/rubygems/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesRubygemsHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesRubygemsHostedByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesRubygemsHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesRubygemsProxyByRepositoryname updates ruby gems proxy repository
*/
func (a *Client) PutRepositoriesRubygemsProxyByRepositoryname(params *PutRepositoriesRubygemsProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesRubygemsProxyByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesRubygemsProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesRubygemsProxyByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/rubygems/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesRubygemsProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesRubygemsProxyByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesRubygemsProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesYumGroupByRepositoryname updates yum group repository
*/
func (a *Client) PutRepositoriesYumGroupByRepositoryname(params *PutRepositoriesYumGroupByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesYumGroupByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesYumGroupByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesYumGroupByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/yum/group/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesYumGroupByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesYumGroupByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesYumGroupByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesYumHostedByRepositoryname updates yum hosted repository
*/
func (a *Client) PutRepositoriesYumHostedByRepositoryname(params *PutRepositoriesYumHostedByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesYumHostedByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesYumHostedByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesYumHostedByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/yum/hosted/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesYumHostedByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesYumHostedByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesYumHostedByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutRepositoriesYumProxyByRepositoryname updates yum proxy repository
*/
func (a *Client) PutRepositoriesYumProxyByRepositoryname(params *PutRepositoriesYumProxyByRepositorynameParams, opts ...ClientOption) (*PutRepositoriesYumProxyByRepositorynameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesYumProxyByRepositorynameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRepositoriesYumProxyByRepositoryname",
		Method:             "PUT",
		PathPattern:        "/v1/repositories/yum/proxy/{repositoryName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRepositoriesYumProxyByRepositorynameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesYumProxyByRepositorynameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesYumProxyByRepositoryname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
