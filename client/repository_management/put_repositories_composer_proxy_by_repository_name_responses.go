// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesComposerProxyByRepositoryNameReader is a Reader for the PutRepositoriesComposerProxyByRepositoryName structure.
type PutRepositoriesComposerProxyByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesComposerProxyByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesComposerProxyByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesComposerProxyByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesComposerProxyByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesComposerProxyByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/composer/proxy/{repositoryName}] PutRepositoriesComposerProxyByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesComposerProxyByRepositoryNameNoContent creates a PutRepositoriesComposerProxyByRepositoryNameNoContent with default headers values
func NewPutRepositoriesComposerProxyByRepositoryNameNoContent() *PutRepositoriesComposerProxyByRepositoryNameNoContent {
	return &PutRepositoriesComposerProxyByRepositoryNameNoContent{}
}

/*
PutRepositoriesComposerProxyByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesComposerProxyByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories composer proxy by repository name no content response has a 2xx status code
func (o *PutRepositoriesComposerProxyByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories composer proxy by repository name no content response has a 3xx status code
func (o *PutRepositoriesComposerProxyByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories composer proxy by repository name no content response has a 4xx status code
func (o *PutRepositoriesComposerProxyByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories composer proxy by repository name no content response has a 5xx status code
func (o *PutRepositoriesComposerProxyByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories composer proxy by repository name no content response a status code equal to that given
func (o *PutRepositoriesComposerProxyByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories composer proxy by repository name no content response
func (o *PutRepositoriesComposerProxyByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesComposerProxyByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/composer/proxy/{repositoryName}][%d] putRepositoriesComposerProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesComposerProxyByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/composer/proxy/{repositoryName}][%d] putRepositoriesComposerProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesComposerProxyByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesComposerProxyByRepositoryNameBadRequest creates a PutRepositoriesComposerProxyByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesComposerProxyByRepositoryNameBadRequest() *PutRepositoriesComposerProxyByRepositoryNameBadRequest {
	return &PutRepositoriesComposerProxyByRepositoryNameBadRequest{}
}

/*
PutRepositoriesComposerProxyByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesComposerProxyByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories composer proxy by repository name bad request response has a 2xx status code
func (o *PutRepositoriesComposerProxyByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories composer proxy by repository name bad request response has a 3xx status code
func (o *PutRepositoriesComposerProxyByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories composer proxy by repository name bad request response has a 4xx status code
func (o *PutRepositoriesComposerProxyByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories composer proxy by repository name bad request response has a 5xx status code
func (o *PutRepositoriesComposerProxyByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories composer proxy by repository name bad request response a status code equal to that given
func (o *PutRepositoriesComposerProxyByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories composer proxy by repository name bad request response
func (o *PutRepositoriesComposerProxyByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesComposerProxyByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/composer/proxy/{repositoryName}][%d] putRepositoriesComposerProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesComposerProxyByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/composer/proxy/{repositoryName}][%d] putRepositoriesComposerProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesComposerProxyByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesComposerProxyByRepositoryNameUnauthorized creates a PutRepositoriesComposerProxyByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesComposerProxyByRepositoryNameUnauthorized() *PutRepositoriesComposerProxyByRepositoryNameUnauthorized {
	return &PutRepositoriesComposerProxyByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesComposerProxyByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesComposerProxyByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories composer proxy by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesComposerProxyByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories composer proxy by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesComposerProxyByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories composer proxy by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesComposerProxyByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories composer proxy by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesComposerProxyByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories composer proxy by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesComposerProxyByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories composer proxy by repository name unauthorized response
func (o *PutRepositoriesComposerProxyByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesComposerProxyByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/composer/proxy/{repositoryName}][%d] putRepositoriesComposerProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesComposerProxyByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/composer/proxy/{repositoryName}][%d] putRepositoriesComposerProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesComposerProxyByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesComposerProxyByRepositoryNameForbidden creates a PutRepositoriesComposerProxyByRepositoryNameForbidden with default headers values
func NewPutRepositoriesComposerProxyByRepositoryNameForbidden() *PutRepositoriesComposerProxyByRepositoryNameForbidden {
	return &PutRepositoriesComposerProxyByRepositoryNameForbidden{}
}

/*
PutRepositoriesComposerProxyByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesComposerProxyByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories composer proxy by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesComposerProxyByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories composer proxy by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesComposerProxyByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories composer proxy by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesComposerProxyByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories composer proxy by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesComposerProxyByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories composer proxy by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesComposerProxyByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories composer proxy by repository name forbidden response
func (o *PutRepositoriesComposerProxyByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesComposerProxyByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/composer/proxy/{repositoryName}][%d] putRepositoriesComposerProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesComposerProxyByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/composer/proxy/{repositoryName}][%d] putRepositoriesComposerProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesComposerProxyByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
