// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesYumHostedByRepositorynameReader is a Reader for the PutRepositoriesYumHostedByRepositoryname structure.
type PutRepositoriesYumHostedByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesYumHostedByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesYumHostedByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesYumHostedByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesYumHostedByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesYumHostedByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/yum/hosted/{repositoryName}] PutRepositoriesYumHostedByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesYumHostedByRepositorynameNoContent creates a PutRepositoriesYumHostedByRepositorynameNoContent with default headers values
func NewPutRepositoriesYumHostedByRepositorynameNoContent() *PutRepositoriesYumHostedByRepositorynameNoContent {
	return &PutRepositoriesYumHostedByRepositorynameNoContent{}
}

/*
PutRepositoriesYumHostedByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesYumHostedByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories yum hosted by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesYumHostedByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories yum hosted by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesYumHostedByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories yum hosted by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesYumHostedByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories yum hosted by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesYumHostedByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories yum hosted by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesYumHostedByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories yum hosted by repositoryname no content response
func (o *PutRepositoriesYumHostedByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesYumHostedByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/hosted/{repositoryName}][%d] putRepositoriesYumHostedByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesYumHostedByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/hosted/{repositoryName}][%d] putRepositoriesYumHostedByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesYumHostedByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesYumHostedByRepositorynameBadRequest creates a PutRepositoriesYumHostedByRepositorynameBadRequest with default headers values
func NewPutRepositoriesYumHostedByRepositorynameBadRequest() *PutRepositoriesYumHostedByRepositorynameBadRequest {
	return &PutRepositoriesYumHostedByRepositorynameBadRequest{}
}

/*
PutRepositoriesYumHostedByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesYumHostedByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories yum hosted by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesYumHostedByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories yum hosted by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesYumHostedByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories yum hosted by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesYumHostedByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories yum hosted by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesYumHostedByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories yum hosted by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesYumHostedByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories yum hosted by repositoryname bad request response
func (o *PutRepositoriesYumHostedByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesYumHostedByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/hosted/{repositoryName}][%d] putRepositoriesYumHostedByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesYumHostedByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/hosted/{repositoryName}][%d] putRepositoriesYumHostedByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesYumHostedByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesYumHostedByRepositorynameUnauthorized creates a PutRepositoriesYumHostedByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesYumHostedByRepositorynameUnauthorized() *PutRepositoriesYumHostedByRepositorynameUnauthorized {
	return &PutRepositoriesYumHostedByRepositorynameUnauthorized{}
}

/*
PutRepositoriesYumHostedByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesYumHostedByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories yum hosted by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesYumHostedByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories yum hosted by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesYumHostedByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories yum hosted by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesYumHostedByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories yum hosted by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesYumHostedByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories yum hosted by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesYumHostedByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories yum hosted by repositoryname unauthorized response
func (o *PutRepositoriesYumHostedByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesYumHostedByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/hosted/{repositoryName}][%d] putRepositoriesYumHostedByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesYumHostedByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/hosted/{repositoryName}][%d] putRepositoriesYumHostedByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesYumHostedByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesYumHostedByRepositorynameForbidden creates a PutRepositoriesYumHostedByRepositorynameForbidden with default headers values
func NewPutRepositoriesYumHostedByRepositorynameForbidden() *PutRepositoriesYumHostedByRepositorynameForbidden {
	return &PutRepositoriesYumHostedByRepositorynameForbidden{}
}

/*
PutRepositoriesYumHostedByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesYumHostedByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories yum hosted by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesYumHostedByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories yum hosted by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesYumHostedByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories yum hosted by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesYumHostedByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories yum hosted by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesYumHostedByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories yum hosted by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesYumHostedByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories yum hosted by repositoryname forbidden response
func (o *PutRepositoriesYumHostedByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesYumHostedByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/hosted/{repositoryName}][%d] putRepositoriesYumHostedByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesYumHostedByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/hosted/{repositoryName}][%d] putRepositoriesYumHostedByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesYumHostedByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
