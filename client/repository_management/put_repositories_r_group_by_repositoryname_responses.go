// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesRGroupByRepositorynameReader is a Reader for the PutRepositoriesRGroupByRepositoryname structure.
type PutRepositoriesRGroupByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesRGroupByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesRGroupByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesRGroupByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesRGroupByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesRGroupByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/r/group/{repositoryName}] PutRepositoriesRGroupByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesRGroupByRepositorynameNoContent creates a PutRepositoriesRGroupByRepositorynameNoContent with default headers values
func NewPutRepositoriesRGroupByRepositorynameNoContent() *PutRepositoriesRGroupByRepositorynameNoContent {
	return &PutRepositoriesRGroupByRepositorynameNoContent{}
}

/*
PutRepositoriesRGroupByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesRGroupByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories r group by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesRGroupByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories r group by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesRGroupByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories r group by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesRGroupByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories r group by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesRGroupByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories r group by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesRGroupByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories r group by repositoryname no content response
func (o *PutRepositoriesRGroupByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesRGroupByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] putRepositoriesRGroupByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesRGroupByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] putRepositoriesRGroupByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesRGroupByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRGroupByRepositorynameBadRequest creates a PutRepositoriesRGroupByRepositorynameBadRequest with default headers values
func NewPutRepositoriesRGroupByRepositorynameBadRequest() *PutRepositoriesRGroupByRepositorynameBadRequest {
	return &PutRepositoriesRGroupByRepositorynameBadRequest{}
}

/*
PutRepositoriesRGroupByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesRGroupByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories r group by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesRGroupByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories r group by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesRGroupByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories r group by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesRGroupByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories r group by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesRGroupByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories r group by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesRGroupByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories r group by repositoryname bad request response
func (o *PutRepositoriesRGroupByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesRGroupByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] putRepositoriesRGroupByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesRGroupByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] putRepositoriesRGroupByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesRGroupByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRGroupByRepositorynameUnauthorized creates a PutRepositoriesRGroupByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesRGroupByRepositorynameUnauthorized() *PutRepositoriesRGroupByRepositorynameUnauthorized {
	return &PutRepositoriesRGroupByRepositorynameUnauthorized{}
}

/*
PutRepositoriesRGroupByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesRGroupByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories r group by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesRGroupByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories r group by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesRGroupByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories r group by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesRGroupByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories r group by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesRGroupByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories r group by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesRGroupByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories r group by repositoryname unauthorized response
func (o *PutRepositoriesRGroupByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesRGroupByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] putRepositoriesRGroupByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesRGroupByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] putRepositoriesRGroupByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesRGroupByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRGroupByRepositorynameForbidden creates a PutRepositoriesRGroupByRepositorynameForbidden with default headers values
func NewPutRepositoriesRGroupByRepositorynameForbidden() *PutRepositoriesRGroupByRepositorynameForbidden {
	return &PutRepositoriesRGroupByRepositorynameForbidden{}
}

/*
PutRepositoriesRGroupByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesRGroupByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories r group by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesRGroupByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories r group by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesRGroupByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories r group by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesRGroupByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories r group by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesRGroupByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories r group by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesRGroupByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories r group by repositoryname forbidden response
func (o *PutRepositoriesRGroupByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesRGroupByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] putRepositoriesRGroupByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesRGroupByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] putRepositoriesRGroupByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesRGroupByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
