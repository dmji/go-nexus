// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesDockerHostedByRepositorynameReader is a Reader for the PutRepositoriesDockerHostedByRepositoryname structure.
type PutRepositoriesDockerHostedByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesDockerHostedByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesDockerHostedByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesDockerHostedByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesDockerHostedByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesDockerHostedByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRepositoriesDockerHostedByRepositorynameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/docker/hosted/{repositoryName}] PutRepositoriesDockerHostedByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesDockerHostedByRepositorynameNoContent creates a PutRepositoriesDockerHostedByRepositorynameNoContent with default headers values
func NewPutRepositoriesDockerHostedByRepositorynameNoContent() *PutRepositoriesDockerHostedByRepositorynameNoContent {
	return &PutRepositoriesDockerHostedByRepositorynameNoContent{}
}

/*
PutRepositoriesDockerHostedByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesDockerHostedByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories docker hosted by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesDockerHostedByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories docker hosted by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesDockerHostedByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories docker hosted by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesDockerHostedByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories docker hosted by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesDockerHostedByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories docker hosted by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesDockerHostedByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories docker hosted by repositoryname no content response
func (o *PutRepositoriesDockerHostedByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesDockerHostedByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/hosted/{repositoryName}][%d] putRepositoriesDockerHostedByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesDockerHostedByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/hosted/{repositoryName}][%d] putRepositoriesDockerHostedByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesDockerHostedByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesDockerHostedByRepositorynameBadRequest creates a PutRepositoriesDockerHostedByRepositorynameBadRequest with default headers values
func NewPutRepositoriesDockerHostedByRepositorynameBadRequest() *PutRepositoriesDockerHostedByRepositorynameBadRequest {
	return &PutRepositoriesDockerHostedByRepositorynameBadRequest{}
}

/*
PutRepositoriesDockerHostedByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesDockerHostedByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories docker hosted by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesDockerHostedByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories docker hosted by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesDockerHostedByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories docker hosted by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesDockerHostedByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories docker hosted by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesDockerHostedByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories docker hosted by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesDockerHostedByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories docker hosted by repositoryname bad request response
func (o *PutRepositoriesDockerHostedByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesDockerHostedByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/hosted/{repositoryName}][%d] putRepositoriesDockerHostedByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesDockerHostedByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/hosted/{repositoryName}][%d] putRepositoriesDockerHostedByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesDockerHostedByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesDockerHostedByRepositorynameUnauthorized creates a PutRepositoriesDockerHostedByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesDockerHostedByRepositorynameUnauthorized() *PutRepositoriesDockerHostedByRepositorynameUnauthorized {
	return &PutRepositoriesDockerHostedByRepositorynameUnauthorized{}
}

/*
PutRepositoriesDockerHostedByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesDockerHostedByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories docker hosted by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesDockerHostedByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories docker hosted by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesDockerHostedByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories docker hosted by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesDockerHostedByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories docker hosted by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesDockerHostedByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories docker hosted by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesDockerHostedByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories docker hosted by repositoryname unauthorized response
func (o *PutRepositoriesDockerHostedByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesDockerHostedByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/hosted/{repositoryName}][%d] putRepositoriesDockerHostedByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesDockerHostedByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/hosted/{repositoryName}][%d] putRepositoriesDockerHostedByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesDockerHostedByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesDockerHostedByRepositorynameForbidden creates a PutRepositoriesDockerHostedByRepositorynameForbidden with default headers values
func NewPutRepositoriesDockerHostedByRepositorynameForbidden() *PutRepositoriesDockerHostedByRepositorynameForbidden {
	return &PutRepositoriesDockerHostedByRepositorynameForbidden{}
}

/*
PutRepositoriesDockerHostedByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesDockerHostedByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories docker hosted by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesDockerHostedByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories docker hosted by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesDockerHostedByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories docker hosted by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesDockerHostedByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories docker hosted by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesDockerHostedByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories docker hosted by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesDockerHostedByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories docker hosted by repositoryname forbidden response
func (o *PutRepositoriesDockerHostedByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesDockerHostedByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/hosted/{repositoryName}][%d] putRepositoriesDockerHostedByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesDockerHostedByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/hosted/{repositoryName}][%d] putRepositoriesDockerHostedByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesDockerHostedByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesDockerHostedByRepositorynameNotFound creates a PutRepositoriesDockerHostedByRepositorynameNotFound with default headers values
func NewPutRepositoriesDockerHostedByRepositorynameNotFound() *PutRepositoriesDockerHostedByRepositorynameNotFound {
	return &PutRepositoriesDockerHostedByRepositorynameNotFound{}
}

/*
PutRepositoriesDockerHostedByRepositorynameNotFound describes a response with status code 404, with default header values.

Repository not found
*/
type PutRepositoriesDockerHostedByRepositorynameNotFound struct {
}

// IsSuccess returns true when this put repositories docker hosted by repositoryname not found response has a 2xx status code
func (o *PutRepositoriesDockerHostedByRepositorynameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories docker hosted by repositoryname not found response has a 3xx status code
func (o *PutRepositoriesDockerHostedByRepositorynameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories docker hosted by repositoryname not found response has a 4xx status code
func (o *PutRepositoriesDockerHostedByRepositorynameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories docker hosted by repositoryname not found response has a 5xx status code
func (o *PutRepositoriesDockerHostedByRepositorynameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories docker hosted by repositoryname not found response a status code equal to that given
func (o *PutRepositoriesDockerHostedByRepositorynameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put repositories docker hosted by repositoryname not found response
func (o *PutRepositoriesDockerHostedByRepositorynameNotFound) Code() int {
	return 404
}

func (o *PutRepositoriesDockerHostedByRepositorynameNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/hosted/{repositoryName}][%d] putRepositoriesDockerHostedByRepositorynameNotFound", 404)
}

func (o *PutRepositoriesDockerHostedByRepositorynameNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/hosted/{repositoryName}][%d] putRepositoriesDockerHostedByRepositorynameNotFound", 404)
}

func (o *PutRepositoriesDockerHostedByRepositorynameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
