// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesRawProxyByRepositoryNameReader is a Reader for the PutRepositoriesRawProxyByRepositoryName structure.
type PutRepositoriesRawProxyByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesRawProxyByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesRawProxyByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesRawProxyByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesRawProxyByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesRawProxyByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/raw/proxy/{repositoryName}] PutRepositoriesRawProxyByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesRawProxyByRepositoryNameNoContent creates a PutRepositoriesRawProxyByRepositoryNameNoContent with default headers values
func NewPutRepositoriesRawProxyByRepositoryNameNoContent() *PutRepositoriesRawProxyByRepositoryNameNoContent {
	return &PutRepositoriesRawProxyByRepositoryNameNoContent{}
}

/*
PutRepositoriesRawProxyByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesRawProxyByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories raw proxy by repository name no content response has a 2xx status code
func (o *PutRepositoriesRawProxyByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories raw proxy by repository name no content response has a 3xx status code
func (o *PutRepositoriesRawProxyByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories raw proxy by repository name no content response has a 4xx status code
func (o *PutRepositoriesRawProxyByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories raw proxy by repository name no content response has a 5xx status code
func (o *PutRepositoriesRawProxyByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories raw proxy by repository name no content response a status code equal to that given
func (o *PutRepositoriesRawProxyByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories raw proxy by repository name no content response
func (o *PutRepositoriesRawProxyByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesRawProxyByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/proxy/{repositoryName}][%d] putRepositoriesRawProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesRawProxyByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/proxy/{repositoryName}][%d] putRepositoriesRawProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesRawProxyByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRawProxyByRepositoryNameBadRequest creates a PutRepositoriesRawProxyByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesRawProxyByRepositoryNameBadRequest() *PutRepositoriesRawProxyByRepositoryNameBadRequest {
	return &PutRepositoriesRawProxyByRepositoryNameBadRequest{}
}

/*
PutRepositoriesRawProxyByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesRawProxyByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories raw proxy by repository name bad request response has a 2xx status code
func (o *PutRepositoriesRawProxyByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories raw proxy by repository name bad request response has a 3xx status code
func (o *PutRepositoriesRawProxyByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories raw proxy by repository name bad request response has a 4xx status code
func (o *PutRepositoriesRawProxyByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories raw proxy by repository name bad request response has a 5xx status code
func (o *PutRepositoriesRawProxyByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories raw proxy by repository name bad request response a status code equal to that given
func (o *PutRepositoriesRawProxyByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories raw proxy by repository name bad request response
func (o *PutRepositoriesRawProxyByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesRawProxyByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/proxy/{repositoryName}][%d] putRepositoriesRawProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesRawProxyByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/proxy/{repositoryName}][%d] putRepositoriesRawProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesRawProxyByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRawProxyByRepositoryNameUnauthorized creates a PutRepositoriesRawProxyByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesRawProxyByRepositoryNameUnauthorized() *PutRepositoriesRawProxyByRepositoryNameUnauthorized {
	return &PutRepositoriesRawProxyByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesRawProxyByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesRawProxyByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories raw proxy by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesRawProxyByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories raw proxy by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesRawProxyByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories raw proxy by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesRawProxyByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories raw proxy by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesRawProxyByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories raw proxy by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesRawProxyByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories raw proxy by repository name unauthorized response
func (o *PutRepositoriesRawProxyByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesRawProxyByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/proxy/{repositoryName}][%d] putRepositoriesRawProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesRawProxyByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/proxy/{repositoryName}][%d] putRepositoriesRawProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesRawProxyByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRawProxyByRepositoryNameForbidden creates a PutRepositoriesRawProxyByRepositoryNameForbidden with default headers values
func NewPutRepositoriesRawProxyByRepositoryNameForbidden() *PutRepositoriesRawProxyByRepositoryNameForbidden {
	return &PutRepositoriesRawProxyByRepositoryNameForbidden{}
}

/*
PutRepositoriesRawProxyByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesRawProxyByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories raw proxy by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesRawProxyByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories raw proxy by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesRawProxyByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories raw proxy by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesRawProxyByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories raw proxy by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesRawProxyByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories raw proxy by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesRawProxyByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories raw proxy by repository name forbidden response
func (o *PutRepositoriesRawProxyByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesRawProxyByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/proxy/{repositoryName}][%d] putRepositoriesRawProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesRawProxyByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/proxy/{repositoryName}][%d] putRepositoriesRawProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesRawProxyByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
