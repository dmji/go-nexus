// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesAptProxyByRepositoryNameReader is a Reader for the PutRepositoriesAptProxyByRepositoryName structure.
type PutRepositoriesAptProxyByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesAptProxyByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesAptProxyByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesAptProxyByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesAptProxyByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesAptProxyByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRepositoriesAptProxyByRepositoryNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/apt/proxy/{repositoryName}] PutRepositoriesAptProxyByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesAptProxyByRepositoryNameNoContent creates a PutRepositoriesAptProxyByRepositoryNameNoContent with default headers values
func NewPutRepositoriesAptProxyByRepositoryNameNoContent() *PutRepositoriesAptProxyByRepositoryNameNoContent {
	return &PutRepositoriesAptProxyByRepositoryNameNoContent{}
}

/*
PutRepositoriesAptProxyByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesAptProxyByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories apt proxy by repository name no content response has a 2xx status code
func (o *PutRepositoriesAptProxyByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories apt proxy by repository name no content response has a 3xx status code
func (o *PutRepositoriesAptProxyByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories apt proxy by repository name no content response has a 4xx status code
func (o *PutRepositoriesAptProxyByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories apt proxy by repository name no content response has a 5xx status code
func (o *PutRepositoriesAptProxyByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories apt proxy by repository name no content response a status code equal to that given
func (o *PutRepositoriesAptProxyByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories apt proxy by repository name no content response
func (o *PutRepositoriesAptProxyByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesAptProxyByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] putRepositoriesAptProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesAptProxyByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] putRepositoriesAptProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesAptProxyByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesAptProxyByRepositoryNameBadRequest creates a PutRepositoriesAptProxyByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesAptProxyByRepositoryNameBadRequest() *PutRepositoriesAptProxyByRepositoryNameBadRequest {
	return &PutRepositoriesAptProxyByRepositoryNameBadRequest{}
}

/*
PutRepositoriesAptProxyByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesAptProxyByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories apt proxy by repository name bad request response has a 2xx status code
func (o *PutRepositoriesAptProxyByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories apt proxy by repository name bad request response has a 3xx status code
func (o *PutRepositoriesAptProxyByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories apt proxy by repository name bad request response has a 4xx status code
func (o *PutRepositoriesAptProxyByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories apt proxy by repository name bad request response has a 5xx status code
func (o *PutRepositoriesAptProxyByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories apt proxy by repository name bad request response a status code equal to that given
func (o *PutRepositoriesAptProxyByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories apt proxy by repository name bad request response
func (o *PutRepositoriesAptProxyByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesAptProxyByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] putRepositoriesAptProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesAptProxyByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] putRepositoriesAptProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesAptProxyByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesAptProxyByRepositoryNameUnauthorized creates a PutRepositoriesAptProxyByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesAptProxyByRepositoryNameUnauthorized() *PutRepositoriesAptProxyByRepositoryNameUnauthorized {
	return &PutRepositoriesAptProxyByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesAptProxyByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesAptProxyByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories apt proxy by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesAptProxyByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories apt proxy by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesAptProxyByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories apt proxy by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesAptProxyByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories apt proxy by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesAptProxyByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories apt proxy by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesAptProxyByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories apt proxy by repository name unauthorized response
func (o *PutRepositoriesAptProxyByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesAptProxyByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] putRepositoriesAptProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesAptProxyByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] putRepositoriesAptProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesAptProxyByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesAptProxyByRepositoryNameForbidden creates a PutRepositoriesAptProxyByRepositoryNameForbidden with default headers values
func NewPutRepositoriesAptProxyByRepositoryNameForbidden() *PutRepositoriesAptProxyByRepositoryNameForbidden {
	return &PutRepositoriesAptProxyByRepositoryNameForbidden{}
}

/*
PutRepositoriesAptProxyByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesAptProxyByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories apt proxy by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesAptProxyByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories apt proxy by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesAptProxyByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories apt proxy by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesAptProxyByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories apt proxy by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesAptProxyByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories apt proxy by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesAptProxyByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories apt proxy by repository name forbidden response
func (o *PutRepositoriesAptProxyByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesAptProxyByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] putRepositoriesAptProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesAptProxyByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] putRepositoriesAptProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesAptProxyByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesAptProxyByRepositoryNameNotFound creates a PutRepositoriesAptProxyByRepositoryNameNotFound with default headers values
func NewPutRepositoriesAptProxyByRepositoryNameNotFound() *PutRepositoriesAptProxyByRepositoryNameNotFound {
	return &PutRepositoriesAptProxyByRepositoryNameNotFound{}
}

/*
PutRepositoriesAptProxyByRepositoryNameNotFound describes a response with status code 404, with default header values.

Repository not found
*/
type PutRepositoriesAptProxyByRepositoryNameNotFound struct {
}

// IsSuccess returns true when this put repositories apt proxy by repository name not found response has a 2xx status code
func (o *PutRepositoriesAptProxyByRepositoryNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories apt proxy by repository name not found response has a 3xx status code
func (o *PutRepositoriesAptProxyByRepositoryNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories apt proxy by repository name not found response has a 4xx status code
func (o *PutRepositoriesAptProxyByRepositoryNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories apt proxy by repository name not found response has a 5xx status code
func (o *PutRepositoriesAptProxyByRepositoryNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories apt proxy by repository name not found response a status code equal to that given
func (o *PutRepositoriesAptProxyByRepositoryNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put repositories apt proxy by repository name not found response
func (o *PutRepositoriesAptProxyByRepositoryNameNotFound) Code() int {
	return 404
}

func (o *PutRepositoriesAptProxyByRepositoryNameNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] putRepositoriesAptProxyByRepositoryNameNotFound", 404)
}

func (o *PutRepositoriesAptProxyByRepositoryNameNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] putRepositoriesAptProxyByRepositoryNameNotFound", 404)
}

func (o *PutRepositoriesAptProxyByRepositoryNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
