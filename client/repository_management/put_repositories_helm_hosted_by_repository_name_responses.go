// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesHelmHostedByRepositoryNameReader is a Reader for the PutRepositoriesHelmHostedByRepositoryName structure.
type PutRepositoriesHelmHostedByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesHelmHostedByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesHelmHostedByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesHelmHostedByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesHelmHostedByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesHelmHostedByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/helm/hosted/{repositoryName}] PutRepositoriesHelmHostedByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesHelmHostedByRepositoryNameNoContent creates a PutRepositoriesHelmHostedByRepositoryNameNoContent with default headers values
func NewPutRepositoriesHelmHostedByRepositoryNameNoContent() *PutRepositoriesHelmHostedByRepositoryNameNoContent {
	return &PutRepositoriesHelmHostedByRepositoryNameNoContent{}
}

/*
PutRepositoriesHelmHostedByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesHelmHostedByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories helm hosted by repository name no content response has a 2xx status code
func (o *PutRepositoriesHelmHostedByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories helm hosted by repository name no content response has a 3xx status code
func (o *PutRepositoriesHelmHostedByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories helm hosted by repository name no content response has a 4xx status code
func (o *PutRepositoriesHelmHostedByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories helm hosted by repository name no content response has a 5xx status code
func (o *PutRepositoriesHelmHostedByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories helm hosted by repository name no content response a status code equal to that given
func (o *PutRepositoriesHelmHostedByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories helm hosted by repository name no content response
func (o *PutRepositoriesHelmHostedByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesHelmHostedByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] putRepositoriesHelmHostedByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesHelmHostedByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] putRepositoriesHelmHostedByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesHelmHostedByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesHelmHostedByRepositoryNameBadRequest creates a PutRepositoriesHelmHostedByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesHelmHostedByRepositoryNameBadRequest() *PutRepositoriesHelmHostedByRepositoryNameBadRequest {
	return &PutRepositoriesHelmHostedByRepositoryNameBadRequest{}
}

/*
PutRepositoriesHelmHostedByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesHelmHostedByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories helm hosted by repository name bad request response has a 2xx status code
func (o *PutRepositoriesHelmHostedByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories helm hosted by repository name bad request response has a 3xx status code
func (o *PutRepositoriesHelmHostedByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories helm hosted by repository name bad request response has a 4xx status code
func (o *PutRepositoriesHelmHostedByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories helm hosted by repository name bad request response has a 5xx status code
func (o *PutRepositoriesHelmHostedByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories helm hosted by repository name bad request response a status code equal to that given
func (o *PutRepositoriesHelmHostedByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories helm hosted by repository name bad request response
func (o *PutRepositoriesHelmHostedByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesHelmHostedByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] putRepositoriesHelmHostedByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesHelmHostedByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] putRepositoriesHelmHostedByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesHelmHostedByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesHelmHostedByRepositoryNameUnauthorized creates a PutRepositoriesHelmHostedByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesHelmHostedByRepositoryNameUnauthorized() *PutRepositoriesHelmHostedByRepositoryNameUnauthorized {
	return &PutRepositoriesHelmHostedByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesHelmHostedByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesHelmHostedByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories helm hosted by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesHelmHostedByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories helm hosted by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesHelmHostedByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories helm hosted by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesHelmHostedByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories helm hosted by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesHelmHostedByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories helm hosted by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesHelmHostedByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories helm hosted by repository name unauthorized response
func (o *PutRepositoriesHelmHostedByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesHelmHostedByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] putRepositoriesHelmHostedByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesHelmHostedByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] putRepositoriesHelmHostedByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesHelmHostedByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesHelmHostedByRepositoryNameForbidden creates a PutRepositoriesHelmHostedByRepositoryNameForbidden with default headers values
func NewPutRepositoriesHelmHostedByRepositoryNameForbidden() *PutRepositoriesHelmHostedByRepositoryNameForbidden {
	return &PutRepositoriesHelmHostedByRepositoryNameForbidden{}
}

/*
PutRepositoriesHelmHostedByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesHelmHostedByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories helm hosted by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesHelmHostedByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories helm hosted by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesHelmHostedByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories helm hosted by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesHelmHostedByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories helm hosted by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesHelmHostedByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories helm hosted by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesHelmHostedByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories helm hosted by repository name forbidden response
func (o *PutRepositoriesHelmHostedByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesHelmHostedByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] putRepositoriesHelmHostedByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesHelmHostedByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] putRepositoriesHelmHostedByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesHelmHostedByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
