// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesCargoGroupByRepositorynameReader is a Reader for the PutRepositoriesCargoGroupByRepositoryname structure.
type PutRepositoriesCargoGroupByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesCargoGroupByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesCargoGroupByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesCargoGroupByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesCargoGroupByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesCargoGroupByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/cargo/group/{repositoryName}] PutRepositoriesCargoGroupByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesCargoGroupByRepositorynameNoContent creates a PutRepositoriesCargoGroupByRepositorynameNoContent with default headers values
func NewPutRepositoriesCargoGroupByRepositorynameNoContent() *PutRepositoriesCargoGroupByRepositorynameNoContent {
	return &PutRepositoriesCargoGroupByRepositorynameNoContent{}
}

/*
PutRepositoriesCargoGroupByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesCargoGroupByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories cargo group by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesCargoGroupByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories cargo group by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesCargoGroupByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories cargo group by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesCargoGroupByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories cargo group by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesCargoGroupByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories cargo group by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesCargoGroupByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories cargo group by repositoryname no content response
func (o *PutRepositoriesCargoGroupByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesCargoGroupByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/cargo/group/{repositoryName}][%d] putRepositoriesCargoGroupByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesCargoGroupByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/cargo/group/{repositoryName}][%d] putRepositoriesCargoGroupByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesCargoGroupByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesCargoGroupByRepositorynameBadRequest creates a PutRepositoriesCargoGroupByRepositorynameBadRequest with default headers values
func NewPutRepositoriesCargoGroupByRepositorynameBadRequest() *PutRepositoriesCargoGroupByRepositorynameBadRequest {
	return &PutRepositoriesCargoGroupByRepositorynameBadRequest{}
}

/*
PutRepositoriesCargoGroupByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesCargoGroupByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories cargo group by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesCargoGroupByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories cargo group by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesCargoGroupByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories cargo group by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesCargoGroupByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories cargo group by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesCargoGroupByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories cargo group by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesCargoGroupByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories cargo group by repositoryname bad request response
func (o *PutRepositoriesCargoGroupByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesCargoGroupByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/cargo/group/{repositoryName}][%d] putRepositoriesCargoGroupByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesCargoGroupByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/cargo/group/{repositoryName}][%d] putRepositoriesCargoGroupByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesCargoGroupByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesCargoGroupByRepositorynameUnauthorized creates a PutRepositoriesCargoGroupByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesCargoGroupByRepositorynameUnauthorized() *PutRepositoriesCargoGroupByRepositorynameUnauthorized {
	return &PutRepositoriesCargoGroupByRepositorynameUnauthorized{}
}

/*
PutRepositoriesCargoGroupByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesCargoGroupByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories cargo group by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesCargoGroupByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories cargo group by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesCargoGroupByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories cargo group by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesCargoGroupByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories cargo group by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesCargoGroupByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories cargo group by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesCargoGroupByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories cargo group by repositoryname unauthorized response
func (o *PutRepositoriesCargoGroupByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesCargoGroupByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/cargo/group/{repositoryName}][%d] putRepositoriesCargoGroupByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesCargoGroupByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/cargo/group/{repositoryName}][%d] putRepositoriesCargoGroupByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesCargoGroupByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesCargoGroupByRepositorynameForbidden creates a PutRepositoriesCargoGroupByRepositorynameForbidden with default headers values
func NewPutRepositoriesCargoGroupByRepositorynameForbidden() *PutRepositoriesCargoGroupByRepositorynameForbidden {
	return &PutRepositoriesCargoGroupByRepositorynameForbidden{}
}

/*
PutRepositoriesCargoGroupByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesCargoGroupByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories cargo group by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesCargoGroupByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories cargo group by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesCargoGroupByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories cargo group by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesCargoGroupByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories cargo group by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesCargoGroupByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories cargo group by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesCargoGroupByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories cargo group by repositoryname forbidden response
func (o *PutRepositoriesCargoGroupByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesCargoGroupByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/cargo/group/{repositoryName}][%d] putRepositoriesCargoGroupByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesCargoGroupByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/cargo/group/{repositoryName}][%d] putRepositoriesCargoGroupByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesCargoGroupByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
