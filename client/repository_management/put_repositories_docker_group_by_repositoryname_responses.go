// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesDockerGroupByRepositorynameReader is a Reader for the PutRepositoriesDockerGroupByRepositoryname structure.
type PutRepositoriesDockerGroupByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesDockerGroupByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesDockerGroupByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesDockerGroupByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesDockerGroupByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesDockerGroupByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRepositoriesDockerGroupByRepositorynameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/docker/group/{repositoryName}] PutRepositoriesDockerGroupByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesDockerGroupByRepositorynameNoContent creates a PutRepositoriesDockerGroupByRepositorynameNoContent with default headers values
func NewPutRepositoriesDockerGroupByRepositorynameNoContent() *PutRepositoriesDockerGroupByRepositorynameNoContent {
	return &PutRepositoriesDockerGroupByRepositorynameNoContent{}
}

/*
PutRepositoriesDockerGroupByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesDockerGroupByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories docker group by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesDockerGroupByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories docker group by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesDockerGroupByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories docker group by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesDockerGroupByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories docker group by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesDockerGroupByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories docker group by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesDockerGroupByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories docker group by repositoryname no content response
func (o *PutRepositoriesDockerGroupByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesDockerGroupByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/group/{repositoryName}][%d] putRepositoriesDockerGroupByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesDockerGroupByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/group/{repositoryName}][%d] putRepositoriesDockerGroupByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesDockerGroupByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesDockerGroupByRepositorynameBadRequest creates a PutRepositoriesDockerGroupByRepositorynameBadRequest with default headers values
func NewPutRepositoriesDockerGroupByRepositorynameBadRequest() *PutRepositoriesDockerGroupByRepositorynameBadRequest {
	return &PutRepositoriesDockerGroupByRepositorynameBadRequest{}
}

/*
PutRepositoriesDockerGroupByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesDockerGroupByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories docker group by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesDockerGroupByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories docker group by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesDockerGroupByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories docker group by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesDockerGroupByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories docker group by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesDockerGroupByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories docker group by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesDockerGroupByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories docker group by repositoryname bad request response
func (o *PutRepositoriesDockerGroupByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesDockerGroupByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/group/{repositoryName}][%d] putRepositoriesDockerGroupByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesDockerGroupByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/group/{repositoryName}][%d] putRepositoriesDockerGroupByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesDockerGroupByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesDockerGroupByRepositorynameUnauthorized creates a PutRepositoriesDockerGroupByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesDockerGroupByRepositorynameUnauthorized() *PutRepositoriesDockerGroupByRepositorynameUnauthorized {
	return &PutRepositoriesDockerGroupByRepositorynameUnauthorized{}
}

/*
PutRepositoriesDockerGroupByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesDockerGroupByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories docker group by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesDockerGroupByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories docker group by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesDockerGroupByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories docker group by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesDockerGroupByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories docker group by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesDockerGroupByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories docker group by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesDockerGroupByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories docker group by repositoryname unauthorized response
func (o *PutRepositoriesDockerGroupByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesDockerGroupByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/group/{repositoryName}][%d] putRepositoriesDockerGroupByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesDockerGroupByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/group/{repositoryName}][%d] putRepositoriesDockerGroupByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesDockerGroupByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesDockerGroupByRepositorynameForbidden creates a PutRepositoriesDockerGroupByRepositorynameForbidden with default headers values
func NewPutRepositoriesDockerGroupByRepositorynameForbidden() *PutRepositoriesDockerGroupByRepositorynameForbidden {
	return &PutRepositoriesDockerGroupByRepositorynameForbidden{}
}

/*
PutRepositoriesDockerGroupByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesDockerGroupByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories docker group by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesDockerGroupByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories docker group by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesDockerGroupByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories docker group by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesDockerGroupByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories docker group by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesDockerGroupByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories docker group by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesDockerGroupByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories docker group by repositoryname forbidden response
func (o *PutRepositoriesDockerGroupByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesDockerGroupByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/group/{repositoryName}][%d] putRepositoriesDockerGroupByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesDockerGroupByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/group/{repositoryName}][%d] putRepositoriesDockerGroupByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesDockerGroupByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesDockerGroupByRepositorynameNotFound creates a PutRepositoriesDockerGroupByRepositorynameNotFound with default headers values
func NewPutRepositoriesDockerGroupByRepositorynameNotFound() *PutRepositoriesDockerGroupByRepositorynameNotFound {
	return &PutRepositoriesDockerGroupByRepositorynameNotFound{}
}

/*
PutRepositoriesDockerGroupByRepositorynameNotFound describes a response with status code 404, with default header values.

Repository not found
*/
type PutRepositoriesDockerGroupByRepositorynameNotFound struct {
}

// IsSuccess returns true when this put repositories docker group by repositoryname not found response has a 2xx status code
func (o *PutRepositoriesDockerGroupByRepositorynameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories docker group by repositoryname not found response has a 3xx status code
func (o *PutRepositoriesDockerGroupByRepositorynameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories docker group by repositoryname not found response has a 4xx status code
func (o *PutRepositoriesDockerGroupByRepositorynameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories docker group by repositoryname not found response has a 5xx status code
func (o *PutRepositoriesDockerGroupByRepositorynameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories docker group by repositoryname not found response a status code equal to that given
func (o *PutRepositoriesDockerGroupByRepositorynameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put repositories docker group by repositoryname not found response
func (o *PutRepositoriesDockerGroupByRepositorynameNotFound) Code() int {
	return 404
}

func (o *PutRepositoriesDockerGroupByRepositorynameNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/group/{repositoryName}][%d] putRepositoriesDockerGroupByRepositorynameNotFound", 404)
}

func (o *PutRepositoriesDockerGroupByRepositorynameNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/docker/group/{repositoryName}][%d] putRepositoriesDockerGroupByRepositorynameNotFound", 404)
}

func (o *PutRepositoriesDockerGroupByRepositorynameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
