// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesRHostedByRepositorynameReader is a Reader for the PutRepositoriesRHostedByRepositoryname structure.
type PutRepositoriesRHostedByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesRHostedByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesRHostedByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesRHostedByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesRHostedByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesRHostedByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/r/hosted/{repositoryName}] PutRepositoriesRHostedByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesRHostedByRepositorynameNoContent creates a PutRepositoriesRHostedByRepositorynameNoContent with default headers values
func NewPutRepositoriesRHostedByRepositorynameNoContent() *PutRepositoriesRHostedByRepositorynameNoContent {
	return &PutRepositoriesRHostedByRepositorynameNoContent{}
}

/*
PutRepositoriesRHostedByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesRHostedByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories r hosted by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesRHostedByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories r hosted by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesRHostedByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories r hosted by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesRHostedByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories r hosted by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesRHostedByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories r hosted by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesRHostedByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories r hosted by repositoryname no content response
func (o *PutRepositoriesRHostedByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesRHostedByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] putRepositoriesRHostedByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesRHostedByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] putRepositoriesRHostedByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesRHostedByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRHostedByRepositorynameBadRequest creates a PutRepositoriesRHostedByRepositorynameBadRequest with default headers values
func NewPutRepositoriesRHostedByRepositorynameBadRequest() *PutRepositoriesRHostedByRepositorynameBadRequest {
	return &PutRepositoriesRHostedByRepositorynameBadRequest{}
}

/*
PutRepositoriesRHostedByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesRHostedByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories r hosted by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesRHostedByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories r hosted by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesRHostedByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories r hosted by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesRHostedByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories r hosted by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesRHostedByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories r hosted by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesRHostedByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories r hosted by repositoryname bad request response
func (o *PutRepositoriesRHostedByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesRHostedByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] putRepositoriesRHostedByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesRHostedByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] putRepositoriesRHostedByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesRHostedByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRHostedByRepositorynameUnauthorized creates a PutRepositoriesRHostedByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesRHostedByRepositorynameUnauthorized() *PutRepositoriesRHostedByRepositorynameUnauthorized {
	return &PutRepositoriesRHostedByRepositorynameUnauthorized{}
}

/*
PutRepositoriesRHostedByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesRHostedByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories r hosted by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesRHostedByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories r hosted by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesRHostedByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories r hosted by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesRHostedByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories r hosted by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesRHostedByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories r hosted by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesRHostedByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories r hosted by repositoryname unauthorized response
func (o *PutRepositoriesRHostedByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesRHostedByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] putRepositoriesRHostedByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesRHostedByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] putRepositoriesRHostedByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesRHostedByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRHostedByRepositorynameForbidden creates a PutRepositoriesRHostedByRepositorynameForbidden with default headers values
func NewPutRepositoriesRHostedByRepositorynameForbidden() *PutRepositoriesRHostedByRepositorynameForbidden {
	return &PutRepositoriesRHostedByRepositorynameForbidden{}
}

/*
PutRepositoriesRHostedByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesRHostedByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories r hosted by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesRHostedByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories r hosted by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesRHostedByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories r hosted by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesRHostedByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories r hosted by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesRHostedByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories r hosted by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesRHostedByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories r hosted by repositoryname forbidden response
func (o *PutRepositoriesRHostedByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesRHostedByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] putRepositoriesRHostedByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesRHostedByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/hosted/{repositoryName}][%d] putRepositoriesRHostedByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesRHostedByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
