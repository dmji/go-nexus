// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesNpmGroupByRepositorynameReader is a Reader for the PutRepositoriesNpmGroupByRepositoryname structure.
type PutRepositoriesNpmGroupByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesNpmGroupByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesNpmGroupByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesNpmGroupByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesNpmGroupByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesNpmGroupByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/npm/group/{repositoryName}] PutRepositoriesNpmGroupByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesNpmGroupByRepositorynameNoContent creates a PutRepositoriesNpmGroupByRepositorynameNoContent with default headers values
func NewPutRepositoriesNpmGroupByRepositorynameNoContent() *PutRepositoriesNpmGroupByRepositorynameNoContent {
	return &PutRepositoriesNpmGroupByRepositorynameNoContent{}
}

/*
PutRepositoriesNpmGroupByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesNpmGroupByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories npm group by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesNpmGroupByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories npm group by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesNpmGroupByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories npm group by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesNpmGroupByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories npm group by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesNpmGroupByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories npm group by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesNpmGroupByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories npm group by repositoryname no content response
func (o *PutRepositoriesNpmGroupByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesNpmGroupByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/group/{repositoryName}][%d] putRepositoriesNpmGroupByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesNpmGroupByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/group/{repositoryName}][%d] putRepositoriesNpmGroupByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesNpmGroupByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesNpmGroupByRepositorynameBadRequest creates a PutRepositoriesNpmGroupByRepositorynameBadRequest with default headers values
func NewPutRepositoriesNpmGroupByRepositorynameBadRequest() *PutRepositoriesNpmGroupByRepositorynameBadRequest {
	return &PutRepositoriesNpmGroupByRepositorynameBadRequest{}
}

/*
PutRepositoriesNpmGroupByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesNpmGroupByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories npm group by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesNpmGroupByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories npm group by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesNpmGroupByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories npm group by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesNpmGroupByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories npm group by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesNpmGroupByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories npm group by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesNpmGroupByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories npm group by repositoryname bad request response
func (o *PutRepositoriesNpmGroupByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesNpmGroupByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/group/{repositoryName}][%d] putRepositoriesNpmGroupByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesNpmGroupByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/group/{repositoryName}][%d] putRepositoriesNpmGroupByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesNpmGroupByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesNpmGroupByRepositorynameUnauthorized creates a PutRepositoriesNpmGroupByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesNpmGroupByRepositorynameUnauthorized() *PutRepositoriesNpmGroupByRepositorynameUnauthorized {
	return &PutRepositoriesNpmGroupByRepositorynameUnauthorized{}
}

/*
PutRepositoriesNpmGroupByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesNpmGroupByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories npm group by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesNpmGroupByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories npm group by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesNpmGroupByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories npm group by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesNpmGroupByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories npm group by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesNpmGroupByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories npm group by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesNpmGroupByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories npm group by repositoryname unauthorized response
func (o *PutRepositoriesNpmGroupByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesNpmGroupByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/group/{repositoryName}][%d] putRepositoriesNpmGroupByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesNpmGroupByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/group/{repositoryName}][%d] putRepositoriesNpmGroupByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesNpmGroupByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesNpmGroupByRepositorynameForbidden creates a PutRepositoriesNpmGroupByRepositorynameForbidden with default headers values
func NewPutRepositoriesNpmGroupByRepositorynameForbidden() *PutRepositoriesNpmGroupByRepositorynameForbidden {
	return &PutRepositoriesNpmGroupByRepositorynameForbidden{}
}

/*
PutRepositoriesNpmGroupByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesNpmGroupByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories npm group by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesNpmGroupByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories npm group by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesNpmGroupByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories npm group by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesNpmGroupByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories npm group by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesNpmGroupByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories npm group by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesNpmGroupByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories npm group by repositoryname forbidden response
func (o *PutRepositoriesNpmGroupByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesNpmGroupByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/group/{repositoryName}][%d] putRepositoriesNpmGroupByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesNpmGroupByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/group/{repositoryName}][%d] putRepositoriesNpmGroupByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesNpmGroupByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
