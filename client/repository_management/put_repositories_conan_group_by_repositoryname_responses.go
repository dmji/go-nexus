// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesConanGroupByRepositorynameReader is a Reader for the PutRepositoriesConanGroupByRepositoryname structure.
type PutRepositoriesConanGroupByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesConanGroupByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesConanGroupByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesConanGroupByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesConanGroupByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesConanGroupByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/conan/group/{repositoryName}] PutRepositoriesConanGroupByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesConanGroupByRepositorynameNoContent creates a PutRepositoriesConanGroupByRepositorynameNoContent with default headers values
func NewPutRepositoriesConanGroupByRepositorynameNoContent() *PutRepositoriesConanGroupByRepositorynameNoContent {
	return &PutRepositoriesConanGroupByRepositorynameNoContent{}
}

/*
PutRepositoriesConanGroupByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesConanGroupByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories conan group by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesConanGroupByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories conan group by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesConanGroupByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories conan group by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesConanGroupByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories conan group by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesConanGroupByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories conan group by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesConanGroupByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories conan group by repositoryname no content response
func (o *PutRepositoriesConanGroupByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesConanGroupByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] putRepositoriesConanGroupByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesConanGroupByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] putRepositoriesConanGroupByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesConanGroupByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesConanGroupByRepositorynameBadRequest creates a PutRepositoriesConanGroupByRepositorynameBadRequest with default headers values
func NewPutRepositoriesConanGroupByRepositorynameBadRequest() *PutRepositoriesConanGroupByRepositorynameBadRequest {
	return &PutRepositoriesConanGroupByRepositorynameBadRequest{}
}

/*
PutRepositoriesConanGroupByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesConanGroupByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories conan group by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesConanGroupByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories conan group by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesConanGroupByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories conan group by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesConanGroupByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories conan group by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesConanGroupByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories conan group by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesConanGroupByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories conan group by repositoryname bad request response
func (o *PutRepositoriesConanGroupByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesConanGroupByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] putRepositoriesConanGroupByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesConanGroupByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] putRepositoriesConanGroupByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesConanGroupByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesConanGroupByRepositorynameUnauthorized creates a PutRepositoriesConanGroupByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesConanGroupByRepositorynameUnauthorized() *PutRepositoriesConanGroupByRepositorynameUnauthorized {
	return &PutRepositoriesConanGroupByRepositorynameUnauthorized{}
}

/*
PutRepositoriesConanGroupByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesConanGroupByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories conan group by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesConanGroupByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories conan group by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesConanGroupByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories conan group by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesConanGroupByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories conan group by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesConanGroupByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories conan group by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesConanGroupByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories conan group by repositoryname unauthorized response
func (o *PutRepositoriesConanGroupByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesConanGroupByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] putRepositoriesConanGroupByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesConanGroupByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] putRepositoriesConanGroupByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesConanGroupByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesConanGroupByRepositorynameForbidden creates a PutRepositoriesConanGroupByRepositorynameForbidden with default headers values
func NewPutRepositoriesConanGroupByRepositorynameForbidden() *PutRepositoriesConanGroupByRepositorynameForbidden {
	return &PutRepositoriesConanGroupByRepositorynameForbidden{}
}

/*
PutRepositoriesConanGroupByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesConanGroupByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories conan group by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesConanGroupByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories conan group by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesConanGroupByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories conan group by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesConanGroupByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories conan group by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesConanGroupByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories conan group by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesConanGroupByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories conan group by repositoryname forbidden response
func (o *PutRepositoriesConanGroupByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesConanGroupByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] putRepositoriesConanGroupByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesConanGroupByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/conan/group/{repositoryName}][%d] putRepositoriesConanGroupByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesConanGroupByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
