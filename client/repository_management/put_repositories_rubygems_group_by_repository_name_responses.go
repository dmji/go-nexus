// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesRubygemsGroupByRepositoryNameReader is a Reader for the PutRepositoriesRubygemsGroupByRepositoryName structure.
type PutRepositoriesRubygemsGroupByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesRubygemsGroupByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesRubygemsGroupByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesRubygemsGroupByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesRubygemsGroupByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesRubygemsGroupByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/rubygems/group/{repositoryName}] PutRepositoriesRubygemsGroupByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesRubygemsGroupByRepositoryNameNoContent creates a PutRepositoriesRubygemsGroupByRepositoryNameNoContent with default headers values
func NewPutRepositoriesRubygemsGroupByRepositoryNameNoContent() *PutRepositoriesRubygemsGroupByRepositoryNameNoContent {
	return &PutRepositoriesRubygemsGroupByRepositoryNameNoContent{}
}

/*
PutRepositoriesRubygemsGroupByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesRubygemsGroupByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories rubygems group by repository name no content response has a 2xx status code
func (o *PutRepositoriesRubygemsGroupByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories rubygems group by repository name no content response has a 3xx status code
func (o *PutRepositoriesRubygemsGroupByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories rubygems group by repository name no content response has a 4xx status code
func (o *PutRepositoriesRubygemsGroupByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories rubygems group by repository name no content response has a 5xx status code
func (o *PutRepositoriesRubygemsGroupByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories rubygems group by repository name no content response a status code equal to that given
func (o *PutRepositoriesRubygemsGroupByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories rubygems group by repository name no content response
func (o *PutRepositoriesRubygemsGroupByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesRubygemsGroupByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/rubygems/group/{repositoryName}][%d] putRepositoriesRubygemsGroupByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesRubygemsGroupByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/rubygems/group/{repositoryName}][%d] putRepositoriesRubygemsGroupByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesRubygemsGroupByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRubygemsGroupByRepositoryNameBadRequest creates a PutRepositoriesRubygemsGroupByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesRubygemsGroupByRepositoryNameBadRequest() *PutRepositoriesRubygemsGroupByRepositoryNameBadRequest {
	return &PutRepositoriesRubygemsGroupByRepositoryNameBadRequest{}
}

/*
PutRepositoriesRubygemsGroupByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesRubygemsGroupByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories rubygems group by repository name bad request response has a 2xx status code
func (o *PutRepositoriesRubygemsGroupByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories rubygems group by repository name bad request response has a 3xx status code
func (o *PutRepositoriesRubygemsGroupByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories rubygems group by repository name bad request response has a 4xx status code
func (o *PutRepositoriesRubygemsGroupByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories rubygems group by repository name bad request response has a 5xx status code
func (o *PutRepositoriesRubygemsGroupByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories rubygems group by repository name bad request response a status code equal to that given
func (o *PutRepositoriesRubygemsGroupByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories rubygems group by repository name bad request response
func (o *PutRepositoriesRubygemsGroupByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesRubygemsGroupByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/rubygems/group/{repositoryName}][%d] putRepositoriesRubygemsGroupByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesRubygemsGroupByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/rubygems/group/{repositoryName}][%d] putRepositoriesRubygemsGroupByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesRubygemsGroupByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRubygemsGroupByRepositoryNameUnauthorized creates a PutRepositoriesRubygemsGroupByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesRubygemsGroupByRepositoryNameUnauthorized() *PutRepositoriesRubygemsGroupByRepositoryNameUnauthorized {
	return &PutRepositoriesRubygemsGroupByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesRubygemsGroupByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesRubygemsGroupByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories rubygems group by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesRubygemsGroupByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories rubygems group by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesRubygemsGroupByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories rubygems group by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesRubygemsGroupByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories rubygems group by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesRubygemsGroupByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories rubygems group by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesRubygemsGroupByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories rubygems group by repository name unauthorized response
func (o *PutRepositoriesRubygemsGroupByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesRubygemsGroupByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/rubygems/group/{repositoryName}][%d] putRepositoriesRubygemsGroupByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesRubygemsGroupByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/rubygems/group/{repositoryName}][%d] putRepositoriesRubygemsGroupByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesRubygemsGroupByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRubygemsGroupByRepositoryNameForbidden creates a PutRepositoriesRubygemsGroupByRepositoryNameForbidden with default headers values
func NewPutRepositoriesRubygemsGroupByRepositoryNameForbidden() *PutRepositoriesRubygemsGroupByRepositoryNameForbidden {
	return &PutRepositoriesRubygemsGroupByRepositoryNameForbidden{}
}

/*
PutRepositoriesRubygemsGroupByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesRubygemsGroupByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories rubygems group by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesRubygemsGroupByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories rubygems group by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesRubygemsGroupByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories rubygems group by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesRubygemsGroupByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories rubygems group by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesRubygemsGroupByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories rubygems group by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesRubygemsGroupByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories rubygems group by repository name forbidden response
func (o *PutRepositoriesRubygemsGroupByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesRubygemsGroupByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/rubygems/group/{repositoryName}][%d] putRepositoriesRubygemsGroupByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesRubygemsGroupByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/rubygems/group/{repositoryName}][%d] putRepositoriesRubygemsGroupByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesRubygemsGroupByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
