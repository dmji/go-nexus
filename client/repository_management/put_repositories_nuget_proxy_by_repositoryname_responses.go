// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesNugetProxyByRepositorynameReader is a Reader for the PutRepositoriesNugetProxyByRepositoryname structure.
type PutRepositoriesNugetProxyByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesNugetProxyByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesNugetProxyByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesNugetProxyByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesNugetProxyByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesNugetProxyByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/nuget/proxy/{repositoryName}] PutRepositoriesNugetProxyByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesNugetProxyByRepositorynameNoContent creates a PutRepositoriesNugetProxyByRepositorynameNoContent with default headers values
func NewPutRepositoriesNugetProxyByRepositorynameNoContent() *PutRepositoriesNugetProxyByRepositorynameNoContent {
	return &PutRepositoriesNugetProxyByRepositorynameNoContent{}
}

/*
PutRepositoriesNugetProxyByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesNugetProxyByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories nuget proxy by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesNugetProxyByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories nuget proxy by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesNugetProxyByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories nuget proxy by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesNugetProxyByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories nuget proxy by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesNugetProxyByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories nuget proxy by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesNugetProxyByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories nuget proxy by repositoryname no content response
func (o *PutRepositoriesNugetProxyByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesNugetProxyByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/nuget/proxy/{repositoryName}][%d] putRepositoriesNugetProxyByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesNugetProxyByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/nuget/proxy/{repositoryName}][%d] putRepositoriesNugetProxyByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesNugetProxyByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesNugetProxyByRepositorynameBadRequest creates a PutRepositoriesNugetProxyByRepositorynameBadRequest with default headers values
func NewPutRepositoriesNugetProxyByRepositorynameBadRequest() *PutRepositoriesNugetProxyByRepositorynameBadRequest {
	return &PutRepositoriesNugetProxyByRepositorynameBadRequest{}
}

/*
PutRepositoriesNugetProxyByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesNugetProxyByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories nuget proxy by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesNugetProxyByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories nuget proxy by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesNugetProxyByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories nuget proxy by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesNugetProxyByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories nuget proxy by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesNugetProxyByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories nuget proxy by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesNugetProxyByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories nuget proxy by repositoryname bad request response
func (o *PutRepositoriesNugetProxyByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesNugetProxyByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/nuget/proxy/{repositoryName}][%d] putRepositoriesNugetProxyByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesNugetProxyByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/nuget/proxy/{repositoryName}][%d] putRepositoriesNugetProxyByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesNugetProxyByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesNugetProxyByRepositorynameUnauthorized creates a PutRepositoriesNugetProxyByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesNugetProxyByRepositorynameUnauthorized() *PutRepositoriesNugetProxyByRepositorynameUnauthorized {
	return &PutRepositoriesNugetProxyByRepositorynameUnauthorized{}
}

/*
PutRepositoriesNugetProxyByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesNugetProxyByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories nuget proxy by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesNugetProxyByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories nuget proxy by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesNugetProxyByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories nuget proxy by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesNugetProxyByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories nuget proxy by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesNugetProxyByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories nuget proxy by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesNugetProxyByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories nuget proxy by repositoryname unauthorized response
func (o *PutRepositoriesNugetProxyByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesNugetProxyByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/nuget/proxy/{repositoryName}][%d] putRepositoriesNugetProxyByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesNugetProxyByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/nuget/proxy/{repositoryName}][%d] putRepositoriesNugetProxyByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesNugetProxyByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesNugetProxyByRepositorynameForbidden creates a PutRepositoriesNugetProxyByRepositorynameForbidden with default headers values
func NewPutRepositoriesNugetProxyByRepositorynameForbidden() *PutRepositoriesNugetProxyByRepositorynameForbidden {
	return &PutRepositoriesNugetProxyByRepositorynameForbidden{}
}

/*
PutRepositoriesNugetProxyByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesNugetProxyByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories nuget proxy by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesNugetProxyByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories nuget proxy by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesNugetProxyByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories nuget proxy by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesNugetProxyByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories nuget proxy by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesNugetProxyByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories nuget proxy by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesNugetProxyByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories nuget proxy by repositoryname forbidden response
func (o *PutRepositoriesNugetProxyByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesNugetProxyByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/nuget/proxy/{repositoryName}][%d] putRepositoriesNugetProxyByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesNugetProxyByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/nuget/proxy/{repositoryName}][%d] putRepositoriesNugetProxyByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesNugetProxyByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
