// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateRepository43Reader is a Reader for the UpdateRepository43 structure.
type UpdateRepository43Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRepository43Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateRepository43NoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRepository43BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRepository43Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRepository43Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/yum/hosted/{repositoryName}] updateRepository_43", response, response.Code())
	}
}

// NewUpdateRepository43NoContent creates a UpdateRepository43NoContent with default headers values
func NewUpdateRepository43NoContent() *UpdateRepository43NoContent {
	return &UpdateRepository43NoContent{}
}

/*
UpdateRepository43NoContent describes a response with status code 204, with default header values.

Repository updated
*/
type UpdateRepository43NoContent struct {
}

// IsSuccess returns true when this update repository43 no content response has a 2xx status code
func (o *UpdateRepository43NoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update repository43 no content response has a 3xx status code
func (o *UpdateRepository43NoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository43 no content response has a 4xx status code
func (o *UpdateRepository43NoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update repository43 no content response has a 5xx status code
func (o *UpdateRepository43NoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository43 no content response a status code equal to that given
func (o *UpdateRepository43NoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update repository43 no content response
func (o *UpdateRepository43NoContent) Code() int {
	return 204
}

func (o *UpdateRepository43NoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/hosted/{repositoryName}][%d] updateRepository43NoContent", 204)
}

func (o *UpdateRepository43NoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/hosted/{repositoryName}][%d] updateRepository43NoContent", 204)
}

func (o *UpdateRepository43NoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository43BadRequest creates a UpdateRepository43BadRequest with default headers values
func NewUpdateRepository43BadRequest() *UpdateRepository43BadRequest {
	return &UpdateRepository43BadRequest{}
}

/*
UpdateRepository43BadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateRepository43BadRequest struct {
}

// IsSuccess returns true when this update repository43 bad request response has a 2xx status code
func (o *UpdateRepository43BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository43 bad request response has a 3xx status code
func (o *UpdateRepository43BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository43 bad request response has a 4xx status code
func (o *UpdateRepository43BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository43 bad request response has a 5xx status code
func (o *UpdateRepository43BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository43 bad request response a status code equal to that given
func (o *UpdateRepository43BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update repository43 bad request response
func (o *UpdateRepository43BadRequest) Code() int {
	return 400
}

func (o *UpdateRepository43BadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/hosted/{repositoryName}][%d] updateRepository43BadRequest", 400)
}

func (o *UpdateRepository43BadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/hosted/{repositoryName}][%d] updateRepository43BadRequest", 400)
}

func (o *UpdateRepository43BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository43Unauthorized creates a UpdateRepository43Unauthorized with default headers values
func NewUpdateRepository43Unauthorized() *UpdateRepository43Unauthorized {
	return &UpdateRepository43Unauthorized{}
}

/*
UpdateRepository43Unauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type UpdateRepository43Unauthorized struct {
}

// IsSuccess returns true when this update repository43 unauthorized response has a 2xx status code
func (o *UpdateRepository43Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository43 unauthorized response has a 3xx status code
func (o *UpdateRepository43Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository43 unauthorized response has a 4xx status code
func (o *UpdateRepository43Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository43 unauthorized response has a 5xx status code
func (o *UpdateRepository43Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository43 unauthorized response a status code equal to that given
func (o *UpdateRepository43Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update repository43 unauthorized response
func (o *UpdateRepository43Unauthorized) Code() int {
	return 401
}

func (o *UpdateRepository43Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/hosted/{repositoryName}][%d] updateRepository43Unauthorized", 401)
}

func (o *UpdateRepository43Unauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/hosted/{repositoryName}][%d] updateRepository43Unauthorized", 401)
}

func (o *UpdateRepository43Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository43Forbidden creates a UpdateRepository43Forbidden with default headers values
func NewUpdateRepository43Forbidden() *UpdateRepository43Forbidden {
	return &UpdateRepository43Forbidden{}
}

/*
UpdateRepository43Forbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type UpdateRepository43Forbidden struct {
}

// IsSuccess returns true when this update repository43 forbidden response has a 2xx status code
func (o *UpdateRepository43Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository43 forbidden response has a 3xx status code
func (o *UpdateRepository43Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository43 forbidden response has a 4xx status code
func (o *UpdateRepository43Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository43 forbidden response has a 5xx status code
func (o *UpdateRepository43Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository43 forbidden response a status code equal to that given
func (o *UpdateRepository43Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update repository43 forbidden response
func (o *UpdateRepository43Forbidden) Code() int {
	return 403
}

func (o *UpdateRepository43Forbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/hosted/{repositoryName}][%d] updateRepository43Forbidden", 403)
}

func (o *UpdateRepository43Forbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/yum/hosted/{repositoryName}][%d] updateRepository43Forbidden", 403)
}

func (o *UpdateRepository43Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
