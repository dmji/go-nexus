// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesNpmGroupByRepositoryNameReader is a Reader for the PutRepositoriesNpmGroupByRepositoryName structure.
type PutRepositoriesNpmGroupByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesNpmGroupByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesNpmGroupByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesNpmGroupByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesNpmGroupByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesNpmGroupByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/npm/group/{repositoryName}] PutRepositoriesNpmGroupByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesNpmGroupByRepositoryNameNoContent creates a PutRepositoriesNpmGroupByRepositoryNameNoContent with default headers values
func NewPutRepositoriesNpmGroupByRepositoryNameNoContent() *PutRepositoriesNpmGroupByRepositoryNameNoContent {
	return &PutRepositoriesNpmGroupByRepositoryNameNoContent{}
}

/*
PutRepositoriesNpmGroupByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesNpmGroupByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories npm group by repository name no content response has a 2xx status code
func (o *PutRepositoriesNpmGroupByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories npm group by repository name no content response has a 3xx status code
func (o *PutRepositoriesNpmGroupByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories npm group by repository name no content response has a 4xx status code
func (o *PutRepositoriesNpmGroupByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories npm group by repository name no content response has a 5xx status code
func (o *PutRepositoriesNpmGroupByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories npm group by repository name no content response a status code equal to that given
func (o *PutRepositoriesNpmGroupByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories npm group by repository name no content response
func (o *PutRepositoriesNpmGroupByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesNpmGroupByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/group/{repositoryName}][%d] putRepositoriesNpmGroupByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesNpmGroupByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/group/{repositoryName}][%d] putRepositoriesNpmGroupByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesNpmGroupByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesNpmGroupByRepositoryNameBadRequest creates a PutRepositoriesNpmGroupByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesNpmGroupByRepositoryNameBadRequest() *PutRepositoriesNpmGroupByRepositoryNameBadRequest {
	return &PutRepositoriesNpmGroupByRepositoryNameBadRequest{}
}

/*
PutRepositoriesNpmGroupByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesNpmGroupByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories npm group by repository name bad request response has a 2xx status code
func (o *PutRepositoriesNpmGroupByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories npm group by repository name bad request response has a 3xx status code
func (o *PutRepositoriesNpmGroupByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories npm group by repository name bad request response has a 4xx status code
func (o *PutRepositoriesNpmGroupByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories npm group by repository name bad request response has a 5xx status code
func (o *PutRepositoriesNpmGroupByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories npm group by repository name bad request response a status code equal to that given
func (o *PutRepositoriesNpmGroupByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories npm group by repository name bad request response
func (o *PutRepositoriesNpmGroupByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesNpmGroupByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/group/{repositoryName}][%d] putRepositoriesNpmGroupByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesNpmGroupByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/group/{repositoryName}][%d] putRepositoriesNpmGroupByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesNpmGroupByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesNpmGroupByRepositoryNameUnauthorized creates a PutRepositoriesNpmGroupByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesNpmGroupByRepositoryNameUnauthorized() *PutRepositoriesNpmGroupByRepositoryNameUnauthorized {
	return &PutRepositoriesNpmGroupByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesNpmGroupByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesNpmGroupByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories npm group by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesNpmGroupByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories npm group by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesNpmGroupByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories npm group by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesNpmGroupByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories npm group by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesNpmGroupByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories npm group by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesNpmGroupByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories npm group by repository name unauthorized response
func (o *PutRepositoriesNpmGroupByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesNpmGroupByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/group/{repositoryName}][%d] putRepositoriesNpmGroupByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesNpmGroupByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/group/{repositoryName}][%d] putRepositoriesNpmGroupByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesNpmGroupByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesNpmGroupByRepositoryNameForbidden creates a PutRepositoriesNpmGroupByRepositoryNameForbidden with default headers values
func NewPutRepositoriesNpmGroupByRepositoryNameForbidden() *PutRepositoriesNpmGroupByRepositoryNameForbidden {
	return &PutRepositoriesNpmGroupByRepositoryNameForbidden{}
}

/*
PutRepositoriesNpmGroupByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesNpmGroupByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories npm group by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesNpmGroupByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories npm group by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesNpmGroupByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories npm group by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesNpmGroupByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories npm group by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesNpmGroupByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories npm group by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesNpmGroupByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories npm group by repository name forbidden response
func (o *PutRepositoriesNpmGroupByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesNpmGroupByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/group/{repositoryName}][%d] putRepositoriesNpmGroupByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesNpmGroupByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/npm/group/{repositoryName}][%d] putRepositoriesNpmGroupByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesNpmGroupByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
