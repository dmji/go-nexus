// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesAptProxyByRepositorynameReader is a Reader for the PutRepositoriesAptProxyByRepositoryname structure.
type PutRepositoriesAptProxyByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesAptProxyByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesAptProxyByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesAptProxyByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesAptProxyByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesAptProxyByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRepositoriesAptProxyByRepositorynameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/apt/proxy/{repositoryName}] PutRepositoriesAptProxyByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesAptProxyByRepositorynameNoContent creates a PutRepositoriesAptProxyByRepositorynameNoContent with default headers values
func NewPutRepositoriesAptProxyByRepositorynameNoContent() *PutRepositoriesAptProxyByRepositorynameNoContent {
	return &PutRepositoriesAptProxyByRepositorynameNoContent{}
}

/*
PutRepositoriesAptProxyByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesAptProxyByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories apt proxy by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesAptProxyByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories apt proxy by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesAptProxyByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories apt proxy by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesAptProxyByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories apt proxy by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesAptProxyByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories apt proxy by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesAptProxyByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories apt proxy by repositoryname no content response
func (o *PutRepositoriesAptProxyByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesAptProxyByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] putRepositoriesAptProxyByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesAptProxyByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] putRepositoriesAptProxyByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesAptProxyByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesAptProxyByRepositorynameBadRequest creates a PutRepositoriesAptProxyByRepositorynameBadRequest with default headers values
func NewPutRepositoriesAptProxyByRepositorynameBadRequest() *PutRepositoriesAptProxyByRepositorynameBadRequest {
	return &PutRepositoriesAptProxyByRepositorynameBadRequest{}
}

/*
PutRepositoriesAptProxyByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesAptProxyByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories apt proxy by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesAptProxyByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories apt proxy by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesAptProxyByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories apt proxy by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesAptProxyByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories apt proxy by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesAptProxyByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories apt proxy by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesAptProxyByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories apt proxy by repositoryname bad request response
func (o *PutRepositoriesAptProxyByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesAptProxyByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] putRepositoriesAptProxyByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesAptProxyByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] putRepositoriesAptProxyByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesAptProxyByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesAptProxyByRepositorynameUnauthorized creates a PutRepositoriesAptProxyByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesAptProxyByRepositorynameUnauthorized() *PutRepositoriesAptProxyByRepositorynameUnauthorized {
	return &PutRepositoriesAptProxyByRepositorynameUnauthorized{}
}

/*
PutRepositoriesAptProxyByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesAptProxyByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories apt proxy by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesAptProxyByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories apt proxy by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesAptProxyByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories apt proxy by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesAptProxyByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories apt proxy by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesAptProxyByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories apt proxy by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesAptProxyByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories apt proxy by repositoryname unauthorized response
func (o *PutRepositoriesAptProxyByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesAptProxyByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] putRepositoriesAptProxyByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesAptProxyByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] putRepositoriesAptProxyByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesAptProxyByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesAptProxyByRepositorynameForbidden creates a PutRepositoriesAptProxyByRepositorynameForbidden with default headers values
func NewPutRepositoriesAptProxyByRepositorynameForbidden() *PutRepositoriesAptProxyByRepositorynameForbidden {
	return &PutRepositoriesAptProxyByRepositorynameForbidden{}
}

/*
PutRepositoriesAptProxyByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesAptProxyByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories apt proxy by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesAptProxyByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories apt proxy by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesAptProxyByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories apt proxy by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesAptProxyByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories apt proxy by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesAptProxyByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories apt proxy by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesAptProxyByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories apt proxy by repositoryname forbidden response
func (o *PutRepositoriesAptProxyByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesAptProxyByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] putRepositoriesAptProxyByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesAptProxyByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] putRepositoriesAptProxyByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesAptProxyByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesAptProxyByRepositorynameNotFound creates a PutRepositoriesAptProxyByRepositorynameNotFound with default headers values
func NewPutRepositoriesAptProxyByRepositorynameNotFound() *PutRepositoriesAptProxyByRepositorynameNotFound {
	return &PutRepositoriesAptProxyByRepositorynameNotFound{}
}

/*
PutRepositoriesAptProxyByRepositorynameNotFound describes a response with status code 404, with default header values.

Repository not found
*/
type PutRepositoriesAptProxyByRepositorynameNotFound struct {
}

// IsSuccess returns true when this put repositories apt proxy by repositoryname not found response has a 2xx status code
func (o *PutRepositoriesAptProxyByRepositorynameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories apt proxy by repositoryname not found response has a 3xx status code
func (o *PutRepositoriesAptProxyByRepositorynameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories apt proxy by repositoryname not found response has a 4xx status code
func (o *PutRepositoriesAptProxyByRepositorynameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories apt proxy by repositoryname not found response has a 5xx status code
func (o *PutRepositoriesAptProxyByRepositorynameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories apt proxy by repositoryname not found response a status code equal to that given
func (o *PutRepositoriesAptProxyByRepositorynameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put repositories apt proxy by repositoryname not found response
func (o *PutRepositoriesAptProxyByRepositorynameNotFound) Code() int {
	return 404
}

func (o *PutRepositoriesAptProxyByRepositorynameNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] putRepositoriesAptProxyByRepositorynameNotFound", 404)
}

func (o *PutRepositoriesAptProxyByRepositorynameNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/apt/proxy/{repositoryName}][%d] putRepositoriesAptProxyByRepositorynameNotFound", 404)
}

func (o *PutRepositoriesAptProxyByRepositorynameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
