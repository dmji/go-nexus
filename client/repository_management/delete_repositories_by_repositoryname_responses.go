// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteRepositoriesByRepositorynameReader is a Reader for the DeleteRepositoriesByRepositoryname structure.
type DeleteRepositoriesByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRepositoriesByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteRepositoriesByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteRepositoriesByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteRepositoriesByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRepositoriesByRepositorynameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/repositories/{repositoryName}] DeleteRepositoriesByRepositoryname", response, response.Code())
	}
}

// NewDeleteRepositoriesByRepositorynameNoContent creates a DeleteRepositoriesByRepositorynameNoContent with default headers values
func NewDeleteRepositoriesByRepositorynameNoContent() *DeleteRepositoriesByRepositorynameNoContent {
	return &DeleteRepositoriesByRepositorynameNoContent{}
}

/*
DeleteRepositoriesByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository deleted
*/
type DeleteRepositoriesByRepositorynameNoContent struct {
}

// IsSuccess returns true when this delete repositories by repositoryname no content response has a 2xx status code
func (o *DeleteRepositoriesByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete repositories by repositoryname no content response has a 3xx status code
func (o *DeleteRepositoriesByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete repositories by repositoryname no content response has a 4xx status code
func (o *DeleteRepositoriesByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete repositories by repositoryname no content response has a 5xx status code
func (o *DeleteRepositoriesByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete repositories by repositoryname no content response a status code equal to that given
func (o *DeleteRepositoriesByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete repositories by repositoryname no content response
func (o *DeleteRepositoriesByRepositorynameNoContent) Code() int {
	return 204
}

func (o *DeleteRepositoriesByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}][%d] deleteRepositoriesByRepositorynameNoContent", 204)
}

func (o *DeleteRepositoriesByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}][%d] deleteRepositoriesByRepositorynameNoContent", 204)
}

func (o *DeleteRepositoriesByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRepositoriesByRepositorynameUnauthorized creates a DeleteRepositoriesByRepositorynameUnauthorized with default headers values
func NewDeleteRepositoriesByRepositorynameUnauthorized() *DeleteRepositoriesByRepositorynameUnauthorized {
	return &DeleteRepositoriesByRepositorynameUnauthorized{}
}

/*
DeleteRepositoriesByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type DeleteRepositoriesByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this delete repositories by repositoryname unauthorized response has a 2xx status code
func (o *DeleteRepositoriesByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete repositories by repositoryname unauthorized response has a 3xx status code
func (o *DeleteRepositoriesByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete repositories by repositoryname unauthorized response has a 4xx status code
func (o *DeleteRepositoriesByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete repositories by repositoryname unauthorized response has a 5xx status code
func (o *DeleteRepositoriesByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete repositories by repositoryname unauthorized response a status code equal to that given
func (o *DeleteRepositoriesByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete repositories by repositoryname unauthorized response
func (o *DeleteRepositoriesByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *DeleteRepositoriesByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}][%d] deleteRepositoriesByRepositorynameUnauthorized", 401)
}

func (o *DeleteRepositoriesByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}][%d] deleteRepositoriesByRepositorynameUnauthorized", 401)
}

func (o *DeleteRepositoriesByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRepositoriesByRepositorynameForbidden creates a DeleteRepositoriesByRepositorynameForbidden with default headers values
func NewDeleteRepositoriesByRepositorynameForbidden() *DeleteRepositoriesByRepositorynameForbidden {
	return &DeleteRepositoriesByRepositorynameForbidden{}
}

/*
DeleteRepositoriesByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type DeleteRepositoriesByRepositorynameForbidden struct {
}

// IsSuccess returns true when this delete repositories by repositoryname forbidden response has a 2xx status code
func (o *DeleteRepositoriesByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete repositories by repositoryname forbidden response has a 3xx status code
func (o *DeleteRepositoriesByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete repositories by repositoryname forbidden response has a 4xx status code
func (o *DeleteRepositoriesByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete repositories by repositoryname forbidden response has a 5xx status code
func (o *DeleteRepositoriesByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete repositories by repositoryname forbidden response a status code equal to that given
func (o *DeleteRepositoriesByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete repositories by repositoryname forbidden response
func (o *DeleteRepositoriesByRepositorynameForbidden) Code() int {
	return 403
}

func (o *DeleteRepositoriesByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}][%d] deleteRepositoriesByRepositorynameForbidden", 403)
}

func (o *DeleteRepositoriesByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}][%d] deleteRepositoriesByRepositorynameForbidden", 403)
}

func (o *DeleteRepositoriesByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRepositoriesByRepositorynameNotFound creates a DeleteRepositoriesByRepositorynameNotFound with default headers values
func NewDeleteRepositoriesByRepositorynameNotFound() *DeleteRepositoriesByRepositorynameNotFound {
	return &DeleteRepositoriesByRepositorynameNotFound{}
}

/*
DeleteRepositoriesByRepositorynameNotFound describes a response with status code 404, with default header values.

Repository not found
*/
type DeleteRepositoriesByRepositorynameNotFound struct {
}

// IsSuccess returns true when this delete repositories by repositoryname not found response has a 2xx status code
func (o *DeleteRepositoriesByRepositorynameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete repositories by repositoryname not found response has a 3xx status code
func (o *DeleteRepositoriesByRepositorynameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete repositories by repositoryname not found response has a 4xx status code
func (o *DeleteRepositoriesByRepositorynameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete repositories by repositoryname not found response has a 5xx status code
func (o *DeleteRepositoriesByRepositorynameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete repositories by repositoryname not found response a status code equal to that given
func (o *DeleteRepositoriesByRepositorynameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete repositories by repositoryname not found response
func (o *DeleteRepositoriesByRepositorynameNotFound) Code() int {
	return 404
}

func (o *DeleteRepositoriesByRepositorynameNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}][%d] deleteRepositoriesByRepositorynameNotFound", 404)
}

func (o *DeleteRepositoriesByRepositorynameNotFound) String() string {
	return fmt.Sprintf("[DELETE /v1/repositories/{repositoryName}][%d] deleteRepositoriesByRepositorynameNotFound", 404)
}

func (o *DeleteRepositoriesByRepositorynameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
