// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesRawProxyByRepositorynameReader is a Reader for the PutRepositoriesRawProxyByRepositoryname structure.
type PutRepositoriesRawProxyByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesRawProxyByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesRawProxyByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesRawProxyByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesRawProxyByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesRawProxyByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/raw/proxy/{repositoryName}] PutRepositoriesRawProxyByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesRawProxyByRepositorynameNoContent creates a PutRepositoriesRawProxyByRepositorynameNoContent with default headers values
func NewPutRepositoriesRawProxyByRepositorynameNoContent() *PutRepositoriesRawProxyByRepositorynameNoContent {
	return &PutRepositoriesRawProxyByRepositorynameNoContent{}
}

/*
PutRepositoriesRawProxyByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesRawProxyByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories raw proxy by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesRawProxyByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories raw proxy by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesRawProxyByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories raw proxy by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesRawProxyByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories raw proxy by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesRawProxyByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories raw proxy by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesRawProxyByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories raw proxy by repositoryname no content response
func (o *PutRepositoriesRawProxyByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesRawProxyByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/proxy/{repositoryName}][%d] putRepositoriesRawProxyByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesRawProxyByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/proxy/{repositoryName}][%d] putRepositoriesRawProxyByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesRawProxyByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRawProxyByRepositorynameBadRequest creates a PutRepositoriesRawProxyByRepositorynameBadRequest with default headers values
func NewPutRepositoriesRawProxyByRepositorynameBadRequest() *PutRepositoriesRawProxyByRepositorynameBadRequest {
	return &PutRepositoriesRawProxyByRepositorynameBadRequest{}
}

/*
PutRepositoriesRawProxyByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesRawProxyByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories raw proxy by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesRawProxyByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories raw proxy by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesRawProxyByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories raw proxy by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesRawProxyByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories raw proxy by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesRawProxyByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories raw proxy by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesRawProxyByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories raw proxy by repositoryname bad request response
func (o *PutRepositoriesRawProxyByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesRawProxyByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/proxy/{repositoryName}][%d] putRepositoriesRawProxyByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesRawProxyByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/proxy/{repositoryName}][%d] putRepositoriesRawProxyByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesRawProxyByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRawProxyByRepositorynameUnauthorized creates a PutRepositoriesRawProxyByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesRawProxyByRepositorynameUnauthorized() *PutRepositoriesRawProxyByRepositorynameUnauthorized {
	return &PutRepositoriesRawProxyByRepositorynameUnauthorized{}
}

/*
PutRepositoriesRawProxyByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesRawProxyByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories raw proxy by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesRawProxyByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories raw proxy by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesRawProxyByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories raw proxy by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesRawProxyByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories raw proxy by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesRawProxyByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories raw proxy by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesRawProxyByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories raw proxy by repositoryname unauthorized response
func (o *PutRepositoriesRawProxyByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesRawProxyByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/proxy/{repositoryName}][%d] putRepositoriesRawProxyByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesRawProxyByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/proxy/{repositoryName}][%d] putRepositoriesRawProxyByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesRawProxyByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRawProxyByRepositorynameForbidden creates a PutRepositoriesRawProxyByRepositorynameForbidden with default headers values
func NewPutRepositoriesRawProxyByRepositorynameForbidden() *PutRepositoriesRawProxyByRepositorynameForbidden {
	return &PutRepositoriesRawProxyByRepositorynameForbidden{}
}

/*
PutRepositoriesRawProxyByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesRawProxyByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories raw proxy by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesRawProxyByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories raw proxy by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesRawProxyByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories raw proxy by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesRawProxyByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories raw proxy by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesRawProxyByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories raw proxy by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesRawProxyByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories raw proxy by repositoryname forbidden response
func (o *PutRepositoriesRawProxyByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesRawProxyByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/proxy/{repositoryName}][%d] putRepositoriesRawProxyByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesRawProxyByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/raw/proxy/{repositoryName}][%d] putRepositoriesRawProxyByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesRawProxyByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
