// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateRepository23Reader is a Reader for the UpdateRepository23 structure.
type UpdateRepository23Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRepository23Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateRepository23NoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRepository23BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRepository23Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRepository23Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/helm/hosted/{repositoryName}] updateRepository_23", response, response.Code())
	}
}

// NewUpdateRepository23NoContent creates a UpdateRepository23NoContent with default headers values
func NewUpdateRepository23NoContent() *UpdateRepository23NoContent {
	return &UpdateRepository23NoContent{}
}

/*
UpdateRepository23NoContent describes a response with status code 204, with default header values.

Repository updated
*/
type UpdateRepository23NoContent struct {
}

// IsSuccess returns true when this update repository23 no content response has a 2xx status code
func (o *UpdateRepository23NoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update repository23 no content response has a 3xx status code
func (o *UpdateRepository23NoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository23 no content response has a 4xx status code
func (o *UpdateRepository23NoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update repository23 no content response has a 5xx status code
func (o *UpdateRepository23NoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository23 no content response a status code equal to that given
func (o *UpdateRepository23NoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update repository23 no content response
func (o *UpdateRepository23NoContent) Code() int {
	return 204
}

func (o *UpdateRepository23NoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] updateRepository23NoContent", 204)
}

func (o *UpdateRepository23NoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] updateRepository23NoContent", 204)
}

func (o *UpdateRepository23NoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository23BadRequest creates a UpdateRepository23BadRequest with default headers values
func NewUpdateRepository23BadRequest() *UpdateRepository23BadRequest {
	return &UpdateRepository23BadRequest{}
}

/*
UpdateRepository23BadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateRepository23BadRequest struct {
}

// IsSuccess returns true when this update repository23 bad request response has a 2xx status code
func (o *UpdateRepository23BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository23 bad request response has a 3xx status code
func (o *UpdateRepository23BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository23 bad request response has a 4xx status code
func (o *UpdateRepository23BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository23 bad request response has a 5xx status code
func (o *UpdateRepository23BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository23 bad request response a status code equal to that given
func (o *UpdateRepository23BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update repository23 bad request response
func (o *UpdateRepository23BadRequest) Code() int {
	return 400
}

func (o *UpdateRepository23BadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] updateRepository23BadRequest", 400)
}

func (o *UpdateRepository23BadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] updateRepository23BadRequest", 400)
}

func (o *UpdateRepository23BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository23Unauthorized creates a UpdateRepository23Unauthorized with default headers values
func NewUpdateRepository23Unauthorized() *UpdateRepository23Unauthorized {
	return &UpdateRepository23Unauthorized{}
}

/*
UpdateRepository23Unauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type UpdateRepository23Unauthorized struct {
}

// IsSuccess returns true when this update repository23 unauthorized response has a 2xx status code
func (o *UpdateRepository23Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository23 unauthorized response has a 3xx status code
func (o *UpdateRepository23Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository23 unauthorized response has a 4xx status code
func (o *UpdateRepository23Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository23 unauthorized response has a 5xx status code
func (o *UpdateRepository23Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository23 unauthorized response a status code equal to that given
func (o *UpdateRepository23Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update repository23 unauthorized response
func (o *UpdateRepository23Unauthorized) Code() int {
	return 401
}

func (o *UpdateRepository23Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] updateRepository23Unauthorized", 401)
}

func (o *UpdateRepository23Unauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] updateRepository23Unauthorized", 401)
}

func (o *UpdateRepository23Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository23Forbidden creates a UpdateRepository23Forbidden with default headers values
func NewUpdateRepository23Forbidden() *UpdateRepository23Forbidden {
	return &UpdateRepository23Forbidden{}
}

/*
UpdateRepository23Forbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type UpdateRepository23Forbidden struct {
}

// IsSuccess returns true when this update repository23 forbidden response has a 2xx status code
func (o *UpdateRepository23Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository23 forbidden response has a 3xx status code
func (o *UpdateRepository23Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository23 forbidden response has a 4xx status code
func (o *UpdateRepository23Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository23 forbidden response has a 5xx status code
func (o *UpdateRepository23Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository23 forbidden response a status code equal to that given
func (o *UpdateRepository23Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update repository23 forbidden response
func (o *UpdateRepository23Forbidden) Code() int {
	return 403
}

func (o *UpdateRepository23Forbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] updateRepository23Forbidden", 403)
}

func (o *UpdateRepository23Forbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/helm/hosted/{repositoryName}][%d] updateRepository23Forbidden", 403)
}

func (o *UpdateRepository23Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
