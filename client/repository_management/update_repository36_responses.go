// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateRepository36Reader is a Reader for the UpdateRepository36 structure.
type UpdateRepository36Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRepository36Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateRepository36NoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRepository36BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRepository36Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRepository36Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/r/group/{repositoryName}] updateRepository_36", response, response.Code())
	}
}

// NewUpdateRepository36NoContent creates a UpdateRepository36NoContent with default headers values
func NewUpdateRepository36NoContent() *UpdateRepository36NoContent {
	return &UpdateRepository36NoContent{}
}

/*
UpdateRepository36NoContent describes a response with status code 204, with default header values.

Repository updated
*/
type UpdateRepository36NoContent struct {
}

// IsSuccess returns true when this update repository36 no content response has a 2xx status code
func (o *UpdateRepository36NoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update repository36 no content response has a 3xx status code
func (o *UpdateRepository36NoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository36 no content response has a 4xx status code
func (o *UpdateRepository36NoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update repository36 no content response has a 5xx status code
func (o *UpdateRepository36NoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository36 no content response a status code equal to that given
func (o *UpdateRepository36NoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update repository36 no content response
func (o *UpdateRepository36NoContent) Code() int {
	return 204
}

func (o *UpdateRepository36NoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] updateRepository36NoContent", 204)
}

func (o *UpdateRepository36NoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] updateRepository36NoContent", 204)
}

func (o *UpdateRepository36NoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository36BadRequest creates a UpdateRepository36BadRequest with default headers values
func NewUpdateRepository36BadRequest() *UpdateRepository36BadRequest {
	return &UpdateRepository36BadRequest{}
}

/*
UpdateRepository36BadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateRepository36BadRequest struct {
}

// IsSuccess returns true when this update repository36 bad request response has a 2xx status code
func (o *UpdateRepository36BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository36 bad request response has a 3xx status code
func (o *UpdateRepository36BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository36 bad request response has a 4xx status code
func (o *UpdateRepository36BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository36 bad request response has a 5xx status code
func (o *UpdateRepository36BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository36 bad request response a status code equal to that given
func (o *UpdateRepository36BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update repository36 bad request response
func (o *UpdateRepository36BadRequest) Code() int {
	return 400
}

func (o *UpdateRepository36BadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] updateRepository36BadRequest", 400)
}

func (o *UpdateRepository36BadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] updateRepository36BadRequest", 400)
}

func (o *UpdateRepository36BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository36Unauthorized creates a UpdateRepository36Unauthorized with default headers values
func NewUpdateRepository36Unauthorized() *UpdateRepository36Unauthorized {
	return &UpdateRepository36Unauthorized{}
}

/*
UpdateRepository36Unauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type UpdateRepository36Unauthorized struct {
}

// IsSuccess returns true when this update repository36 unauthorized response has a 2xx status code
func (o *UpdateRepository36Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository36 unauthorized response has a 3xx status code
func (o *UpdateRepository36Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository36 unauthorized response has a 4xx status code
func (o *UpdateRepository36Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository36 unauthorized response has a 5xx status code
func (o *UpdateRepository36Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository36 unauthorized response a status code equal to that given
func (o *UpdateRepository36Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update repository36 unauthorized response
func (o *UpdateRepository36Unauthorized) Code() int {
	return 401
}

func (o *UpdateRepository36Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] updateRepository36Unauthorized", 401)
}

func (o *UpdateRepository36Unauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] updateRepository36Unauthorized", 401)
}

func (o *UpdateRepository36Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRepository36Forbidden creates a UpdateRepository36Forbidden with default headers values
func NewUpdateRepository36Forbidden() *UpdateRepository36Forbidden {
	return &UpdateRepository36Forbidden{}
}

/*
UpdateRepository36Forbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type UpdateRepository36Forbidden struct {
}

// IsSuccess returns true when this update repository36 forbidden response has a 2xx status code
func (o *UpdateRepository36Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update repository36 forbidden response has a 3xx status code
func (o *UpdateRepository36Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repository36 forbidden response has a 4xx status code
func (o *UpdateRepository36Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update repository36 forbidden response has a 5xx status code
func (o *UpdateRepository36Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update repository36 forbidden response a status code equal to that given
func (o *UpdateRepository36Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update repository36 forbidden response
func (o *UpdateRepository36Forbidden) Code() int {
	return 403
}

func (o *UpdateRepository36Forbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] updateRepository36Forbidden", 403)
}

func (o *UpdateRepository36Forbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/r/group/{repositoryName}][%d] updateRepository36Forbidden", 403)
}

func (o *UpdateRepository36Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
