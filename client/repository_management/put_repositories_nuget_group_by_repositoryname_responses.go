// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesNugetGroupByRepositorynameReader is a Reader for the PutRepositoriesNugetGroupByRepositoryname structure.
type PutRepositoriesNugetGroupByRepositorynameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesNugetGroupByRepositorynameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesNugetGroupByRepositorynameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesNugetGroupByRepositorynameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesNugetGroupByRepositorynameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesNugetGroupByRepositorynameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/nuget/group/{repositoryName}] PutRepositoriesNugetGroupByRepositoryname", response, response.Code())
	}
}

// NewPutRepositoriesNugetGroupByRepositorynameNoContent creates a PutRepositoriesNugetGroupByRepositorynameNoContent with default headers values
func NewPutRepositoriesNugetGroupByRepositorynameNoContent() *PutRepositoriesNugetGroupByRepositorynameNoContent {
	return &PutRepositoriesNugetGroupByRepositorynameNoContent{}
}

/*
PutRepositoriesNugetGroupByRepositorynameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesNugetGroupByRepositorynameNoContent struct {
}

// IsSuccess returns true when this put repositories nuget group by repositoryname no content response has a 2xx status code
func (o *PutRepositoriesNugetGroupByRepositorynameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories nuget group by repositoryname no content response has a 3xx status code
func (o *PutRepositoriesNugetGroupByRepositorynameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories nuget group by repositoryname no content response has a 4xx status code
func (o *PutRepositoriesNugetGroupByRepositorynameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories nuget group by repositoryname no content response has a 5xx status code
func (o *PutRepositoriesNugetGroupByRepositorynameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories nuget group by repositoryname no content response a status code equal to that given
func (o *PutRepositoriesNugetGroupByRepositorynameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories nuget group by repositoryname no content response
func (o *PutRepositoriesNugetGroupByRepositorynameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesNugetGroupByRepositorynameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/nuget/group/{repositoryName}][%d] putRepositoriesNugetGroupByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesNugetGroupByRepositorynameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/nuget/group/{repositoryName}][%d] putRepositoriesNugetGroupByRepositorynameNoContent", 204)
}

func (o *PutRepositoriesNugetGroupByRepositorynameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesNugetGroupByRepositorynameBadRequest creates a PutRepositoriesNugetGroupByRepositorynameBadRequest with default headers values
func NewPutRepositoriesNugetGroupByRepositorynameBadRequest() *PutRepositoriesNugetGroupByRepositorynameBadRequest {
	return &PutRepositoriesNugetGroupByRepositorynameBadRequest{}
}

/*
PutRepositoriesNugetGroupByRepositorynameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesNugetGroupByRepositorynameBadRequest struct {
}

// IsSuccess returns true when this put repositories nuget group by repositoryname bad request response has a 2xx status code
func (o *PutRepositoriesNugetGroupByRepositorynameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories nuget group by repositoryname bad request response has a 3xx status code
func (o *PutRepositoriesNugetGroupByRepositorynameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories nuget group by repositoryname bad request response has a 4xx status code
func (o *PutRepositoriesNugetGroupByRepositorynameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories nuget group by repositoryname bad request response has a 5xx status code
func (o *PutRepositoriesNugetGroupByRepositorynameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories nuget group by repositoryname bad request response a status code equal to that given
func (o *PutRepositoriesNugetGroupByRepositorynameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories nuget group by repositoryname bad request response
func (o *PutRepositoriesNugetGroupByRepositorynameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesNugetGroupByRepositorynameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/nuget/group/{repositoryName}][%d] putRepositoriesNugetGroupByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesNugetGroupByRepositorynameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/nuget/group/{repositoryName}][%d] putRepositoriesNugetGroupByRepositorynameBadRequest", 400)
}

func (o *PutRepositoriesNugetGroupByRepositorynameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesNugetGroupByRepositorynameUnauthorized creates a PutRepositoriesNugetGroupByRepositorynameUnauthorized with default headers values
func NewPutRepositoriesNugetGroupByRepositorynameUnauthorized() *PutRepositoriesNugetGroupByRepositorynameUnauthorized {
	return &PutRepositoriesNugetGroupByRepositorynameUnauthorized{}
}

/*
PutRepositoriesNugetGroupByRepositorynameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesNugetGroupByRepositorynameUnauthorized struct {
}

// IsSuccess returns true when this put repositories nuget group by repositoryname unauthorized response has a 2xx status code
func (o *PutRepositoriesNugetGroupByRepositorynameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories nuget group by repositoryname unauthorized response has a 3xx status code
func (o *PutRepositoriesNugetGroupByRepositorynameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories nuget group by repositoryname unauthorized response has a 4xx status code
func (o *PutRepositoriesNugetGroupByRepositorynameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories nuget group by repositoryname unauthorized response has a 5xx status code
func (o *PutRepositoriesNugetGroupByRepositorynameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories nuget group by repositoryname unauthorized response a status code equal to that given
func (o *PutRepositoriesNugetGroupByRepositorynameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories nuget group by repositoryname unauthorized response
func (o *PutRepositoriesNugetGroupByRepositorynameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesNugetGroupByRepositorynameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/nuget/group/{repositoryName}][%d] putRepositoriesNugetGroupByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesNugetGroupByRepositorynameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/nuget/group/{repositoryName}][%d] putRepositoriesNugetGroupByRepositorynameUnauthorized", 401)
}

func (o *PutRepositoriesNugetGroupByRepositorynameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesNugetGroupByRepositorynameForbidden creates a PutRepositoriesNugetGroupByRepositorynameForbidden with default headers values
func NewPutRepositoriesNugetGroupByRepositorynameForbidden() *PutRepositoriesNugetGroupByRepositorynameForbidden {
	return &PutRepositoriesNugetGroupByRepositorynameForbidden{}
}

/*
PutRepositoriesNugetGroupByRepositorynameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesNugetGroupByRepositorynameForbidden struct {
}

// IsSuccess returns true when this put repositories nuget group by repositoryname forbidden response has a 2xx status code
func (o *PutRepositoriesNugetGroupByRepositorynameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories nuget group by repositoryname forbidden response has a 3xx status code
func (o *PutRepositoriesNugetGroupByRepositorynameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories nuget group by repositoryname forbidden response has a 4xx status code
func (o *PutRepositoriesNugetGroupByRepositorynameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories nuget group by repositoryname forbidden response has a 5xx status code
func (o *PutRepositoriesNugetGroupByRepositorynameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories nuget group by repositoryname forbidden response a status code equal to that given
func (o *PutRepositoriesNugetGroupByRepositorynameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories nuget group by repositoryname forbidden response
func (o *PutRepositoriesNugetGroupByRepositorynameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesNugetGroupByRepositorynameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/nuget/group/{repositoryName}][%d] putRepositoriesNugetGroupByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesNugetGroupByRepositorynameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/nuget/group/{repositoryName}][%d] putRepositoriesNugetGroupByRepositorynameForbidden", 403)
}

func (o *PutRepositoriesNugetGroupByRepositorynameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
