// Code generated by go-swagger; DO NOT EDIT.

package repository_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutRepositoriesGoProxyByRepositoryNameReader is a Reader for the PutRepositoriesGoProxyByRepositoryName structure.
type PutRepositoriesGoProxyByRepositoryNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesGoProxyByRepositoryNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesGoProxyByRepositoryNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesGoProxyByRepositoryNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesGoProxyByRepositoryNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesGoProxyByRepositoryNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRepositoriesGoProxyByRepositoryNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/repositories/go/proxy/{repositoryName}] PutRepositoriesGoProxyByRepositoryName", response, response.Code())
	}
}

// NewPutRepositoriesGoProxyByRepositoryNameNoContent creates a PutRepositoriesGoProxyByRepositoryNameNoContent with default headers values
func NewPutRepositoriesGoProxyByRepositoryNameNoContent() *PutRepositoriesGoProxyByRepositoryNameNoContent {
	return &PutRepositoriesGoProxyByRepositoryNameNoContent{}
}

/*
PutRepositoriesGoProxyByRepositoryNameNoContent describes a response with status code 204, with default header values.

Repository updated
*/
type PutRepositoriesGoProxyByRepositoryNameNoContent struct {
}

// IsSuccess returns true when this put repositories go proxy by repository name no content response has a 2xx status code
func (o *PutRepositoriesGoProxyByRepositoryNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put repositories go proxy by repository name no content response has a 3xx status code
func (o *PutRepositoriesGoProxyByRepositoryNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories go proxy by repository name no content response has a 4xx status code
func (o *PutRepositoriesGoProxyByRepositoryNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put repositories go proxy by repository name no content response has a 5xx status code
func (o *PutRepositoriesGoProxyByRepositoryNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories go proxy by repository name no content response a status code equal to that given
func (o *PutRepositoriesGoProxyByRepositoryNameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put repositories go proxy by repository name no content response
func (o *PutRepositoriesGoProxyByRepositoryNameNoContent) Code() int {
	return 204
}

func (o *PutRepositoriesGoProxyByRepositoryNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/proxy/{repositoryName}][%d] putRepositoriesGoProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesGoProxyByRepositoryNameNoContent) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/proxy/{repositoryName}][%d] putRepositoriesGoProxyByRepositoryNameNoContent", 204)
}

func (o *PutRepositoriesGoProxyByRepositoryNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesGoProxyByRepositoryNameBadRequest creates a PutRepositoriesGoProxyByRepositoryNameBadRequest with default headers values
func NewPutRepositoriesGoProxyByRepositoryNameBadRequest() *PutRepositoriesGoProxyByRepositoryNameBadRequest {
	return &PutRepositoriesGoProxyByRepositoryNameBadRequest{}
}

/*
PutRepositoriesGoProxyByRepositoryNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutRepositoriesGoProxyByRepositoryNameBadRequest struct {
}

// IsSuccess returns true when this put repositories go proxy by repository name bad request response has a 2xx status code
func (o *PutRepositoriesGoProxyByRepositoryNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories go proxy by repository name bad request response has a 3xx status code
func (o *PutRepositoriesGoProxyByRepositoryNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories go proxy by repository name bad request response has a 4xx status code
func (o *PutRepositoriesGoProxyByRepositoryNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories go proxy by repository name bad request response has a 5xx status code
func (o *PutRepositoriesGoProxyByRepositoryNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories go proxy by repository name bad request response a status code equal to that given
func (o *PutRepositoriesGoProxyByRepositoryNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put repositories go proxy by repository name bad request response
func (o *PutRepositoriesGoProxyByRepositoryNameBadRequest) Code() int {
	return 400
}

func (o *PutRepositoriesGoProxyByRepositoryNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/proxy/{repositoryName}][%d] putRepositoriesGoProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesGoProxyByRepositoryNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/proxy/{repositoryName}][%d] putRepositoriesGoProxyByRepositoryNameBadRequest", 400)
}

func (o *PutRepositoriesGoProxyByRepositoryNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesGoProxyByRepositoryNameUnauthorized creates a PutRepositoriesGoProxyByRepositoryNameUnauthorized with default headers values
func NewPutRepositoriesGoProxyByRepositoryNameUnauthorized() *PutRepositoriesGoProxyByRepositoryNameUnauthorized {
	return &PutRepositoriesGoProxyByRepositoryNameUnauthorized{}
}

/*
PutRepositoriesGoProxyByRepositoryNameUnauthorized describes a response with status code 401, with default header values.

Authentication required
*/
type PutRepositoriesGoProxyByRepositoryNameUnauthorized struct {
}

// IsSuccess returns true when this put repositories go proxy by repository name unauthorized response has a 2xx status code
func (o *PutRepositoriesGoProxyByRepositoryNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories go proxy by repository name unauthorized response has a 3xx status code
func (o *PutRepositoriesGoProxyByRepositoryNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories go proxy by repository name unauthorized response has a 4xx status code
func (o *PutRepositoriesGoProxyByRepositoryNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories go proxy by repository name unauthorized response has a 5xx status code
func (o *PutRepositoriesGoProxyByRepositoryNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories go proxy by repository name unauthorized response a status code equal to that given
func (o *PutRepositoriesGoProxyByRepositoryNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put repositories go proxy by repository name unauthorized response
func (o *PutRepositoriesGoProxyByRepositoryNameUnauthorized) Code() int {
	return 401
}

func (o *PutRepositoriesGoProxyByRepositoryNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/proxy/{repositoryName}][%d] putRepositoriesGoProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesGoProxyByRepositoryNameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/proxy/{repositoryName}][%d] putRepositoriesGoProxyByRepositoryNameUnauthorized", 401)
}

func (o *PutRepositoriesGoProxyByRepositoryNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesGoProxyByRepositoryNameForbidden creates a PutRepositoriesGoProxyByRepositoryNameForbidden with default headers values
func NewPutRepositoriesGoProxyByRepositoryNameForbidden() *PutRepositoriesGoProxyByRepositoryNameForbidden {
	return &PutRepositoriesGoProxyByRepositoryNameForbidden{}
}

/*
PutRepositoriesGoProxyByRepositoryNameForbidden describes a response with status code 403, with default header values.

Insufficient permissions
*/
type PutRepositoriesGoProxyByRepositoryNameForbidden struct {
}

// IsSuccess returns true when this put repositories go proxy by repository name forbidden response has a 2xx status code
func (o *PutRepositoriesGoProxyByRepositoryNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories go proxy by repository name forbidden response has a 3xx status code
func (o *PutRepositoriesGoProxyByRepositoryNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories go proxy by repository name forbidden response has a 4xx status code
func (o *PutRepositoriesGoProxyByRepositoryNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories go proxy by repository name forbidden response has a 5xx status code
func (o *PutRepositoriesGoProxyByRepositoryNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories go proxy by repository name forbidden response a status code equal to that given
func (o *PutRepositoriesGoProxyByRepositoryNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put repositories go proxy by repository name forbidden response
func (o *PutRepositoriesGoProxyByRepositoryNameForbidden) Code() int {
	return 403
}

func (o *PutRepositoriesGoProxyByRepositoryNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/proxy/{repositoryName}][%d] putRepositoriesGoProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesGoProxyByRepositoryNameForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/proxy/{repositoryName}][%d] putRepositoriesGoProxyByRepositoryNameForbidden", 403)
}

func (o *PutRepositoriesGoProxyByRepositoryNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesGoProxyByRepositoryNameNotFound creates a PutRepositoriesGoProxyByRepositoryNameNotFound with default headers values
func NewPutRepositoriesGoProxyByRepositoryNameNotFound() *PutRepositoriesGoProxyByRepositoryNameNotFound {
	return &PutRepositoriesGoProxyByRepositoryNameNotFound{}
}

/*
PutRepositoriesGoProxyByRepositoryNameNotFound describes a response with status code 404, with default header values.

Repository not found
*/
type PutRepositoriesGoProxyByRepositoryNameNotFound struct {
}

// IsSuccess returns true when this put repositories go proxy by repository name not found response has a 2xx status code
func (o *PutRepositoriesGoProxyByRepositoryNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put repositories go proxy by repository name not found response has a 3xx status code
func (o *PutRepositoriesGoProxyByRepositoryNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put repositories go proxy by repository name not found response has a 4xx status code
func (o *PutRepositoriesGoProxyByRepositoryNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put repositories go proxy by repository name not found response has a 5xx status code
func (o *PutRepositoriesGoProxyByRepositoryNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put repositories go proxy by repository name not found response a status code equal to that given
func (o *PutRepositoriesGoProxyByRepositoryNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put repositories go proxy by repository name not found response
func (o *PutRepositoriesGoProxyByRepositoryNameNotFound) Code() int {
	return 404
}

func (o *PutRepositoriesGoProxyByRepositoryNameNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/proxy/{repositoryName}][%d] putRepositoriesGoProxyByRepositoryNameNotFound", 404)
}

func (o *PutRepositoriesGoProxyByRepositoryNameNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/repositories/go/proxy/{repositoryName}][%d] putRepositoriesGoProxyByRepositoryNameNotFound", 404)
}

func (o *PutRepositoriesGoProxyByRepositoryNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
